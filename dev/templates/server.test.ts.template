import supertest from 'supertest';
import {testEngines} from '../engine/engine.spec';
import {mockUserName, mockUserPass} from '../engine/user/user.mock';
import {Server} from './server';

describe('Server', () => {
	let server: Server;
	let token: string;
	let request: supertest.SuperTest<supertest.Test>;
	let get: (apiPath: string) => supertest.Test;
	let post: (apiPath: string) => supertest.Test;
	let getNotLoggedIn: (apiPath: string) => supertest.Test;
	let postNotLoggedIn: (apiPath: string) => supertest.Test;
	let getNoRights: (apiPath: string) => supertest.Test;
	let postNoRights: (apiPath: string) => supertest.Test;
	testEngines({}, async (testEngine) => {
		testEngine.engine.config.server.port = 10010;
		testEngine.engine.config.server.listen = '127.0.0.1';
		server = new Server(testEngine.engine);
		await server.start();
		request = supertest('http://127.0.0.1:10010');
		const res = await request.post('/api/v1/login')
			.send({username: mockUserName, password: mockUserPass, client: 'supertest-tests'});
		token = res.body.jwt;
		get = (apiPath) => request.get(apiPath).set('Authorization', 'Bearer ' + token);
		getNotLoggedIn = (apiPath) => request.post(apiPath);
		post = (apiPath) => request.post(apiPath).set('Authorization', 'Bearer ' + token);
		postNotLoggedIn = (apiPath) => request.post(apiPath);
	}, () => {
	{{#sections}}
		describe('{{{title}}}', () => {
			{{#subsections}}
			describe('{{{title}}}', () => {
				{{#tests}}
					it('{{{title}}}', async () => {
						{{{content}}}
					});
				{{/tests}}
			});
			{{/subsections}}
		});
	{{/sections}}
	},
	async () => {
		await server.stop();
	});
});

