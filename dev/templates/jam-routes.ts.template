// THIS FILE IS GENERATED, DO NOT EDIT MANUALLY

import express from 'express';
import {AcousticBrainz} from '../../model/acousticbrainz-rest-data';
import {Acoustid} from '../../model/acoustid-rest-data';
import {CoverArtArchive} from '../../model/coverartarchive-rest-data';
import {Jam} from '../../model/jam-rest-data';
import {JamParameters} from '../../model/jam-rest-params';
import {LastFM} from '../../model/lastfm-rest-data';
import {MusicBrainz} from '../../model/musicbrainz-rest-data';
import {ApiBinaryResult} from '../../typings';
import {JamApi, JamRequest} from './api';
import {UserRequest} from './login';
import {ApiResponder} from './response';

export type JamApiRole = {{{roles}}};
export type RegisterCallback = (req: UserRequest, res: express.Response) => Promise<void>;
export interface Register {
	get(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void;
	post(name: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void;
	upload(name: string, field: string, execute: RegisterCallback, roles?: Array<JamApiRole>, apiCheckName?: string): void;
}

export function registerPublicApi(register: Register, api: JamApi): void {
	{{#publicAccess}}
	register.{{{method}}}('/{{{apiPath}}}'{{#upload}}, '{{{upload}}}'{{/upload}}, async (req, res) => {
		const options: JamRequest<{{{parameterType}}}> = {query: req.{{{parameterSource}}}, user: req.user, client: req.client{{#upload}}, file: req.file ? req.file.path : undefined, fileType: req.file ? req.file.mimetype : undefined{{/upload}}};
		{{#resultType}}const result: {{{resultType}}} = {{/resultType}}await api.{{{controllerCall}}}(options);
		ApiResponder.{{{respondCall}}};
	}{{#callRoles}}, {{{callRoles}}}{{/callRoles}}{{#apiPathCheck}}, '{{{apiPathCheck}}}'{{/apiPathCheck}});
	{{/publicAccess}}
}

export function registerAccessControlApi(register: Register, api: JamApi): void {
	{{#privateAccess}}
	register.{{{method}}}('/{{{apiPath}}}'{{#upload}}, '{{{upload}}}'{{/upload}}, async (req, res) => {
		const options: JamRequest<{{{parameterType}}}> = {query: req.{{{parameterSource}}}, user: req.user, client: req.client{{#upload}}, file: req.file ? req.file.path : undefined, fileType: req.file ? req.file.mimetype : undefined{{/upload}}};
		{{#resultType}}const result: {{{resultType}}} = {{/resultType}}await api.{{{controllerCall}}}(options);
		ApiResponder.{{{respondCall}}};
	}{{#callRoles}}, {{{callRoles}}}{{/callRoles}}{{#apiPathCheck}}, '{{{apiPathCheck}}}'{{/apiPathCheck}});
	{{/privateAccess}}
}
