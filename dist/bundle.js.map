{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/types.ts","webpack:///external \"path\"","webpack:///./src/objects/base/base.store.ts","webpack:///./src/utils/logger.ts","webpack:///./src/utils/fs-utils.ts","webpack:///./src/api/jam/error.ts","webpack:///external \"fs-extra\"","webpack:///./src/objects/base/base.service.ts","webpack:///./src/objects/state/state.format.ts","webpack:///./src/objects/base/base.controller.ts","webpack:///./src/utils/paginate.ts","webpack:///./src/api/subsonic/format.ts","webpack:///./src/utils/filetype.ts","webpack:///external \"request\"","webpack:///external \"moment\"","webpack:///./src/utils/debounce-promises.ts","webpack:///./src/objects/base/base.list.service.ts","webpack:///./src/objects/base/base.list.controller.ts","webpack:///./src/api/subsonic/response.ts","webpack:///./src/utils/webservice-client.ts","webpack:///./src/utils/random.ts","webpack:///external \"fs\"","webpack:///./src/version.ts","webpack:///external \"express\"","webpack:///./src/api/jam/response.ts","webpack:///./src/objects/track/track.format.ts","webpack:///./src/objects/user/user.format.ts","webpack:///./src/engine/io/components/tag.ts","webpack:///external \"limiter\"","webpack:///./src/objects/playlist/playlist.service.ts","webpack:///external \"fluent-ffmpeg\"","webpack:///./src/utils/download.ts","webpack:///./src/objects/episode/episode.format.ts","webpack:///./src/engine/index/index.format.ts","webpack:///external \"cors\"","webpack:///external \"express-session\"","webpack:///./src/utils/openapi-parameters-check.ts","webpack:///./src/utils/hex.ts","webpack:///./src/index.ts","webpack:///./src/engine/engine.ts","webpack:///./src/engine/io/io.service.ts","webpack:///external \"winston\"","webpack:///external \"winston-timer\"","webpack:///./src/engine/io/components/scan.ts","webpack:///./src/engine/io/components/match.ts","webpack:///./src/engine/io/components/merge.ts","webpack:///./src/utils/deep-compare.ts","webpack:///./src/engine/io/components/meta.ts","webpack:///./src/engine/io/components/clean.ts","webpack:///./src/modules/audio/audio.module.ts","webpack:///external \"jamp3\"","webpack:///./src/modules/audio/clients/chartlyrics-client.ts","webpack:///./src/utils/webservice-xml-client.ts","webpack:///external \"xml2js\"","webpack:///./src/modules/audio/clients/acoustid-client.ts","webpack:///./src/modules/audio/tools/fpcalc.ts","webpack:///./src/utils/tool.ts","webpack:///./src/utils/which.ts","webpack:///external \"child_process\"","webpack:///./src/modules/audio/clients/lastfm-client.ts","webpack:///./src/modules/audio/clients/musicbrainz-client.ts","webpack:///./src/modules/audio/clients/musicbrainz-client.types.ts","webpack:///./src/utils/genres.ts","webpack:///./src/engine/index/index.service.ts","webpack:///./src/engine/metadata/metadata.service.ts","webpack:///./src/objects/user/user.service.ts","webpack:///external \"md5-typescript\"","webpack:///./src/engine/chat/chat.service.ts","webpack:///./src/engine/genre/genre.service.ts","webpack:///./src/objects/podcast/podcast.service.ts","webpack:///./src/utils/feed.ts","webpack:///external \"zlib\"","webpack:///external \"feedparser\"","webpack:///external \"iconv-lite\"","webpack:///./src/engine/nowplaying/nowplaying.service.ts","webpack:///./src/objects/root/root.service.ts","webpack:///./src/objects/playqueue/playqueue.service.ts","webpack:///./src/engine/waveform/waveform.service.ts","webpack:///./src/modules/audio/tools/ffmpeg-waveform.ts","webpack:///external \"svgo\"","webpack:///external \"stream\"","webpack:///external \"waveform-data\"","webpack:///./src/engine/stream/stream.service.ts","webpack:///./src/modules/audio/transcoder.ts","webpack:///external \"tmp\"","webpack:///./src/objects/bookmark/bookmark.service.ts","webpack:///./src/objects/state/state.service.ts","webpack:///./src/engine/image/image.service.ts","webpack:///./src/engine/download/download.service.ts","webpack:///./src/utils/compress-stream.ts","webpack:///external \"archiver\"","webpack:///./src/objects/radio/radio.service.ts","webpack:///./src/objects/folder/folder.service.ts","webpack:///./src/modules/image/image.module.ts","webpack:///external \"http\"","webpack:///external \"jimp\"","webpack:///external \"mime-types\"","webpack:///./src/objects/track/track.service.ts","webpack:///./src/objects/artist/artist.service.ts","webpack:///./src/objects/album/album.service.ts","webpack:///./src/objects/episode/episode.service.ts","webpack:///./src/config/thirdparty.config.ts","webpack:///./src/api/server.ts","webpack:///external \"body-parser\"","webpack:///./src/api/jam/router.ts","webpack:///./src/api/jam/login.ts","webpack:///external \"multer\"","webpack:///./src/api/jam/api.ts","webpack:///./src/objects/episode/episode.controller.ts","webpack:///./src/objects/podcast/podcast.controller.ts","webpack:///./src/objects/podcast/podcast.format.ts","webpack:///./src/objects/album/album.controller.ts","webpack:///./src/objects/album/album.format.ts","webpack:///./src/objects/artist/artist.controller.ts","webpack:///./src/objects/artist/artist.format.ts","webpack:///./src/objects/playlist/playlist.controller.ts","webpack:///./src/objects/playlist/playlist.format.ts","webpack:///./src/objects/track/track.controller.ts","webpack:///./src/objects/folder/folder.controller.ts","webpack:///./src/engine/io/components/health.ts","webpack:///./src/objects/folder/folder.format.ts","webpack:///./src/objects/root/root.controller.ts","webpack:///./src/objects/root/root.format.ts","webpack:///./src/objects/user/user.controller.ts","webpack:///./src/engine/chat/chat.controller.ts","webpack:///./src/engine/chat/chat.format.ts","webpack:///./src/engine/metadata/metadata.controller.ts","webpack:///./src/engine/stream/stream.controller.ts","webpack:///./src/engine/genre/genre.controller.ts","webpack:///./src/engine/genre/genre.format.ts","webpack:///./src/engine/nowplaying/nowplaying.controller.ts","webpack:///./src/engine/nowplaying/nowplaying.format.ts","webpack:///./src/engine/image/image.controller.ts","webpack:///./src/engine/download/download.controller.ts","webpack:///./src/engine/waveform/waveform.controller.ts","webpack:///./src/engine/autocomplete/autocomplete.controller.ts","webpack:///./src/objects/bookmark/bookmark.controller.ts","webpack:///./src/objects/bookmark/bookmark.format.ts","webpack:///./src/objects/playqueue/playqueue.controller.ts","webpack:///./src/objects/playqueue/playqueue.format.ts","webpack:///./src/objects/radio/radio.controller.ts","webpack:///./src/objects/radio/radio.format.ts","webpack:///./src/utils/session-storage.ts","webpack:///external \"passport\"","webpack:///external \"passport-jwt\"","webpack:///external \"passport-local\"","webpack:///external \"jsonwebtoken\"","webpack:///./src/api/jam/routes.ts","webpack:///./src/api/jam/check.ts","webpack:///./src/utils/validate-json.ts","webpack:///external \"ajv\"","webpack:///./src/utils/max-age.ts","webpack:///external \"multer-autoreap\"","webpack:///external \"express-rate-limit\"","webpack:///./src/api/subsonic/router.ts","webpack:///./src/api/subsonic/login.ts","webpack:///./src/utils/to-xml.ts","webpack:///external \"util\"","webpack:///./src/api/subsonic/parameters.ts","webpack:///./src/api/subsonic/api.ts","webpack:///./src/api/subsonic/routes.ts","webpack:///./src/api/subsonic/check.ts","webpack:///external \"helmet\"","webpack:///./src/config.ts","webpack:///./src/config/app.config.ts","webpack:///external \"../config/config.js\"","webpack:///external \"../config/firststart.config.js\"","webpack:///./src/engine/store/store.ts","webpack:///./src/objects/user/user.store.ts","webpack:///./src/objects/track/track.store.ts","webpack:///./src/objects/folder/folder.store.ts","webpack:///./src/objects/episode/episode.store.ts","webpack:///./src/objects/album/album.store.ts","webpack:///./src/objects/artist/artist.store.ts","webpack:///./src/objects/radio/radio.store.ts","webpack:///./src/objects/playqueue/playqueue.store.ts","webpack:///./src/objects/root/root.store.ts","webpack:///./src/objects/bookmark/bookmark.store.ts","webpack:///./src/objects/podcast/podcast.store.ts","webpack:///./src/objects/playlist/playlist.store.ts","webpack:///./src/objects/state/state.store.ts","webpack:///./src/db/elasticsearch/db-elastic.ts","webpack:///external \"elasticsearch\"","webpack:///./src/db/elasticsearch/es-sequence.ts","webpack:///./src/db/elasticsearch/mapping.ts","webpack:///./src/utils/wait.ts","webpack:///./src/db/nedb/db-nedb.ts","webpack:///external \"nedb\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","FolderType","DBObjectType","AudioMimeTypes","mp3","m4a","ogg","oga","webma","webm","wav","VideoMimeTypes","mp4","m4v","ogv","webmv","PodcastStatus","FolderTypeImageName","unknown","artist","multiartist","album","multialbum","extras","FolderTypesAlbum","DatabaseQuerySortType","AlbumType","FileTyp","require","types_1","BaseStore","[object Object]","type","db","this","group","getDBIndex","item","add","replace","id","idOrIds","remove","items","byId","ids","byIds","queryOne","all","query","queryIds","count","onItems","iterate","upsert","removeByQuery","transformQuery","QueryHelper","q","field","term","match","startsWith","startsWiths","terms","notNull","push","lte","gte","undefined","range","fieldMap","keys","length","sorts","forEach","sort","descending","ascending","amount","offset","winston_1","__importDefault","default","configureLogger","level","configure","transports","Console","format","combine","colorize","simple","Logger","params","line","Date","toISOString","concat","join","log","applyLog","toString","start_log","stop_log","path_1","fs_extra_1","fileDeleteIfExists","pathName","pathExists","unlink","pathDeleteIfExists","fileSuffix","filename","extname","slice","toLowerCase","replaceFileSystemChars","cleanFolderSystemChars","ensureTrailingPathSeparator","sep","ApiError","Error","message","failCode","super","constructor","captureStackTrace","InvalidParamError","msg","NotFoundError","UnauthError","GenericError","BaseStoreService","store","formatState","state","played","lastplayed","faved","rated","formatStates","states","result","error_1","state_format_1","BaseController","service","stateService","imageService","downloadService","Promise","reject","obj","includes","user","prepare","list","prepareList","a","b","indexOf","byID","search","defaultSort","req","prepareByID","byIDs","findOrCreate","findOrCreateMany","map","fav","rating","rate","translateQuery","getObjImage","size","getObjDownload","paginate","moment_1","fs_utils_1","FORMAT","code","txt","subsonic-response","status","xmlns","error","0","10","20","30","40","50","70","version","assign","date","utc","root","parseInt","username","email","maxBitRate","avatarLastChanged","formatSubSonicDate","folder","allowedfolder","scrobblingEnabled","adminRole","roles","settingsRole","downloadRole","uploadRole","playlistRole","coverArtRole","commentRole","podcastRole","streamRole","jukeboxRole","shareRole","videoConversionRole","entry","starred","userRating","index","groups","entries","e","packFolderIndexArtist","packArtist","parent","parentID","basename","path","tag","title","artistId","artistID","coverArt","songCount","trackIDs","duration","year","genre","created","albumCount","albumIDs","info","notes","description","musicBrainzId","mbid","lastFmUrl","url","smallImageUrl","image","small","mediumImageUrl","medium","largeImageUrl","large","similar","biography","similarArtist","track","suffix","isDir","stat","media","isNaN","Math","round","bitRate","contentType","isVideo","discNumber","disc","albumId","albumID","playCount","transcodedSuffix","transcodedContentType","nowPlaying","packTrack","episode","packPodcastEpisode","nowPlay","minutesAgo","diff","time","asMinutes","playerId","podcast","errorMessage","originalImageUrl","streamId","channelId","podcastID","summary","publishDate","author","playlist","comment","public","isPublic","changed","allowedUser","owner","userID","tracks","packPlaylist","bookmark","child","position","childs","song","playqueue","current","currentID","changedBy","radio","streamUrl","homePageUrl","homepage","content","trackCount","artistCount","FAIL","GENERIC","PARAMETER","CLIENT_OLD","SERVER_OLD","CREDENTIALS","UNAUTH","NOTFOUND","SupportedReadImageFormat","SupportedWriteImageFormat","SupportedAudioFormat","SupportedTranscodeAudioFormat","getFileType","IMAGE","AUDIO","TAG","BACKUP","OTHER","DebouncePromises","pendingPromises","resolve","err","cb","base_service_1","BaseListService","searchIDs","getAvgHighestDestIDs","getFilteredIDs","getHighestRatedDestIDs","getFrequentlyPlayedDestIDs","getFavedDestIDs","getRecentlyPlayedDestIDs","random_1","paginate_1","base_controller_1","BaseListController","listService","listQuery","jamquery","randomItems","getHighestRatedIDs","getAvgHighestIDs","getFrequentlyPlayedIDs","getFavedIDs","getRecentlyPlayedIDs","prepareListByIDs","to_xml_1","format_1","ApiResponder","res","send","packOK","data","parameters","callback","JSON","stringify","json","set","toXML","packResponse","fail","packFail","text","pipe","buffer","file","sendFile","limiter_1","request_1","WebserviceClient","requestPerInterval","requestIntervalMS","userAgent","limiter","RateLimiter","options","headers","User-Agent","qs","timeout","removeTokens","response","body","parse","shuffle","j","floor","random","randomInt","min","max","randomItem","done","JAMSERVE_VERSION","JAMAPI_VERSION","formatTrackTag","mbz","recordingID","mbRecordingID","releaseTrackID","mbReleaseTrackID","trackID","mbTrackID","mbArtistID","mbAlbumID","find","trackNr","musicbrainz","formatTrack","trackMedia","channels","sampleRate","trackTag","formatUser","stream","upload","admin","convert2list","val","getMostUsedTagValue","multi","cleaned","filter","getMetaStat","dir","stats","artistSort","images","files","tracktag","split","directories","sub","subtag","artists","artistSorts","albums","genres","years","mbArtistIDs","mbAlbumIDs","cVariousArtist","isMultiArtist","isMultiAlbum","img","typ","createFolderTag","debug","metaStat","nameSplit","trim","parts","y","shift","splitDirectoryName","f","albumType","mix","createTagsR","applyFolderTagType","cUnknownArtist","cUnknownAlbum","fillMatchTags","updatePlayListTracks","trackStore","trackHash","PlaylistService","playlistStore","now","fs_1","http","__importStar","downloadFile","on","statusCode","STATUS_CODES","createWriteStream","track_format_1","formatEpisode","guid","link","formatArtistIndex","lastModified","formatFolderIndex","folderID","logger_1","validate_json_1","validOAParameter","param","schema","required","num","Number","minimum","maximum","enum","Array","isArray","console","checkOpenApiParameters","openapi","forceMethod","cmdPath","paths","method","cmd","in","cookies","checkAOParameters","apiSchema","requestBody","$ref","def","definitions","validate","errors","checkAORequestBody","hexEncode","u","charAt","charCodeAt","hexDecode","hex","str","String","fromCharCode","substr","engine_1","server_1","config_1","store_1","db_elastic_1","db_nedb_1","config","loadConfig","database","use","DBElastic","elasticsearch","DBNedb","getDataPath","Store","engine","Engine","server","Server","process","argv","open","reset","close","runClearDB","then","catch","stop","exit","start","ioService","refresh","run","io_service_1","audio_module_1","index_service_1","metadata_service_1","user_service_1","chat_service_1","genre_service_1","podcast_service_1","nowplaying_service_1","root_service_1","playlist_service_1","playqueue_service_1","waveform_service_1","stream_service_1","bookmark_service_1","state_service_1","image_service_1","download_service_1","radio_service_1","folder_service_1","image_module_1","track_service_1","artist_service_1","album_service_1","episode_service_1","thirdparty_config_1","audioModule","AudioModule","ThirdPartyConfig","waveformService","WaveformService","imageModule","ImageModule","StateService","stateStore","folderService","FolderService","folderStore","trackService","TrackService","artistService","ArtistService","artistStore","albumService","AlbumService","albumStore","userService","UserService","userStore","bookmarkStore","playQueueStore","ImageService","genreService","GenreService","indexService","IndexService","app","IoService","DownloadService","chatService","ChatService","chat","nowPlayingService","NowPlayingService","streamService","StreamService","playlistService","playQueueService","PlayQueueService","bookmarkService","BookmarkService","episodeService","EpisodeService","episodeStore","podcastService","PodcastService","podcastStore","metaDataService","MetaDataService","rootService","RootService","rootStore","radioService","RadioService","radioStore","firstStart","adminUser","pass","mail","roots","firstStartRoots","first","ensureDir","checkDataPaths","checkFirstStart","scan_1","match_1","merge_1","meta_1","clean_1","scanning","rootstatus","rootID","changes","scan","scanDir","matchDir","removedFolders","removedTracks","mtime","ctime","merger","Merger","scanningCount","merge","newTracks","unchangedTracks","unchangedFolders","updateTracks","newFolders","updateFolders","cleanScanStore","removeTracks","removeFolders","scanForRemoved","cleanStore","clearImageCacheByIDs","clearWaveformCacheByIDs","clearID3","meta","MetaMerge","sync","startScanning","stopScanning","lastScan","scanRoot","refreshInternal","buildIndexes","rescanRoot","filetype_1","scanDirR","valueOf","folders","readdir","subStat","isDirectory","clone","searchOne","matchDirR","subFolder","subDir","sd","deep_compare_1","tag_1","audio","onProgress","modified","deepCompare","old","read","dirname","buildTrack","trackHasChanged","updateTrack","newTrack","compareFilesR","compareFile","newFolder","compareSubs","folderHasChanged","updateFolder","compareFoldersR","ignore","ignoreList","compare","oa","ob","trackInfo","mbAlbumArtistID","albumArtist","getArtistName","findArtist","rootIDs","nameSort","getArtistNameSort","getArtistMBArtistID","destID","removeID3Artist","addArtist","getAlbumName","findAlbum","removeID3Album","addID3Album","trackInfos","artistSearchesName","artistTracks","idtracks","hasChanged","artistidtracks","albumtracks","atracks","reduce","replaceMany","syncID3Artist","syncAlbum","addID3s","syncID3","isInRoot","fullpath","doneFileIds","doneFolderIds","__awaiter","removeAlbums","updateAlbums","destIDs","removeArtists","updateArtists","jamp3_1","chartlyrics_client_1","acoustid_client_1","lastfm_client_1","musicbrainz_client_1","genres_1","durationEstimate","encoded","layer","simplifyTag","release_year","originalyear","original_release_year","release_date","albumSort","album_sort_order","album_artist","albumArtistSort","album_artist_sort","album_artist_sort_order","artist_sort","cleanGenre","titleSort","title_sort_order","TRACKID","mbAlbumType","ALBUMTYPE","ALBUMARTISTID","ARTISTID","ALBUMID","RELEASETRACKID","mbReleaseGroupID","RELEASEGROUPID","RECORDINGID","mbAlbumStatus","ALBUMSTATUS","mbReleaseCountry","RELEASECOUNTRY","packMediaInfoImage","tags","bio","parseFloat","wiki","rank","tools","MusicbrainzClient","retryOn","lastFM","LastFMClient","lastfm","apiKey","acoustid","AcoustidClient","chartLyrics","ChartLyricsClient","chartlyrics","MP3","mpegQuick","mpeg","id3v2","packJamServeTag","packJamServeMpeg","copy","frames","head","statusFlags","formatFlags","ver","rev","valid","end","ID3v2","write","id3v2tag","frame","binValue","bin","pictureType","mimeType","artistName","packMediaInfoArtist","albumName","packMediaInfoAlbum","mb","lookup","inc","releases","similarTrack","packMediaInfoSimilarSong","similarTrackID","topArtistSongs","packMediaInfoTopSongs","topArtistSongsID","arid","release","webservice_xml_client_1","WebserviceXMLClient","songName","opts","getJson","GetLyricResult","LyricId","trackId","TrackId","checksum","LyricChecksum","LyricSong","LyricArtist","LyricUrl","covertArtUrl","LyricCovertArtUrl","LyricRank","correctUrl","LyricCorrectUrl","lyric","Lyric","xml2js_1","parseString","err2","fpcalc_1","webservice_client_1","META_DEFAULT","fp","client","toFixed","fingerprint","results","fpcalc","tool_1","cmds","raw","spawnToolJson","which_1","child_process_1","spawnTool","binName","envName","args","getBinPath","spawn","stdout","stderr","spawnToolStream","onData","isWindows","platform","test","env","OSTYPE","cache","COLON","isexeStat","isFile","isSymbolicLink","pathext","pathExt","PATHEXT","pathexts","checkWindowsMode","mod","uid","gid","myUid","getuid","myGid","getgid","g","checkMode","whichs","opt","colon","pathEnv","PATH","pathExtExe","unshift","cwd","ext","extExe","getPathInfo","found","F","er","getNotFoundError","pathPart","E","ii","ll","isexe","is","enviroment","which","arch","localBin","walk","subkey","api","sorted_params","beautify","toptracks","similartracks","albumIDTopTags","musicbrainz_client_types_1","host","port","basePath","limit","retryDelay","retryCount","toUpperCase","formatKey","encodeURIComponent","retry","setTimeout","isRateLimitError","concatSearchQuery","LookupIncludes","invalidKey","lookupIds","LookupBrowseTypes","area","collection","event","instrument","label","place","recording","release-group","series","work","GenresSlugs","genreByNumbers","slugify","Genres","getKnownGenre","slug","part","numpart","exec","IndexTreeBuilder","indexConfig","matches","RegExp","sortname","removeArticles","indexChar","getIndexChar","localeCompare","searchCount","inPath","getTotalTrackCount","folderIndex","buildFolderIndex","artistIndex","buildArtistIndex","builder","cached","forceRebuild","getIndexes","isArtist","mediaInfoArtistInfoByArtistID","mediaInfoArtistInfo","checkArtist","topSongs","mediaInfoTopSongsByArtistID","mediaInfoTopSongs","checkTopSongs","mediaInfoAlbumInfoByAlbumID","checkAlbumById","mediaInfoAlbumInfo","checkAlbumByNameAndArtist","checkAlbum","getInfo","mediaInfoSimilarTrackByMBTrackID","mediaInfoSimilarTrack","createArtistInfo","createAlbumInfo","createTrackInfo","createFolderInfo","songs","similars","getSimilarSongs","vals","sim","mbTrackIDs","tr","includeNotPresent","names","artistsHash","types","includeSimilar","updateFolderInfo","getFolderSimilarArtists","updateArtistInfo","getSimilarArtists","updateAlbumInfo","top","getAlbumInfo","getSimilarArtistTracks","getArtistInfos","getFolderInfo","getTrackInfo","md5_typescript_1","userAvatarPath","avatar","destFileName","destName","createAvatar","clearImageCacheByID","update","getByName","token","salt","Md5","init","chatConfig","messages","maxAge","unit","subtract","since","cleanOld","maxMsgs","genreHash","section","sections","sec","feed_1","debounce_promises_1","podcastRefreshDebounce","podcastId","isPending","lastCheck","new","removeEpisodes","append","setPending","feed","Feed","episodes","completed","newEpisodes","mergeEpisodes","podcasts","zlib_1","feedparser_1","iconv_lite_1","para","encoding","decompress","createInflate","createGunzip","charset","iv","decodeStream","emit","posts","doneReported","pool","setMaxListeners","setHeader","feedparser","abort","statusMessage","getParams","pipestream","maybeDecompress","maybeTranslate","fetch","generator","categories","post","chapters","pscChaps","pscChap","enclosures","playing","np","reportPlaying","checkUsedPath","playQueue","emptyPlaylist","ffmpeg_waveform_1","waveformCachePath","waveformCacheDebounce","wf","WaveformGenerator","Buffer","from","svg","binary","searches","getCacheID","findIndex","cacheID","cachefile","generateWaveform","writeFile","svgo_1","stream_1","fluent_ffmpeg_1","WaveformData","WaveformStream","Transform","_at__samplesPerPixel","_at__sampleRate","writableObjectMode","readableObjectMode","highWaterMark","_buf","PassThrough","_out","_started","_min","_max","_samples","_total","_samplesPerPixel","_sampleRate","source","_ffmpeg","addOptions","errored","writeToStream","oddByte","readInt8","readInt16LE","readResults","pos","dataLen","chunk","once","Waveform","samplesPerPixel","ws","px","alloc","writeInt32LE","writeUInt32LE","writeInt16LE","sample_rate","samples_per_pixel","bits","asBinary","asJSON","buildSvg","svgo","optimize","createReadStream","wfd","adapter","resample","width","scale","totalPeaks","peakNumber","transcoder_1","sourceFormat","destFormat","Transcoder","needsTranscoding","validTranscoding","PreTranscoder","streamFile","tmp_1","fs","mediaFormat","getAvailableFormats","formats","canDemux","proc","nolog","withAudioCodec","withNoVideo","toFormat","withAudioBitrate","fd","cleanupCallback","statSync","rs","autoClose","save","destType","emptyState","minRating","ratings","avg","isPlayed","isFaved","getTrackImage","getFolderImage","getArtistImage","getAlbumImage","getUserImage","paintImage","getCoverArtText","paint","compress_stream_1","CompressListStream","CompressFolderStream","fileList","downloadTrack","downloadFolder","downloadArtist","downloadAlbum","downloadEpisode","downloadPlaylist","archiver_1","BaseCompressStream","streaming","isSupportedFormat","archive","zlib","finalize","directory","homepageUrl","base_list_service_1","newPath","rename","rest","folderId","collect","downloadFolderImage","imageUrl","storeImage","download_1","jimp_1","mime_types_1","imageCachePath","imageCacheDebounce","filepath","imageext","font","loadFont","FONT_SANS_32_WHITE","print","alignmentX","HORIZONTAL_ALIGN_CENTER","alignmentY","VERTICAL_ALIGN_MIDDLE","resize","mime","getBufferAsync","fileFormat","getImageAs","crop","getWidth","getHeight","contain","getImage","destination","writeAsync","resizeImage","getTrackFolder","collectFolderPath","getArtistFolder","getAlbumFolder","podcastsPath","episodeDownloadDebounce","podcastEpisodeId","downloadEpisodeFile","skipped","links","version_1","express_1","body_parser_1","router_1","router_2","helmet_1","urlencoded","extended","next","initJamRouter","initSubsonicRouter","static","frontend","listen","getURL","login_1","response_1","multer_1","api_1","cors_1","session_storage_1","express_session_1","passport_1","passport_jwt_1","passport_local_1","jsonwebtoken_1","routes_1","check_1","max_age_1","user_format_1","autoUploadTempReap","LoginLimiter","rateLimit","windowMs","CallSessionLoginHandler","authenticate","login","getMaxAge","jwt","tokenData","exp","sign","secret","allowedCookieDomains","session","CallSessionLogoutHandler","logout","ok","AdminMiddleWare","JamController","UPLOAD_PATH","dest","router","Router","cookie","SessionJSONFileStore","resave","saveUninitialized","secure","initialize","serializeUser","deserializeUser","getByID","Strategy","usernameField","passwordField","password","auth","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","jwt_payload","fromUrlQueryParameter","originalUrl","preflightContinue","credentials","allowedHeaders","origin","methods","register","execute","apiCheckName","apiCheck","single","registerPublicApi","origins","CheckAuthMiddleWare","registerUserApi","registerAdminApi","episode_controller_1","podcast_controller_1","album_controller_1","artist_controller_1","playlist_controller_1","track_controller_1","folder_controller_1","root_controller_1","user_controller_1","chat_controller_1","metadata_controller_1","stream_controller_1","genre_controller_1","nowplaying_controller_1","image_controller_1","download_controller_1","waveform_controller_1","autocomplete_controller_1","bookmark_controller_1","playqueue_controller_1","radio_controller_1","streamController","StreamController","chatController","ChatController","genreController","GenreController","nowPlayingController","NowPlayingController","imageController","ImageController","downloadController","DownloadController","waveformController","WaveformController","autocompleteController","AutocompleteController","radioController","RadioController","rootController","RootController","trackController","TrackController","episodeController","EpisodeController","podcastController","PodcastController","albumController","AlbumController","artistController","ArtistController","folderController","FolderController","userController","UserController","playlistController","PlaylistController","bookmarkController","BookmarkController","playqueueController","PlayQueueController","metadataController","MetadataController","episode_format_1","isDownloading","downloading","trackState","sortField","sortDescending","streamEpisode","podcast_format_1","formatPodcast","podcastState","podcastEpisodes","prepareByQuery","podcastIDs","refreshPodcasts","base_list_controller_1","album_format_1","formatAlbum","albumState","albumInfo","formatAlbumInfo","albumTracks","newerThan","fromYear","toYear","getAlbumSimilarTracks","getList","albumTrackIDs","artist_format_1","index_format_1","formatArtist","artistState","artistInfo","infos","artistInfoSimilar","formatArtistInfo","artistAlbums","getArtistSimilarTracks","getArtistIndex","filterArtistIndex","artistAlbumIDs","artistTracksIDs","playlist_format_1","formatPlaylist","playlistState","playlistTracks","playlistTracksIDs","playlists","metaService","trackID3","tagID3","readID3v2","saveID3v2","refreshTracks","tagID3s","streamTrack","getTrackSimilarTracks","health_1","folder_format_1","metadataService","formatFolder","folderChildren","folderTracks","folderSubfolders","folderState","folderHealth","folderTag","folderInfo","getFolderArtistInfo","folderInfoSimilar","formatArtistFolderInfo","formatAlbumFolderInfo","problems","getFolderProblems","health","folderParents","parents","trackQuery","recursive","inPaths","parentIDs","resultTracks","setFolderImage","renameFolder","getFolderSimilarTracks","getFolderIndex","filterFolderIndex","ProblemDefs","FOLDER_TAG_MISSING","check","FOLDER_TAG_VALUES_MISSING","ALBUM_IMAGE_MISSING","ALBUM_IMAGE_NAME_NONCONFORM","ALBUM_NAME_NONCONFORM","nicename","getNiceFolderName","ALBUM_GENRE_MISSING","ALBUM_ID_MISSING","ARTIST_IMAGE_NAME_NONCONFORM","ARTIST_IMAGE_MISSING","node","probs","formatFolderTag","root_format_1","formatRoot","getRootStatus","refreshRoot","rootState","isAdmin","roleAdmin","roleStream","roleUpload","rolePodcast","setUserImage","chat_format_1","formatChatMessage","brainz","musicbrainzSearch","acoustidLookup","lastFMLookup","musicbrainzLookup","reportTrack","reportEpisode","findInAll","streamDBObject","genre_format_1","getGenres","formatGenre","nowplaying_format_1","nowplayingService","getNowPlaying","packNowPlaying","getTrackWaveform","getEpisodeWaveform","autocompleteQuery","bookmark_format_1","formatBookmark","bookmarkTrack","bookmarks","getAll","playqueue_format_1","playqueueService","getQueueOrCreate","formatPlayQueue","playQueueTracks","playQueueTrackIDs","radio_format_1","formatRadio","radioState","sid","sessionData","expired","destroy","savejson","clear","readJson","expires","ping","lastfmLookup","brainzLookup","brainzSearch","autocomplete","children","subfolders","artistSimilar","artistSimilarTracks","refreshAll","similarTracks","download","waveform","delete","favUpdate","rateUpdate","imageUploadUpdate","retrieve","scanAll","tagID3Update","tagID3sUpdate","imageUrlUpdate","nameUpdate","openapi_parameters_check_1","JamApiSchema","ajv","validator","compile","maxAgeSpec","asMilliseconds","parameters_1","PodcastAdminMiddleWare","ShareMiddleWare","JukeboxMiddleWare","SubsonicApi","share","jukebox","SubsonicParameterMiddleWare","SubsonicLoginMiddleWare","registerApi","hex_1","authToken","validateCredentials","util_1","xmli","xmls","xmlo","xmlc","xml","v","processParams","objs","pack","packAlbum","packFolder","packFolderArtist","prepareObj","removeDups","userIds","prepareTracks","users","bookmarkuser","packBookmark","packPlaylistWithSongs","typesObjs","findMultiInAll","license","licenseExpires","trialExpires","a1","b1","prepareFolders","packDirectory","ifModifiedSince","musicFolderId","indexes","ignoredArticles","packFolderIndex","packArtistIndex","albumList","albumList2","prepareAlbums","packAlbumInfo","limitCount","averageRating","packArtistInfo","artistInfo2","packArtistInfo2","getTopTracks","similarSongs","packSimilarSongs","similarSongs2","packSimilarSongs2","prepareTrack","packGenre","dummy","musicFolders","musicFolder","packRoot","packUser","collectStateChangeObjects","getBool","chatMessages","chatMessage","packChatMessage","plist","preparePlaylist","playlistId","updateQuery","songIdToAdd","songId","updatePlaylist","removetracks","songIndexToRemove","songadd","artistFolderIDs","prepareFolderArtists","albumFolderIDs","starred2","artistIDs","prepareArtists","includeEpisodes","podcastList","channel","packPodcast","prepareEpisodes","newestPodcasts","objstore","deleteEpisode","bookmarklist","prepareBookmarks","randomSongs","trackids","songsByGenre","tracklist","any","searchResult","totalHits","searchResult2","songOffset","folderlist","artistOffset","albumOffset","searchResult3","albumlist","artistlist","scanStatus","getScanStatus","artistid3","albumid3","lyrics","getLyrics","packPlayQueue","internetRadioStations","internetRadioStation","disabled","packRadio","videos","videoInfo","shares","jukeboxStatus","currentIndex","gain","addChatMessage","changePassword","createBookmark","createPlaylist","createPodcastChannel","createShare","createUser","deleteBookmark","deleteInternetRadioStation","deletePlaylist","deletePodcastChannel","deletePodcastEpisode","deleteShare","deleteUser","downloadPodcastEpisode","getAlbum","getAlbumInfo2","getAlbumList","getAlbumList2","getArtist","getArtistInfo","getArtistInfo2","getArtists","getBookmarks","getChatMessages","getInternetRadioStations","createInternetRadioStation","updateInternetRadioStation","getLicense","getMusicDirectory","getMusicFolders","getNewestPodcasts","getPlaylist","getPlaylists","getPlayQueue","getPodcasts","getRandomSongs","startScan","getShares","getSimilarSongs2","getSong","getSongsByGenre","getStarred","getStarred2","getTopSongs","getUser","getUsers","getVideoInfo","getVideos","jukeboxControl","savePlayQueue","scrobble","search2","search3","setRating","star","unstar","updateShare","updateUser","getAvatar","getCaptions","getCoverArt","hls","SubsonicApiSchema","app_config_1","extendConfig","AppConfig","user_store_1","track_store_1","folder_store_1","episode_store_1","album_store_1","artist_store_1","radio_store_1","playqueue_store_1","root_store_1","bookmark_store_1","podcast_store_1","playlist_store_1","state_store_1","TrackStore","FolderStore","UserStore","StateStore","PlaylistStore","PodcastStore","EpisodeStore","BookmarkStore","ArtistStore","AlbumStore","PlayQueueStore","RadioStore","RootStore","stores","folderIDs","base_store_1","base_store_2","bool","maxRating","elasticsearch_1","es_sequence_1","mapping_1","wait_1","DBIndexElastic","_index","indexName","_type","_map","mapping","hit","_source","properties","match_all","must","prop","getPropertyMapping","match_phrase_prefix","prefix","exists","onHits","getMoreUntilDone","hits","total","_scroll_id","scroll","scrollId","getNewId","filterProperties","indexRefresh","deleteByQuery","translateElasticQuery","deleted","_id","hit2Obj","mget","docs","doc","onItem","stored_fields","aggs","_count","cardinality","aggregations","fieldname","distinct","buckets","Client","sequence","ESSequence","indexPrefix","getTypes","resetIndex","requestTimeout","indices","_default_","date_detection","mappings","createIndex","waitAfter","checkIndex","wait","esTypeMapping","enabled","_all","isObject","isFunction","isInjectedClientValid","putMapping","bulk","initPromise","initError","cacheFillPromise","cacheSize","esIndex","esType","isFinite","isInjectedCacheSizeValid","initEsIndexIfNeeded","addMappingToEsIndexIfMissing","settings","number_of_shards","auto_expand_replicas","sequenceName","bulkParams","k","_version","returnValue","interal_get","fillCache","type_bool","type_int","type_string","fields","keyword","type_key","type_Root","type_User","type_MusicBrainz_Rating","votesCount","type_MusicBrainz_Alias","sortName","locale","typeId","primary","beginDate","endDate","ended","type_MusicBrainz_ArtistCredit","joinphrase","disambiguation","aliases","type_MetaInfoImage","type_MetaInfo","formatId","discCount","trackOffset","number","video","artistCredit","isrcs","discs","sectors","offsetCount","offsets","score","statusId","country","packaging","packagingId","annotation","quality","barcode","asin","textRepresentation","language","script","releaseGroup","firstReleaseDate","primaryType","primaryTypeId","secondaryTypes","secondaryTypeIds","labelInfo","catalogNumber","labelCode","releaseEvents","iso31661Codes","coverArtArchive","front","back","darkened","artwork","type_Folder","type_PlayQueue","type_TrackTag","type_TrackMedia","type_Track","type_Album","type_Artist","type_Radio","type_State","type_Playlist","type_Podcast","type_Episode","type_Bookmark","ms","nedb_1","globaltempid","regExpEscape","literal_string","DBIndexNedb","$regex","$in","$where","$gte","$lte","$exists","$and","insert","numReplaced","hits2Objs","dbquery","translateSortQuery","skip","getFieldValueR","getDotFieldValues","db_path","clients","loadDatabase"],"mappings":"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MAAO,GACPC,UAAW,CAAC,UAAW,WAAY,iBAAkB,UAAW,OAAQ,UAAW,cACnFnI,QAAS,CAAC,UAAW,cAAe,SAAU,aAAc,iBAAkB,UAAW,QAAS,QAAS,iBAAkB,UAAW,OAAQ,cAChJoI,gBAAiB,CAAC,UAAW,WAAY,QAAS,iBAAkB,UAAW,OAAQ,UAAW,cAClGC,OAAQ,GACRC,KAAM,GACN5wB,IAAK,kCC7BN,IAAI6wB,mDAEJ,MAAMC,EAAiB,CACtB,QACA,eACA,UACA,QACA,QACA,OACA,SACA,UACA,OACA,QACA,UACA,SACA,QACA,MACA,MACA,MACA,SACA,OACA,SACA,aACA,cACA,MACA,cACA,SACA,aACA,cACA,UACA,WACA,QACA,YACA,SACA,SACA,YACA,eACA,OACA,QACA,OACA,aACA,SACA,QACA,mBACA,OACA,OACA,OACA,QACA,aACA,mBACA,oBACA,SACA,SACA,WACA,oBACA,aACA,WACA,YACA,QACA,gBACA,SACA,OACA,cACA,SACA,gBACA,WACA,SACA,kBACA,UACA,WACA,cACA,OACA,YACA,UACA,QACA,SACA,YACA,YACA,QACA,QACA,UACA,cACA,YACA,OACA,YACA,gBACA,QACA,cACA,QACA,QACA,UACA,SACA,YACA,aACA,cACA,mBACA,mBACA,iBACA,YACA,WACA,SACA,iBACA,WACA,SACA,SACA,UACA,QACA,gBACA,SACA,WACA,aACA,SACA,cACA,SACA,WACA,OACA,QACA,QACA,WACA,SACA,eACA,gBACA,YACA,OACA,YACA,YACA,aACA,aACA,aACA,MACA,cACA,aACA,WACA,SACA,QACA,UACA,YACA,aACA,OACA,wBACA,cACA,cACA,YACA,yBACA,iBACA,WACA,QACA,eACA,QACA,OACA,WACA,WACA,WACA,UACA,UACA,WACA,YACA,WACA,YACA,MACA,MACA,WACA,UACA,eACA,MACA,eACA,SACA,SACA,MACA,WACA,gBACA,WACA,YACA,YACA,SACA,YACA,eACA,YACA,YACA,YACA,YACA,WACA,aACA,YACA,cACA,eACA,YACA,gBACA,sBACA,UACA,aACA,SACA,UACA,cACA,YAi3BD,SAASC,EAAQzxB,GAChB,OAAOA,EAAM7M,QAAQ,YAAa,IAAI6E,cAh3B1BrJ,EAAA+iC,OAAwB,CACpC,SACA,gBACA,SACA,aACA,WACA,OACA,cACA,aACA,YACA,YACA,YACA,cACA,cACA,mBACA,WACA,qBACA,UACA,gBACA,sBACA,kBACA,sBACA,kBACA,WACA,YACA,cACA,sBACA,oBACA,sBACA,oBACA,mBACA,UACA,cACA,gBACA,wBACA,YACA,eACA,QACA,YACA,QACA,WACA,WACA,WACA,QACA,sBACA,oBACA,kBACA,gBACA,YACA,2BACA,qBACA,YACA,cACA,mBACA,oBACA,aACA,MACA,UACA,mBACA,QACA,eACA,oBACA,gBACA,kBACA,SACA,iBACA,QACA,UACA,cACA,OACA,WACA,OACA,OACA,aACA,kBACA,QACA,QACA,gBACA,UACA,WACA,WACA,WACA,UACA,SACA,cACA,iBACA,YACA,QACA,gBACA,aACA,gBACA,SACA,cACA,SACA,gBACA,aACA,aACA,eACA,eACA,gBACA,SACA,YACA,iBACA,YACA,qBACA,YACA,YACA,QACA,kBACA,iBACA,gBACA,qBACA,uBACA,kBACA,UACA,cACA,UACA,kBACA,gBACA,cACA,QACA,UACA,gBACA,QACA,qBACA,UACA,iBACA,UACA,mBACA,UACA,YACA,YACA,SACA,eACA,eACA,cACA,cACA,SACA,eACA,gBACA,UACA,WACA,gBACA,kBACA,gBACA,cACA,SACA,YACA,WACA,YACA,YACA,aACA,eACA,WACA,oBACA,QACA,SACA,0BACA,wBACA,oBACA,kBACA,gBACA,iBACA,gBACA,iBACA,UACA,eACA,kBACA,uBACA,eACA,YACA,sBACA,gBACA,OACA,aACA,WACA,SACA,SACA,aACA,kBACA,oBACA,yBACA,oBACA,mBACA,mBACA,YACA,UACA,gBACA,cACA,cACA,eACA,cACA,eACA,gBACA,UACA,UACA,YACA,iBACA,mBACA,QACA,YACA,aACA,aACA,OACA,SACA,aACA,aACA,SACA,QACA,aACA,YACA,aACA,aACA,YACA,kBACA,UACA,iBACA,eACA,eACA,eACA,YACA,WACA,kBACA,WACA,WACA,iBACA,mBACA,cACA,aACA,YACA,YACA,YACA,aACA,cACA,cACA,gBACA,kBACA,iBACA,mBACA,QACA,aACA,aACA,YACA,QACA,aACA,WACA,YACA,QACA,YACA,eACA,QACA,eACA,cACA,cACA,cACA,YACA,WACA,MACA,aACA,UACA,WACA,aACA,OACA,gBACA,cACA,qBACA,iBACA,MACA,WACA,iBACA,UACA,gBACA,gBACA,gBACA,qBACA,kBACA,wBACA,eACA,aACA,wBACA,kBACA,cACA,gBACA,aACA,cACA,iBACA,MACA,gBACA,SACA,qBACA,aACA,aACA,aACA,cACA,WACA,YACA,qBACA,UACA,eACA,uBACA,qBACA,oBACA,OACA,kBACA,cACA,eACA,SACA,aACA,QACA,WACA,iBACA,OACA,aACA,WACA,YACA,YACA,YACA,WACA,cACA,QACA,iBACA,aACA,YACA,YACA,qBACA,YACA,aACA,YACA,kBACA,gBACA,eACA,aACA,QACA,aACA,UACA,OACA,eACA,aACA,WACA,cACA,cACA,kBACA,SACA,gBACA,eACA,YACA,SACA,QACA,OACA,iBACA,UACA,cACA,SACA,eACA,cACA,cACA,QACA,eACA,aACA,aACA,YACA,SACA,aACA,SACA,QACA,MACA,aACA,qBACA,YACA,SACA,eACA,SACA,eACA,cACA,QACA,YACA,UACA,eACA,SACA,UACA,UACA,aACA,aACA,iBACA,WACA,aACA,WACA,YACA,cACA,UACA,WACA,eACA,mBACA,gBACA,WACA,YACA,cACA,kBACA,SACA,WACA,qBACA,UACA,eACA,YACA,UACA,UACA,UACA,QACA,cACA,aACA,cACA,aACA,QACA,cACA,kBACA,SACA,SACA,QACA,MACA,gBACA,WACA,WACA,aACA,QACA,aACA,YACA,aACA,eACA,aACA,kBACA,qBACA,mBACA,mBACA,kBACA,gBACA,eACA,uBACA,uBACA,mBACA,oBACA,cACA,eACA,eACA,cACA,cACA,cACA,QACA,WACA,aACA,YACA,OACA,aACA,cACA,aACA,WACA,YACA,YACA,YACA,UACA,cACA,MACA,OACA,OACA,aACA,UACA,YACA,SACA,QACA,eACA,oBACA,mBACA,SACA,YACA,UACA,UACA,YACA,SACA,SACA,gBACA,QACA,QACA,UACA,aACA,QACA,oBACA,eACA,kBACA,cACA,aACA,cACA,YACA,aACA,cACA,SACA,YACA,iBACA,iBACA,cACA,cACA,OACA,QACA,QACA,kBACA,sBACA,SACA,eACA,cACA,UACA,YACA,YACA,YACA,kBACA,SACA,cACA,kBACA,SACA,UACA,SACA,QACA,WACA,eACA,WACA,WACA,aACA,YACA,WACA,SACA,WACA,QACA,iBACA,aACA,mBACA,sBACA,oBACA,gBACA,WACA,WACA,WACA,QACA,YACA,cACA,cACA,aACA,aACA,qBACA,kBACA,iBACA,eACA,aACA,cACA,aACA,SACA,QACA,aACA,WACA,iBACA,4BACA,mBACA,UACA,mBACA,aACA,kBACA,gBACA,kBACA,MACA,WACA,WACA,WACA,eACA,kBACA,YACA,eACA,qBACA,UACA,yBACA,WACA,sBACA,YACA,WACA,UACA,WACA,iBACA,qBACA,WACA,WACA,eACA,kBACA,qBACA,WACA,gBACA,eACA,YACA,UACA,QACA,aACA,aACA,SACA,UACA,gBACA,kBACA,UACA,WACA,kBACA,YACA,WACA,UACA,UACA,SACA,gBACA,qBACA,SACA,QACA,eACA,kBACA,0BACA,QACA,iBACA,iBACA,SACA,cACA,SACA,sBACA,YACA,iBACA,YACA,UACA,oBACA,QACA,aACA,MACA,WACA,UACA,WACA,WACA,YACA,WACA,WACA,cACA,QACA,WACA,aACA,cACA,gBACA,aACA,YACA,oBACA,YACA,eACA,oBACA,cACA,cACA,YACA,gBACA,SACA,SACA,wBACA,sBACA,mBACA,oBACA,oBACA,kBACA,mBACA,qBACA,eACA,WACA,cACA,mBACA,kBACA,mBACA,qBACA,cACA,aACA,YACA,OACA,aACA,YACA,YACA,QACA,aACA,MACA,YACA,QACA,eACA,YACA,SACA,UACA,MACA,WACA,MACA,YACA,YACA,YACA,WACA,UACA,YACA,QACA,OACA,wBACA,WACA,WACA,SACA,iBACA,iBACA,gBACA,aACA,YACA,mBACA,QACA,UACA,iBACA,gBACA,aACA,OACA,cACA,kBACA,qBACA,aACA,aACA,QACA,cACA,UACA,SACA,QACA,kBACA,QACA,aACA,UACA,SACA,OACA,WACA,UACA,OACA,SACA,QACA,YACA,mBACA,cACA,WACA,YACA,oBACA,MACA,WACA,WACA,aACA,UACA,SACA,WACA,YACA,WACA,eACA,cACA,aACA,OACA,YACA,MACA,aACA,SACA,QACA,cACA,eACA,UACA,OACA,aACA,YACA,aACA,aACA,mBACA,gBACA,gBACA,QACA,gBACA,cACA,cACA,aACA,SACA,eACA,cACA,YACA,iBACA,mBACA,cACA,sBACA,cACA,cACA,YACA,aACA,eACA,cACA,WACA,YACA,cACA,QACA,wBACA,kBACA,iBACA,WACA,WACA,WACA,YACA,SACA,QACA,aACA,cACA,YACA,wBACA,SACA,oBACA,WACA,cACA,aACA,WACA,SACA,SACA,cACA,gBACA,WACA,eACA,eACA,aACA,QACA,SACA,YACA,4BACA,wBACA,UACA,SACA,eACA,OACA,WACA,SACA,eACA,WACA,WACA,SACA,YACA,WACA,iBACA,aACA,WACA,wBACA,cACA,cACA,sBACA,YACA,WACA,YACA,cACA,gBACA,sBACA,mBACA,iBACA,QACA,YACA,YACA,mBACA,eACA,SACA,aACA,QACA,aACA,eACA,YACA,YACA,mBACA,qBACA,kBACA,gBACA,cACA,QACA,YACA,eACA,cACA,YACA,UACA,OACA,eACA,UAOD/iC,EAAAgjC,cAAA,SAA8B3xB,GAC7B,MAAM4xB,EAAOH,EAAQzxB,GAOrB,OAN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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 38);\n","export enum DBObjectType {\n\troot,\n\tuser,\n\tfolder,\n\ttrack,\n\tstate,\n\tplaylist,\n\tpodcast,\n\tepisode,\n\tbookmark,\n\talbum,\n\tartist,\n\tplayqueue,\n\tradio\n}\n\nexport const AudioMimeTypes: { [ext: string]: string } = {\n\t'mp3': 'audio/mpeg',\n\t'm4a': 'audio/mp4',\n\t'ogg': 'audio/ogg',\n\t'oga': 'audio/ogg',\n\t'webma': 'audio/webm',\n\t'webm': 'audio/webm',\n\t'wav': 'audio/wav'\n};\n\nexport const VideoMimeTypes: { [ext: string]: string } = {\n\t'mp4': 'audio/mp4',\n\t'm4v': 'audio/mp4',\n\t'ogv': 'audio/ogg',\n\t'webmv': 'audio/webm',\n\t'webm': 'audio/webm'\n};\n\nexport enum FolderType {\n\tunknown = 'unknown',\n\tartist = 'artist',\n\tmultiartist = 'multiartist',\n\talbum = 'album',\n\tmultialbum = 'multialbum',\n\textras = 'extras',\n}\n\n\nexport enum PodcastStatus {\n\t'new' = 'new',\n\tdownloading = 'downloading',\n\tcompleted = 'completed',\n\terror = 'error',\n\tdeleted = 'deleted',\n\tskipped = 'skipped'\n}\n\n\nexport const FolderTypeImageName: { [foldertype: string]: string } = {\n\tunknown: 'folder',\n\tartist: 'artist',\n\tmultiartist: 'folder',\n\talbum: 'cover',\n\tmultialbum: 'cover',\n\textras: 'folder'\n};\n\nexport const FolderTypesAlbum = [FolderType.album, FolderType.multialbum];\n\nexport enum DatabaseQuerySortType {\n\tascending, descending\n}\n\nexport enum AlbumType {\n\tunknown = 'unknown',\n\talbum = 'album',\n\tmix = 'mix',\n\taudiobook = 'audiobook'\n}\n\nexport enum FileTyp {\n\tUNKNOWN = 'unknown',\n\tAUDIO = 'audio',\n\tIMAGE = 'image',\n\tTAG = 'tag',\n\tBACKUP = 'backup',\n\tOTHER = 'other'\n}\n","module.exports = require(\"path\");","import {DatabaseQuerySortType, DBObjectType} from '../../types';\nimport {DBObject} from './base.model';\nimport {Database, DatabaseIndex, DatabaseQuery, DatabaseQuerySort} from '../../db/db.model';\n\nexport interface SearchQuery {\n\tid?: string;\n\tids?: Array<string>;\n\tquery?: string;\n\toffset?: number;\n\tamount?: number;\n\tsorts?: Array<SearchQuerySort>;\n}\n\nexport interface SearchQuerySort {\n\tfield: string;\n\tdescending: boolean;\n}\n\nexport abstract class BaseStore<T extends DBObject, X extends SearchQuery> {\n\tprotected group: DatabaseIndex<T>;\n\ttype: DBObjectType;\n\n\tprotected constructor(type: DBObjectType, db: Database) {\n\t\tthis.group = db.getDBIndex<T>(type);\n\t\tthis.type = type;\n\t}\n\n\tprotected abstract transformQuery(query: X): DatabaseQuery;\n\n\tasync add(item: T): Promise<string> {\n\t\treturn await this.group.add(item);\n\t}\n\n\tasync replace(item: T): Promise<void> {\n\t\treturn await this.group.replace(item.id, item);\n\t}\n\n\tasync remove(idOrIds: string | Array<string>): Promise<void> {\n\t\treturn await this.group.remove(idOrIds);\n\t}\n\n\tasync replaceMany(items: Array<T>): Promise<void> {\n\t\tfor (const item of items) {\n\t\t\tawait this.group.replace(item.id, item);\n\t\t}\n\t}\n\n\tasync byId(id: string): Promise<T | undefined> {\n\t\treturn await this.group.byId(id);\n\t}\n\n\tasync byIds(ids: Array<string>): Promise<Array<T>> {\n\t\treturn await this.group.byIds(ids);\n\t}\n\n\tasync random(): Promise<T | undefined> {\n\t\treturn await this.group.queryOne({all: true});\n\t}\n\n\tasync all(): Promise<Array<T>> {\n\t\treturn await this.group.query({all: true});\n\t}\n\n\tasync allIds(): Promise<Array<string>> {\n\t\treturn await this.group.queryIds({all: true});\n\t}\n\n\tasync count(): Promise<number> {\n\t\treturn await this.group.count({all: true});\n\t}\n\n\tasync iterate(onItems: (items: Array<T>) => Promise<void>): Promise<void> {\n\t\tawait this.group.iterate({all: true}, onItems);\n\t}\n\n\tasync upsert(items: Array<T>): Promise<void> {\n\t\tfor (const item of items) {\n\t\t\tawait this.group.upsert(item.id, item);\n\t\t}\n\t}\n\n\tasync removeByQuery(query: X): Promise<number> {\n\t\treturn await this.group.removeByQuery(this.transformQuery(query));\n\t}\n\n\tasync searchIDs(query: X): Promise<Array<string>> {\n\t\treturn await this.group.queryIds(this.transformQuery(query));\n\t}\n\n\tasync search(query: X): Promise<Array<T>> {\n\t\treturn await this.group.query(this.transformQuery(query));\n\t}\n\n\tasync searchOne(query: X): Promise<T | undefined> {\n\t\treturn await this.group.queryOne(this.transformQuery(query));\n\t}\n\n\tasync searchCount(query: X): Promise<number> {\n\t\treturn await this.group.count(this.transformQuery(query));\n\t}\n\n}\n\nexport class QueryHelper {\n\tprivate q: DatabaseQuery = {};\n\n\tterm(field: string, value: string | number | boolean | undefined) {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.term = this.q.term || {};\n\t\t\tthis.q.term[field] = value;\n\t\t}\n\t}\n\n\tmatch(field: string, value: string | undefined) {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.match = this.q.match || {};\n\t\t\tthis.q.match[field] = value;\n\t\t}\n\t}\n\n\tstartsWith(field: string, value: string | undefined) {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.startsWith = this.q.startsWith || {};\n\t\t\tthis.q.startsWith[field] = value;\n\t\t}\n\t}\n\n\tstartsWiths(field: string, value: Array<string> | undefined) {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.startsWiths = this.q.startsWiths || {};\n\t\t\tthis.q.startsWiths[field] = value;\n\t\t}\n\t}\n\n\tterms(field: string, value: Array<string | number | boolean> | undefined) {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.terms = this.q.terms || {};\n\t\t\tthis.q.terms[field] = value;\n\t\t}\n\t}\n\n\tbool(field: string, value: boolean | undefined) {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.term = this.q.term || {};\n\t\t\tthis.q.term[field] = value;\n\t\t}\n\t}\n\n\tnotNull(field: string, value: boolean | undefined) {\n\t\tif (value !== undefined && value !== null) {\n\t\t\tthis.q.notNull = this.q.notNull || [];\n\t\t\tthis.q.notNull.push(field);\n\t\t}\n\t}\n\n\trange(field: string, lte: number | undefined, gte: number | undefined) {\n\t\tif (lte !== undefined || gte !== undefined) {\n\t\t\tthis.q.range = this.q.range || {};\n\t\t\tthis.q.range[field] = {gte, lte};\n\t\t}\n\t}\n\n\tget(query: SearchQuery, fieldMap?: { [name: string]: string }): DatabaseQuery {\n\t\tthis.terms('id', query.ids);\n\t\tthis.term('id', query.id);\n\t\tif (Object.keys(this.q).length === 0) {\n\t\t\tthis.q.all = true;\n\t\t}\n\t\tif (query.sorts) {\n\t\t\tconst sorts: DatabaseQuerySort = {};\n\t\t\tquery.sorts.forEach(sort => {\n\t\t\t\tconst field = fieldMap ? fieldMap[sort.field] : sort.field;\n\t\t\t\tif (field) {\n\t\t\t\t\tsorts[field] = sort.descending ? DatabaseQuerySortType.descending : DatabaseQuerySortType.ascending;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.q.sort = sorts;\n\t\t}\n\t\tif (query.amount !== undefined && query.amount > 0) {\n\t\t\tthis.q.amount = query.amount;\n\t\t}\n\t\tif (query.offset !== undefined && query.offset > 0) {\n\t\t\tthis.q.offset = query.offset;\n\t\t}\n\t\treturn this.q;\n\t}\n}\n","import winston from 'winston';\n\nrequire('winston-timer')(winston);\n\nexport function configureLogger(level: string) {\n\twinston.configure({\n\t\tlevel,\n\t\ttransports: [\n\t\t\tnew winston.transports.Console({\n\t\t\t\tformat:\n\t\t\t\t\twinston.format.combine(\n\t\t\t\t\t\t// winston.format.timestamp(),\n\t\t\t\t\t\twinston.format.colorize(),\n\t\t\t\t\t\twinston.format.simple()\n\t\t\t\t\t\t// winston.format.json()\n\t\t\t\t\t)\n\t\t\t})\n\t\t]\n\t});\n}\n\nclass Logger {\n\tprivate name: string;\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tprivate applyLog(level: string, format: string, ...params: any[]) {\n\t\tconst line: string = (new Date()).toISOString() + ' ' + this.name + ': ' + [format].concat(params).join(' ');\n\t\twinston.log(level, line);\n\t}\n\n\tdebug(format: string, ...params: any[]) {\n\t\tthis.applyLog('debug', format, params);\n\t}\n\n\tinfo(format: string, ...params: any[]) {\n\t\tthis.applyLog('info', format, params);\n\t}\n\n\twarn(format: string, ...params: any[]) {\n\t\tthis.applyLog('warn', format, params);\n\t}\n\n\terror(format: string | Error, ...params: any[]) {\n\t\tthis.applyLog('error', format.toString(), params);\n\t}\n\n\ttime(name: string) {\n\t\t(<any>winston).start_log(name, 'debug');\n\t}\n\n\ttimeEnd(name: string) {\n\t\t(<any>winston).stop_log(name, 'debug');\n\t}\n}\n\nfunction logger(name: string) {\n\treturn new Logger(name);\n}\n\nexport default logger;\n","import path from 'path';\nimport fse from 'fs-extra';\n\nexport async function fileDeleteIfExists(pathName: string): Promise<void> {\n\tconst exists = await fse.pathExists(pathName);\n\tif (exists) {\n\t\tawait fse.unlink(pathName);\n\t}\n}\n\nexport async function pathDeleteIfExists(pathName: string): Promise<void> {\n\tconst exists = await fse.pathExists(pathName);\n\tif (exists) {\n\t\tawait fse.remove(pathName);\n\t}\n}\n\nexport function fileSuffix(filename: string): string {\n\treturn path.extname(filename).slice(1).toLowerCase();\n}\n\nexport function replaceFileSystemChars(s: string, replace: string): string {\n\treturn s.toString()\n\t\t.replace(/:/g, ' - ').replace(/  /g, ' ')\n\t\t.replace(/[\\?\\/!\\\\]/g, replace);\n}\n\nexport function cleanFolderSystemChars(s: string, replace: string): string {\n\treturn s.toString()\n\t\t.replace(/:/g, ' - ').replace(/  /g, ' ')\n\t\t.replace(/[\\.\\*\\?\\/!\\\\]/g, replace);\n}\n\nexport function ensureTrailingPathSeparator(s: string): string {\n\tif (s.length > 0 && s[s.length - 1] !== path.sep) {\n\t\treturn s + path.sep;\n\t}\n\treturn s;\n}\n","class ApiError extends Error {\n\tfailCode: number;\n\n\tconstructor(message: string, failCode: number) {\n\n\t\t// Calling parent constructor of base Error class.\n\t\tsuper(message);\n\n\t\t// Saving class name in the property of our custom error as a shortcut.\n\t\tthis.name = this.constructor.name;\n\n\t\t// Capturing stack trace, excluding constructor call from it.\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\t// You can use any additional properties you want.\n\t\t// I'm going to use preferred HTTP status for this error types.\n\t\t// `500` is the default value if not specified.\n\t\tthis.failCode = failCode || 500;\n\t}\n}\n\nexport function InvalidParamError(msg?: string): ApiError {\n\treturn new ApiError(msg || 'Invalid/Missing parameter', 400);\n}\n\nexport function NotFoundError(msg?: string): ApiError {\n\treturn new ApiError(msg || 'Item not found', 404);\n}\n\nexport function UnauthError(msg?: string): ApiError {\n\treturn new ApiError(msg || 'Unauthorized', 401);\n}\n\nexport function GenericError(msg?: string): ApiError {\n\treturn new ApiError(msg || 'Guru Meditation', 500);\n}\n","module.exports = require(\"fs-extra\");","import {BaseStore, SearchQuery} from './base.store';\nimport {DBObject} from './base.model';\n\nexport class BaseStoreService<DBOBJECT extends DBObject, QUERY extends SearchQuery> {\n\tconstructor(\n\t\tpublic store: BaseStore<DBOBJECT, QUERY>\n\t) {\n\n\t}\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {State, States} from './state.model';\n\nexport function formatState(state?: State): Jam.State {\n\treturn {\n\t\tplayed: state && state.played > 0 ? state.played : undefined,\n\t\tlastplayed: state && state.lastplayed > 0 ? state.lastplayed : undefined,\n\t\tfaved: state ? state.faved : undefined,\n\t\trated: state && state.rated !== undefined && state.rated > 0 ? state.rated : undefined\n\t};\n}\n\nexport function formatStates(states: States): Jam.States {\n\tconst result: Jam.States = {};\n\tObject.keys(states).forEach(key => {\n\t\tresult[key] = formatState(states[key]);\n\t});\n\treturn result;\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {SearchQuery} from './base.store';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {Jam} from '../../model/jam-rest-data';\nimport {IApiBinaryResult} from '../../typings';\nimport {JamRequest} from '../../api/jam/api';\nimport {formatState, formatStates} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {DBObject} from './base.model';\nimport {User} from '../user/user.model';\nimport {BaseStoreService} from './base.service';\n\nexport abstract class BaseController<OBJREQUEST extends JamParameters.ID | INCLUDE, OBJLISTREQUEST extends JamParameters.IDs | INCLUDE, INCLUDE, JAMQUERY extends SearchQuery, S extends JamParameters.SearchQuery | INCLUDE, DBOBJECT extends DBObject, RESULTOBJ extends { id: string }> {\n\n\tprotected constructor(\n\t\tprotected service: BaseStoreService<DBOBJECT, JAMQUERY>,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t}\n\n\tabstract async prepare(item: DBOBJECT, includes: INCLUDE, user: User): Promise<RESULTOBJ>;\n\n\tabstract translateQuery(query: S, user: User): JAMQUERY;\n\n\tabstract defaultSort(items: Array<DBOBJECT>): Array<DBOBJECT>;\n\n\tasync byID(id?: string): Promise<DBOBJECT> {\n\t\tif (!id) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.service.store.byId(id);\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn obj;\n\t}\n\n\tasync byIDs(ids: Array<string>): Promise<Array<DBOBJECT>> {\n\t\tif (!ids) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\treturn await this.service.store.byIds(ids);\n\t}\n\n\tasync prepareList(items: Array<DBOBJECT>, includes: INCLUDE, user: User): Promise<Array<RESULTOBJ>> {\n\t\tconst result: Array<RESULTOBJ> = [];\n\t\tfor (const item of items) {\n\t\t\tconst r = await this.prepare(item, includes, user);\n\t\t\tresult.push(r);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync prepareListByIDs(ids: Array<string>, includes: INCLUDE, user: User): Promise<Array<RESULTOBJ>> {\n\t\tconst list = await this.service.store.byIds(ids);\n\t\tconst result = await this.prepareList(list, includes, user);\n\t\treturn result.sort((a, b) => {\n\t\t\treturn ids.indexOf(a.id) - ids.indexOf(b.id);\n\t\t});\n\t}\n\n\tasync prepareByID(id: string, includes: INCLUDE, user: User): Promise<RESULTOBJ> {\n\t\tconst o = await this.byID(id);\n\t\treturn await this.prepare(o, includes, user);\n\t}\n\n\tasync prepareByQuery(query: JAMQUERY, includes: INCLUDE, user: User): Promise<Array<RESULTOBJ>> {\n\t\tconst list = await this.service.store.search(query);\n\t\treturn this.prepareList(this.defaultSort(list), includes, user);\n\t}\n\n\tasync id(req: JamRequest<OBJREQUEST>): Promise<RESULTOBJ> {\n\t\treturn this.prepareByID((<JamParameters.ID>req.query).id, <INCLUDE>req.query, req.user);\n\t}\n\n\tasync ids(req: JamRequest<OBJLISTREQUEST>): Promise<Array<RESULTOBJ>> {\n\t\tconst items = await this.byIDs((<JamParameters.IDs>req.query).ids);\n\t\treturn this.prepareList(items, <INCLUDE>req.query, req.user);\n\t}\n\n\tasync state(req: JamRequest<JamParameters.ID>): Promise<Jam.State> {\n\t\tconst item = await this.byID(req.query.id);\n\t\tconst state = await this.stateService.findOrCreate(item.id, req.user.id, this.service.store.type);\n\t\treturn formatState(state);\n\t}\n\n\tasync states(req: JamRequest<JamParameters.IDs>): Promise<Jam.States> {\n\t\tconst items = await this.byIDs(req.query.ids);\n\t\tconst states = await this.stateService.findOrCreateMany(items.map(item => item.id), req.user.id, this.service.store.type);\n\t\treturn formatStates(states);\n\t}\n\n\tasync favUpdate(req: JamRequest<JamParameters.Fav>): Promise<Jam.State> {\n\t\tconst item = await this.byID(req.query.id);\n\t\tconst state = await this.stateService.fav(item.id, this.service.store.type, req.user.id, req.query.remove ? req.query.remove : false);\n\t\treturn formatState(state);\n\t}\n\n\tasync rateUpdate(req: JamRequest<JamParameters.Rate>): Promise<Jam.State> {\n\t\tconst rating = req.query.rating || 0;\n\t\tif ((rating < 0) || (rating > 5)) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst item = await this.byID(req.query.id);\n\t\tconst state = await this.stateService.rate(item.id, this.service.store.type, req.user.id, rating);\n\t\treturn formatState(state);\n\t}\n\n\tasync search(req: JamRequest<S>): Promise<Array<RESULTOBJ>> {\n\t\tconst list = await this.service.store.search(this.translateQuery(req.query, req.user));\n\t\treturn this.prepareList(list, <INCLUDE>req.query, req.user);\n\t}\n\n\tasync image(req: JamRequest<JamParameters.Image>): Promise<IApiBinaryResult> {\n\t\tconst item = await this.byID(req.query.id);\n\t\treturn await this.imageService.getObjImage(item, req.query.size, req.query.format);\n\t}\n\n\tasync download(req: JamRequest<JamParameters.Download>): Promise<IApiBinaryResult> {\n\t\tconst item = await this.byID(req.query.id);\n\t\treturn await this.downloadService.getObjDownload(item, req.query.format, req.user);\n\t}\n\n}\n","export function paginate<T>(list: Array<T>, amount: number | undefined, offset: number | undefined): Array<T> {\n\tif (amount !== undefined && amount < 0) {\n\t\treturn list;\n\t}\n\treturn list.slice((offset || 0), (offset || 0) + (amount || 20));\n}\n","import moment from 'moment';\nimport path from 'path';\nimport {fileSuffix} from '../../utils/fs-utils';\nimport {AudioMimeTypes, DBObjectType, PodcastStatus} from '../../types';\nimport {Subsonic} from '../../model/subsonic-rest-data';\nimport {Root} from '../../objects/root/root.model';\nimport {User} from '../../objects/user/user.model';\nimport {ArtistIndex, FolderIndex, FolderIndexEntry} from '../../engine/index/index.model';\nimport {State, States} from '../../objects/state/state.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {Album} from '../../objects/album/album.model';\nimport {Artist} from '../../objects/artist/artist.model';\nimport {MetaInfo} from '../../modules/audio/metadata.model';\nimport {Track} from '../../objects/track/track.model';\nimport {Episode} from '../../objects/episode/episode.model';\nimport {NowPlaying} from '../../engine/nowplaying/nowplaying.model';\nimport {Podcast} from '../../objects/podcast/podcast.model';\nimport {Playlist} from '../../objects/playlist/playlist.model';\nimport {Bookmark} from '../../objects/bookmark/bookmark.model';\nimport {PlayQueue} from '../../objects/playqueue/playqueue.model';\nimport {Radio} from '../../objects/radio/radio.model';\nimport {ChatMessage} from '../../engine/chat/chat.model';\nimport {Genre} from '../../engine/genre/genre.model';\n\n\nexport interface SubsonicExtResponse extends Subsonic.Response {\n\t[name: string]: any;\n\n\txmlns: string;\n}\n\nexport interface SubsonicAPIResponse {\n\t'subsonic-response': SubsonicExtResponse;\n}\n\nexport class FORMAT {\n\tstatic FAIL = {\n\t\tGENERIC: 0,\n\t\tPARAMETER: 10,\n\t\tCLIENT_OLD: 20,\n\t\tSERVER_OLD: 30,\n\t\tCREDENTIALS: 40,\n\t\tUNAUTH: 50,\n\t\tNOTFOUND: 70\n\t};\n\n\tstatic packFail(code: number, txt?: string): SubsonicAPIResponse {\n\t\t/*\n\t\t <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t <subsonic-response xmlns=\"http://subsonic.org/restapi\"\n\t\t status=\"failed\" version=\"1.1.0\">\n\t\t <error code=\"40\" message=\"Wrong username or password\"/>\n\t\t </subsonic-response>\n\n\t\t The following error codes are defined:\n\t\t Code \tDescription\n\t\t 0 \tA generic error.\n\t\t 10 \tRequired parameter is missing.\n\t\t 20 \tIncompatible Subsonic REST protocol version. Client must upgrade.\n\t\t 30 \tIncompatible Subsonic REST protocol version. Server must upgrade.\n\t\t 40 \tWrong username or password.\n\t\t 50 \tuser is not authorized for the given operation.\n\t\t 60 \tThe trial period for the Subsonic server is over. Please upgrade to Subsonic Premium. Visit subsonic.org for details.\n\t\t 70 \tThe requested data was not found.\n\t\t */\n\n\t\tconst codeStrings: { [num: number]: string } = {\n\t\t\t0: 'A generic error.',\n\t\t\t10: 'Required parameter is missing.',\n\t\t\t20: 'Incompatible Subsonic REST protocol version. Client must upgrade.',\n\t\t\t30: 'Incompatible Subsonic REST protocol version. Server must upgrade.',\n\t\t\t40: 'Wrong username or password.',\n\t\t\t50: 'user is not authorized for the given operation.',\n\t\t\t70: 'The requested data was not found.'\n\t\t};\n\n\t\treturn {\n\t\t\t'subsonic-response': {\n\t\t\t\t'status': 'failed',\n\t\t\t\t'xmlns': 'http://subsonic.org/restapi',\n\t\t\t\t'error': {\n\t\t\t\t\tcode: code,\n\t\t\t\t\tmessage: txt || codeStrings[code]\n\t\t\t\t},\n\t\t\t\t'version': '1.16.0'\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic packResponse<T>(o: Subsonic.Response): SubsonicAPIResponse {\n\t\tconst response: SubsonicExtResponse = {\n\t\t\tstatus: 'ok',\n\t\t\txmlns: 'http://subsonic.org/restapi',\n\t\t\tversion: '1.16.0'\n\t\t};\n\t\treturn {\n\t\t\t'subsonic-response': Object.assign(response, o)\n\t\t};\n\t}\n\n\tstatic packOK(): SubsonicAPIResponse {\n\t\treturn {\n\t\t\t'subsonic-response': {\n\t\t\t\tstatus: 'ok',\n\t\t\t\txmlns: 'http://subsonic.org/restapi',\n\t\t\t\tversion: '1.16.0'\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic formatSubSonicDate(date: number): string {\n\t\treturn moment(date).utc().format(); // .format('YYYY-MM-DDThh:mm:ss.000Z');\n\t}\n\n\tstatic packRoot(root: Root): Subsonic.MusicFolder {\n\t\treturn {id: parseInt(root.id, 10), name: root.name};\n\t}\n\n\tstatic packUser(user: User): Subsonic.User {\n\t\treturn {\n\t\t\tusername: user.name,\n\t\t\temail: user.email,\n\t\t\tmaxBitRate: user.maxBitRate,\n\t\t\tavatarLastChanged: user.avatarLastChanged !== undefined ? this.formatSubSonicDate(user.avatarLastChanged) : undefined,\n\t\t\tfolder: user.allowedfolder ? user.allowedfolder.map(s => parseInt(s, 10)) : undefined,\n\t\t\tscrobblingEnabled: user.scrobblingEnabled,\n\t\t\tadminRole: user.roles.adminRole,\n\t\t\tsettingsRole: user.roles.adminRole, // user.roles.settingsRole,\n\t\t\tdownloadRole: user.roles.adminRole, // user.roles.downloadRole,\n\t\t\tuploadRole: user.roles.uploadRole,\n\t\t\tplaylistRole: user.roles.adminRole, // user.roles.playlistRole,\n\t\t\tcoverArtRole: user.roles.adminRole, // user.roles.coverArtRole,\n\t\t\tcommentRole: user.roles.adminRole, // user.roles.commentRole,\n\t\t\tpodcastRole: user.roles.podcastRole,\n\t\t\tstreamRole: user.roles.streamRole,\n\t\t\tjukeboxRole: user.roles.adminRole, // user.roles.jukeboxRole,\n\t\t\tshareRole: user.roles.adminRole, // user.roles.shareRole,\n\t\t\tvideoConversionRole: user.roles.adminRole, // user.roles.videoConversionRole\n\t\t};\n\t}\n\n\tstatic packFolderIndexArtist(entry: FolderIndexEntry, state: State): Subsonic.Artist {\n\t\t/*\n<xs:complexType name=\"Artist\">\n\t<xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n\t<xs:attribute name=\"name\" type=\"xs:string\" use=\"required\"/>\n\t<xs:attribute name=\"starred\" type=\"xs:dateTime\" use=\"optional\"/> <!-- Added in 1.10.1 -->\n\t<xs:attribute name=\"userRating\" type=\"sub:UserRating\" use=\"optional\"/>  <!-- Added in 1.13.0 -->\n\t<xs:attribute name=\"averageRating\" type=\"sub:AverageRating\" use=\"optional\"/>  <!-- Added in 1.13.0 -->\n</xs:complexType>\n\t */\n\t\treturn {\n\t\t\tid: entry.folder.id,\n\t\t\tname: entry.name,\n\t\t\tstarred: state && state.faved ? this.formatSubSonicDate(state.faved) : undefined,\n\t\t\tuserRating: state ? state.rated : undefined\n\t\t\t// TODO: averageRating\n\t\t};\n\t}\n\n\tstatic packFolderIndex(index: FolderIndex, states: States): Array<Subsonic.Index> {\n\t\tif (!index) {\n\t\t\treturn [];\n\t\t}\n\t\treturn index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tartist: i.entries.map(e => {\n\t\t\t\treturn FORMAT.packFolderIndexArtist(e, states[e.folder.id]);\n\t\t\t})\n\t\t}));\n\t}\n\n\tstatic packArtistIndex(index: ArtistIndex, states: States): Array<Subsonic.IndexID3> {\n\t\tif (!index) {\n\t\t\treturn [];\n\t\t}\n\t\treturn index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tartist: i.entries.map(e => FORMAT.packArtist(e.artist, states[e.artist.id]))\n\t\t}));\n\t}\n\n\tstatic packDirectory(folder: Folder, state: State): Subsonic.Directory {\n\t\t/*\n\t\t <xs:complexType name=\"Directory\">\n\t\t <xs:sequence>\n\t\t <xs:element name=\"child\" type=\"sub:Child\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\t\t </xs:sequence>\n\t\t <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"parent\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"starred\" type=\"xs:dateTime\" use=\"optional\"/> <!-- Added in 1.10.1 -->\n\t\t </xs:complexType>\n\t\t */\n\t\treturn {\n\t\t\tid: folder.id,\n\t\t\tparent: folder.parentID,\n\t\t\tname: path.basename(folder.path),\n\t\t\tstarred: state && state.faved ? this.formatSubSonicDate(state.faved) : undefined\n\t\t};\n\t}\n\n\tstatic packFolderArtist(folder: Folder, state: State): Subsonic.Artist {\n\t\t/*\n    <xs:complexType name=\"Artist\">\n        <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n        <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\"/>\n        <xs:attribute name=\"starred\" type=\"xs:dateTime\" use=\"optional\"/> <!-- Added in 1.10.1 -->\n        <xs:attribute name=\"userRating\" type=\"sub:UserRating\" use=\"optional\"/>  <!-- Added in 1.13.0 -->\n        <xs:attribute name=\"averageRating\" type=\"sub:AverageRating\" use=\"optional\"/>  <!-- Added in 1.13.0 -->\n    </xs:complexType>\n\t\t */\n\t\treturn {\n\t\t\tid: folder.id,\n\t\t\tname: folder.tag.title || folder.tag.artist || '',\n\t\t\tstarred: state && state.faved ? this.formatSubSonicDate(state.faved) : undefined,\n\t\t\tuserRating: state ? state.rated : undefined\n\t\t};\n\t}\n\n\tstatic packAlbum(album: Album, state: State): Subsonic.AlbumID3 {\n\t\t/*\n\t\t <xs:complexType name=\"AlbumID3\">\n\t\t <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"artist\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"artistId\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"coverArt\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"songCount\" type=\"xs:int\" use=\"required\"/>\n\t\t <xs:attribute name=\"duration\" type=\"xs:int\" use=\"required\"/>\n\t\t <xs:attribute name=\"created\" type=\"xs:dateTime\" use=\"required\"/>\n\t\t <xs:attribute name=\"starred\" type=\"xs:dateTime\" use=\"optional\"/>\n\t\t <xs:attribute name=\"year\" type=\"xs:int\" use=\"optional\"/> <!-- Added in 1.10.1 -->\n\t\t <xs:attribute name=\"genre\" type=\"xs:string\" use=\"optional\"/> <!-- Added in 1.10.1 -->\n\n\t\t */\n\t\treturn {\n\t\t\tid: album.id,\n\t\t\tname: album.name,\n\t\t\tartist: album.artist,\n\t\t\tartistId: album.artistID,\n\t\t\tcoverArt: album.id,\n\t\t\tsongCount: album.trackIDs.length,\n\t\t\tduration: album.duration,\n\t\t\tyear: album.year,\n\t\t\tgenre: album.genre,\n\t\t\tcreated: FORMAT.formatSubSonicDate(album.created),\n\t\t\tstarred: state && state.faved ? FORMAT.formatSubSonicDate(state.faved) : undefined\n\t\t};\n\t}\n\n\tstatic packArtist(artist: Artist, state: State): Subsonic.ArtistID3 {\n\t\t/*\n\t\t <xs:complexType name=\"ArtistID3\">\n\t\t <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"coverArt\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"albumCount\" type=\"xs:int\" use=\"required\"/>\n\t\t <xs:attribute name=\"starred\" type=\"xs:dateTime\" use=\"optional\"/>\n\t\t </xs:complexType>\n\t\t */\n\t\treturn {\n\t\t\tid: artist.id,\n\t\t\tname: artist.name,\n\t\t\tcoverArt: artist.id,\n\t\t\talbumCount: artist.albumIDs.length,\n\t\t\tstarred: state && state.faved ? this.formatSubSonicDate(state.faved) : undefined\n\t\t};\n\t}\n\n\tstatic packAlbumInfo(info: MetaInfo): Subsonic.AlbumInfo {\n\t\treturn {\n\t\t\tnotes: info.album.description,\n\t\t\tmusicBrainzId: info.album.mbid,\n\t\t\tlastFmUrl: info.album.url,\n\t\t\tsmallImageUrl: info.album.image && info.album.image.small ? info.album.image.small : undefined,\n\t\t\tmediumImageUrl: info.album.image && info.album.image.medium ? info.album.image.medium : undefined,\n\t\t\tlargeImageUrl: info.album.image && info.album.image.large ? info.album.image.large : undefined\n\t\t};\n\t}\n\n\tstatic packArtistInfo(info: MetaInfo, similar?: Array<Subsonic.Artist>): Subsonic.ArtistInfo {\n\t\treturn {\n\t\t\tbiography: info.artist.description,\n\t\t\tmusicBrainzId: info.artist.mbid,\n\t\t\tlastFmUrl: info.artist.url,\n\t\t\tsmallImageUrl: info.artist.image && info.artist.image.small ? info.artist.image.small : undefined,\n\t\t\tmediumImageUrl: info.artist.image && info.artist.image.medium ? info.artist.image.medium : undefined,\n\t\t\tlargeImageUrl: info.artist.image && info.artist.image.large ? info.artist.image.large : undefined,\n\t\t\tsimilarArtist: similar\n\t\t};\n\t}\n\n\tstatic packArtistInfo2(info: MetaInfo, similar?: Array<Subsonic.ArtistID3>): Subsonic.ArtistInfo2 {\n\t\treturn {\n\t\t\tbiography: info.artist.description,\n\t\t\tmusicBrainzId: info.artist.mbid,\n\t\t\tlastFmUrl: info.artist.url,\n\t\t\tsmallImageUrl: info.artist.image && info.artist.image.small ? info.artist.image.small : undefined,\n\t\t\tmediumImageUrl: info.artist.image && info.artist.image.medium ? info.artist.image.medium : undefined,\n\t\t\tlargeImageUrl: info.artist.image && info.artist.image.large ? info.artist.image.large : undefined,\n\t\t\tsimilarArtist: similar\n\t\t};\n\t}\n\n\tstatic packTrack(track: Track, state: State): Subsonic.Child {\n\t\t/*\n\t\t <xs:complexType name=\"Child\">\n\t\t <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"parent\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"isDir\" type=\"xs:boolean\" use=\"required\"/>\n\t\t <xs:attribute name=\"title\" type=\"xs:string\" use=\"required\"/>\n\t\t <xs:attribute name=\"album\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"artist\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"track\" type=\"xs:int\" use=\"optional\"/>\n\t\t <xs:attribute name=\"year\" type=\"xs:int\" use=\"optional\"/>\n\t\t <xs:attribute name=\"genre\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"coverArt\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"size\" type=\"xs:long\" use=\"optional\"/>\n\t\t <xs:attribute name=\"contentType\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"suffix\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"transcodedContentType\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"transcodedSuffix\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"duration\" type=\"xs:int\" use=\"optional\"/>\n\t\t <xs:attribute name=\"bitRate\" type=\"xs:int\" use=\"optional\"/>\n\t\t <xs:attribute name=\"path\" type=\"xs:string\" use=\"optional\"/>\n\t\t <xs:attribute name=\"isVideo\" type=\"xs:boolean\" use=\"optional\"/> <!-- Added in 1.4.1 -->\n\t\t <xs:attribute name=\"userRating\" type=\"sub:UserRating\" use=\"optional\"/> <!-- Added in 1.6.0 -->\n\t\t <xs:attribute name=\"averageRating\" type=\"sub:AverageRating\" use=\"optional\"/> <!-- Added in 1.6.0 -->\n\t\t <xs:attribute name=\"discNumber\" type=\"xs:int\" use=\"optional\"/> <!-- Added in 1.8.0 -->\n\t\t <xs:attribute name=\"created\" type=\"xs:dateTime\" use=\"optional\"/> <!-- Added in 1.8.0 -->\n\t\t <xs:attribute name=\"starred\" type=\"xs:dateTime\" use=\"optional\"/> <!-- Added in 1.8.0 -->\n\t\t <xs:attribute name=\"albumId\" type=\"xs:string\" use=\"optional\"/> <!-- Added in 1.8.0 -->\n\t\t <xs:attribute name=\"artistId\" type=\"xs:string\" use=\"optional\"/> <!-- Added in 1.8.0 -->\n\t\t <xs:attribute name=\"type\" type=\"sub:MediaType\" use=\"optional\"/> <!-- Added in 1.8.0 -->\n\t\t <xs:attribute name=\"bookmarkPosition\" type=\"xs:long\" use=\"optional\"/> <!-- In millis. Added in 1.10.1 -->\n\t\t </xs:complexType>\n\t\t */\n\n\t\tconst suffix = fileSuffix(track.name);\n\t\tconst result: Subsonic.Child = {\n\t\t\tid: track.id,\n\t\t\tparent: track.parentID || '',\n\t\t\ttitle: track.tag.title || track.name,\n\t\t\talbum: track.tag.album,\n\t\t\tartist: track.tag.artist,\n\t\t\tisDir: false,\n\t\t\tcoverArt: track.id,\n\t\t\tgenre: track.tag.genre,\n\t\t\tyear: track.tag.year,\n\t\t\tcreated: FORMAT.formatSubSonicDate(track.stat.created),\n\t\t\tduration: (track.media.duration !== undefined && !isNaN(track.media.duration)) ? Math.round(track.media.duration) : -1,\n\t\t\tbitRate: (track.media.bitRate !== undefined) ? Math.round(track.media.bitRate / 1000) : -1,\n\t\t\ttrack: track.tag.track,\n\t\t\tsize: track.stat.size,\n\t\t\tsuffix: suffix,\n\t\t\tcontentType: AudioMimeTypes[suffix],\n\t\t\tisVideo: false,\n\t\t\tpath: track.path + '/' + track.name,\n\t\t\tdiscNumber: track.tag.disc,\n\t\t\talbumId: track.albumID,\n\t\t\tartistId: track.artistID,\n\t\t\ttype: 'music',\n\t\t\tuserRating: state ? state.rated : undefined,\n\t\t\tstarred: state && state.faved ? this.formatSubSonicDate(state.faved) : undefined,\n\t\t\tplayCount: state && state.played ? state.played : 0,\n\t\t\ttranscodedSuffix: undefined,\n\t\t\ttranscodedContentType: undefined\n\t\t\t// \"rank\": 0,\n\t\t\t// \"averageRating\": track.state.avgrated,\n\t\t\t// \"bookmarkPosition\": track.state.bookmark,\n\t\t};\n\t\tif (suffix !== 'mp3') {\n\t\t\tresult.transcodedSuffix = 'mp3';\n\t\t\tresult.transcodedContentType = AudioMimeTypes[result.transcodedSuffix];\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic packNowPlaying(nowPlaying: NowPlaying, state: State): Subsonic.NowPlayingEntry {\n\t\tlet entry: Subsonic.Child;\n\t\tswitch (nowPlaying.obj.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\tentry = FORMAT.packTrack(<Track>nowPlaying.obj, state);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.episode:\n\t\t\t\tentry = FORMAT.packPodcastEpisode(<Episode>nowPlaying.obj, state);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tentry = {\n\t\t\t\t\tid: nowPlaying.obj.id,\n\t\t\t\t\tisDir: false,\n\t\t\t\t\ttitle: 'Unknown'\n\t\t\t\t};\n\t\t}\n\t\tconst nowPlay = <Subsonic.NowPlayingEntry>entry;\n\t\tnowPlay.username = nowPlaying.user.name;\n\t\tnowPlay.minutesAgo = Math.round(moment.duration(moment().diff(moment(nowPlaying.time))).asMinutes());\n\t\tnowPlay.playerId = 0;\n\t\treturn nowPlay;\n\t}\n\n\tstatic packFolder(folder: Folder, state: State): Subsonic.Child {\n\t\treturn {\n\t\t\tid: folder.id,\n\t\t\tpath: folder.path,\n\t\t\tparent: folder.parentID,\n\t\t\tcreated: FORMAT.formatSubSonicDate(folder.stat.created),\n\t\t\ttitle: folder.tag.title || '',\n\t\t\talbum: folder.tag.album,\n\t\t\tgenre: folder.tag.genre,\n\t\t\tartist: folder.tag.artist,\n\t\t\tyear: folder.tag.year,\n\t\t\tcoverArt: folder.id,\n\t\t\tuserRating: state ? state.rated : undefined,\n\t\t\t// \"albumId\": '',  // TODO: folder albumId if only one?\n\t\t\t// \"artistId\": '',  // TODO: folder artistId if only one?\n\t\t\tisDir: true,\n\t\t\tstarred: state && state.faved ? this.formatSubSonicDate(state.faved) : undefined\n\t\t};\n\t}\n\n\tstatic packPodcast(podcast: Podcast, status?: PodcastStatus): Subsonic.PodcastChannel {\n\t\treturn {\n\t\t\tid: podcast.id,\n\t\t\turl: podcast.url,\n\t\t\terrorMessage: podcast.errorMessage,\n\t\t\ttitle: podcast.tag ? podcast.tag.title : undefined,\n\t\t\tstatus: status ? PodcastStatus[status] : PodcastStatus[podcast.status],\n\t\t\tdescription: podcast.tag ? podcast.tag.description : undefined,\n\t\t\tcoverArt: podcast.id,\n\t\t\toriginalImageUrl: podcast.tag ? podcast.tag.image : undefined\n\t\t};\n\t}\n\n\tstatic packPodcastEpisode(episode: Episode, state: State, status?: PodcastStatus): Subsonic.PodcastEpisode {\n\t\tconst result: Subsonic.PodcastEpisode = {\n\t\t\t// albumId:episode.albumId,\n\t\t\t// artistId:episode.artistId,\n\t\t\t// averageRating:episode.averageRating, // TODO: podcast episode state.averageRating\n\t\t\t// bookmarkPosition:episode.bookmarkPosition, // TODO: podcast episode state.bookmarkPosition\n\t\t\tstreamId: episode.id,\n\t\t\tcoverArt: episode.id,\n\t\t\tchannelId: episode.podcastID,\n\t\t\tdescription: episode.summary,\n\t\t\tpublishDate: episode.date !== undefined ? this.formatSubSonicDate(episode.date) : undefined,\n\t\t\ttitle: episode.name,\n\t\t\tstatus: status ? PodcastStatus[status] : PodcastStatus[episode.status],\n\t\t\tid: episode.id,\n\t\t\tparent: episode.podcastID,\n\t\t\tartist: episode.tag ? episode.tag.artist : episode.author,\n\t\t\talbum: episode.tag ? episode.tag.album : undefined,\n\t\t\ttrack: episode.tag ? episode.tag.track : undefined,\n\t\t\tyear: episode.tag ? episode.tag.year : undefined,\n\t\t\tgenre: episode.tag ? episode.tag.genre : undefined,\n\t\t\tdiscNumber: episode.tag ? episode.tag.disc : undefined,\n\t\t\ttype: 'podcast',\n\t\t\tplayCount: state && state.played ? state.played : 0,\n\t\t\tstarred: state && state.faved ? this.formatSubSonicDate(state.faved) : undefined,\n\t\t\tuserRating: state ? state.rated : undefined,\n\t\t\tisVideo: false,\n\t\t\tisDir: false,\n\t\t\tsuffix: undefined,\n\t\t\ttranscodedSuffix: undefined,\n\t\t\ttranscodedContentType: undefined,\n\t\t\tpath: undefined,\n\t\t\tsize: undefined,\n\t\t\tcreated: undefined,\n\t\t\tduration: undefined,\n\t\t\tbitRate: undefined\n\t\t};\n\t\tif (episode.path) {\n\t\t\tresult.suffix = fileSuffix(episode.path);\n\t\t\tif (result.suffix !== 'mp3') {\n\t\t\t\tresult.transcodedSuffix = 'mp3';\n\t\t\t\tresult.transcodedContentType = AudioMimeTypes[result.transcodedSuffix];\n\t\t\t}\n\t\t\tresult.contentType = AudioMimeTypes[result.suffix];\n\t\t\tif (episode.stat) {\n\t\t\t\tresult.size = episode.stat.size;\n\t\t\t\tresult.created = FORMAT.formatSubSonicDate(episode.stat.created);\n\t\t\t}\n\t\t\tif (episode.media) {\n\t\t\t\tresult.duration = episode.media.duration;\n\t\t\t\tresult.bitRate = episode.media.bitRate !== undefined ? Math.round(episode.media.bitRate / 1000) : -1;\n\t\t\t}\n\t\t}\n\t\tif (status) {\n\t\t\tresult.status = status;\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic packPlaylist(playlist: Playlist): Subsonic.Playlist {\n\t\treturn {\n\t\t\tid: playlist.id,\n\t\t\tname: playlist.name,\n\t\t\tcomment: playlist.comment || '',\n\t\t\t'public': playlist.isPublic,\n\t\t\tduration: playlist.duration,\n\t\t\tcreated: FORMAT.formatSubSonicDate(playlist.created),\n\t\t\tchanged: FORMAT.formatSubSonicDate(playlist.changed),\n\t\t\tcoverArt: playlist.coverArt,\n\t\t\tallowedUser: playlist.allowedUser,\n\t\t\tsongCount: playlist.trackIDs.length,\n\t\t\towner: playlist.userID\n\t\t};\n\t}\n\n\tstatic packPlaylistWithSongs(playlist: Playlist, tracks: Array<Track>, states: States): Subsonic.PlaylistWithSongs {\n\t\tconst result = <Subsonic.PlaylistWithSongs>FORMAT.packPlaylist(playlist);\n\t\tresult.entry = tracks.map(track => FORMAT.packTrack(track, states[track.id]));\n\t\treturn result;\n\t}\n\n\tstatic packBookmark(bookmark: Bookmark, username: string, child: Subsonic.Child): Subsonic.Bookmark {\n\t\treturn {\n\t\t\tentry: child,\n\t\t\tusername: username,\n\t\t\tposition: bookmark.position,\n\t\t\tcomment: bookmark.comment,\n\t\t\tcreated: FORMAT.formatSubSonicDate(bookmark.created),\n\t\t\tchanged: FORMAT.formatSubSonicDate(bookmark.changed)\n\t\t};\n\t}\n\n\tstatic packSimilarSongs(childs: Array<Subsonic.Child>): Subsonic.SimilarSongs {\n\t\treturn {\n\t\t\tsong: childs\n\t\t};\n\t}\n\n\tstatic packSimilarSongs2(childs: Array<Subsonic.Child>): Subsonic.SimilarSongs2 {\n\t\treturn {\n\t\t\tsong: childs\n\t\t};\n\t}\n\n\tstatic packPlayQueue(playqueue: PlayQueue, user: User, childs: Array<Subsonic.Child>): Subsonic.PlayQueue {\n\t\treturn {\n\t\t\tentry: childs,\n\t\t\tcurrent: playqueue.currentID !== undefined ? parseInt(playqueue.currentID, 10) : undefined,\n\t\t\tposition: playqueue.position,\n\t\t\tusername: user.name,\n\t\t\tchanged: playqueue.changed > 0 ? FORMAT.formatSubSonicDate(playqueue.changed) : '',\n\t\t\tchangedBy: playqueue.changedBy || ''\n\t\t};\n\t}\n\n\tstatic packRadio(radio: Radio): Subsonic.InternetRadioStation {\n\t\treturn {\n\t\t\tid: radio.id,\n\t\t\tname: radio.name,\n\t\t\tstreamUrl: radio.url,\n\t\t\thomePageUrl: radio.homepage\n\t\t};\n\t}\n\n\tstatic packGenre(genre: Genre): Subsonic.Genre {\n\t\treturn {\n\t\t\tcontent: genre.name,\n\t\t\tsongCount: genre.trackCount,\n\t\t\talbumCount: genre.albumCount,\n\t\t\tartistCount: genre.artistCount\n\t\t};\n\t}\n\n\tstatic packChatMessage(message: ChatMessage): Subsonic.ChatMessage {\n\t\treturn {\n\t\t\tusername: message.username,\n\t\t\ttime: message.time,\n\t\t\tmessage: message.message\n\t\t};\n\t}\n}\n","import {FileTyp} from '../types';\nimport {fileSuffix} from './fs-utils';\n\nexport const SupportedReadImageFormat = ['bmp', 'png', 'jpeg', 'jpg', 'gif', 'tiff'];\nexport const SupportedWriteImageFormat = ['bmp', 'png', 'jpeg', 'jpg', 'tiff'];\n\nexport const SupportedAudioFormat = ['mp3', 'flac', 'm4a', 'ogg', 'oga', 'webma', 'wav'];\nexport const SupportedTranscodeAudioFormat = ['mp3', 'flv', 'ogg', 'oga', 'flac', 'mp4'];\n\nexport function getFileType(filename: string): FileTyp {\n\tconst suffix = fileSuffix(filename);\n\tif (SupportedReadImageFormat.indexOf(suffix) >= 0) {\n\t\treturn FileTyp.IMAGE;\n\t} else if (SupportedAudioFormat.indexOf(suffix) >= 0) {\n\t\treturn FileTyp.AUDIO;\n\t} else if (['tag'].indexOf(suffix) >= 0) {\n\t\treturn FileTyp.TAG;\n\t} else if (['bak'].indexOf(suffix) >= 0) {\n\t\treturn FileTyp.BACKUP;\n\t}\n\treturn FileTyp.OTHER;\n}\n","module.exports = require(\"request\");","module.exports = require(\"moment\");","export class DebouncePromises<T> {\n\tprivate pendingPromises: { [id: string]: Array<any> } = {};\n\n\tappend(id: string): Promise<T> {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tconst run = (err: Error | null, result: T) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.pendingPromises[id].push(run);\n\t\t});\n\t}\n\n\tsetPending(id: string): void {\n\t\tthis.pendingPromises[id] = [];\n\t}\n\n\tisPending(id: string): boolean {\n\t\treturn !!this.pendingPromises[id];\n\t}\n\n\tresolve(id: string, result: T) {\n\t\tfor (const cb of this.pendingPromises[id]) {\n\t\t\tcb(null, result);\n\t\t}\n\t\tdelete this.pendingPromises[id];\n\t}\n\n\treject(id: string, error: Error) {\n\t\tfor (const cb of this.pendingPromises[id]) {\n\t\t\tcb(error);\n\t\t}\n\t\tdelete this.pendingPromises[id];\n\t}\n\n}\n","import {BaseStore, SearchQuery} from './base.store';\nimport {User} from '../user/user.model';\nimport {DBObject} from './base.model';\nimport {StateService} from '../state/state.service';\nimport {BaseStoreService} from './base.service';\n\nexport class BaseListService<T extends DBObject, Q extends SearchQuery> extends BaseStoreService<T, Q> {\n\n\tconstructor(\n\t\tstore: BaseStore<T, Q>,\n\t\tpublic stateService: StateService\n\t) {\n\t\tsuper(store);\n\t}\n\n\tasync getFilteredIDs(ids: Array<string>, query: Q): Promise<Array<string>> {\n\t\tconst list = await this.store.searchIDs(Object.assign(query, {ids, amount: -1, offset: 0}));\n\t\treturn list.sort((a, b) => {\n\t\t\treturn ids.indexOf(a) - ids.indexOf(b);\n\t\t});\n\t}\n\n\tasync getAvgHighestIDs(query: Q): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getAvgHighestDestIDs(this.store.type);\n\t\treturn await this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getHighestRatedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getHighestRatedDestIDs(this.store.type, user.id);\n\t\treturn await this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getFrequentlyPlayedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getFrequentlyPlayedDestIDs(this.store.type, user.id);\n\t\treturn await this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getFavedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getFavedDestIDs(this.store.type, user.id);\n\t\treturn await this.getFilteredIDs(ids, query);\n\t}\n\n\tasync getRecentlyPlayedIDs(query: Q, user: User): Promise<Array<string>> {\n\t\tconst ids = await this.stateService.getRecentlyPlayedDestIDs(this.store.type, user.id);\n\t\treturn await this.getFilteredIDs(ids, query);\n\t}\n\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {InvalidParamError} from '../../api/jam/error';\nimport {randomItems} from '../../utils/random';\nimport {paginate} from '../../utils/paginate';\nimport {BaseController} from './base.controller';\nimport {SearchQuery} from './base.store';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {BaseListService} from './base.list.service';\nimport {DBObject} from './base.model';\nimport {User} from '../user/user.model';\n\nexport abstract class BaseListController<OBJREQUEST extends JamParameters.ID | INCLUDE, OBJLISTREQUEST extends JamParameters.IDs | INCLUDE, INCLUDE, JAMQUERY extends SearchQuery, S extends JamParameters.SearchQuery | INCLUDE, DBOBJECT extends DBObject, RESULTOBJ extends { id: string }> extends BaseController<OBJREQUEST, OBJLISTREQUEST, INCLUDE, JAMQUERY, S, DBOBJECT, RESULTOBJ> {\n\n\tprotected constructor(\n\t\tprotected listService: BaseListService<DBOBJECT, JAMQUERY>,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(listService, stateService, imageService, downloadService);\n\t}\n\n\tasync getList(listQuery: JamParameters.List, jamquery: S, includes: INCLUDE, user: User): Promise<Array<RESULTOBJ>> {\n\t\tconst query = this.translateQuery(jamquery, user);\n\t\tlet ids: Array<string> = [];\n\t\tswitch (listQuery.list) {\n\t\t\tcase 'random':\n\t\t\t\tids = await this.listService.store.searchIDs(Object.assign(query, {amount: -1, offset: 0}));\n\t\t\t\tids = randomItems<string>(ids, listQuery.amount || 20);\n\t\t\t\tbreak;\n\t\t\tcase 'highest':\n\t\t\t\tids = await this.listService.getHighestRatedIDs(query, user);\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset);\n\t\t\t\tbreak;\n\t\t\tcase 'avghighest':\n\t\t\t\tids = await this.listService.getAvgHighestIDs(query);\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset);\n\t\t\t\tbreak;\n\t\t\tcase 'frequent':\n\t\t\t\tids = await this.listService.getFrequentlyPlayedIDs(query, user);\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset);\n\t\t\t\tbreak;\n\t\t\tcase 'faved':\n\t\t\t\tids = await this.listService.getFavedIDs(query, user);\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset);\n\t\t\t\tbreak;\n\t\t\tcase 'recent':\n\t\t\t\tids = await this.listService.getRecentlyPlayedIDs(query, user);\n\t\t\t\tids = paginate(ids, listQuery.amount, listQuery.offset);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(InvalidParamError('Unknown List Type'));\n\t\t}\n\t\treturn this.prepareListByIDs(ids, includes, user);\n\t}\n\n}\n","import express from 'express';\nimport {IApiBinaryResult, NodeError} from '../../typings';\nimport path from 'path';\nimport {toXML} from '../../utils/to-xml';\nimport {SubsonicParameterRequest} from './parameters';\nimport {FORMAT} from './format';\n\nexport class ApiResponder {\n\n\tpublic static ok(req: express.Request, res: express.Response) {\n\t\tApiResponder.send(req, res, FORMAT.packOK());\n\t}\n\n\tprivate static send(req: express.Request, res: express.Response, data: any) {\n\t\tconst params = (<SubsonicParameterRequest>req).parameters;\n\t\tif ((params.format === 'jsonp') && (params.callback)) {\n\t\t\tres.status(200).send(params.callback + '(' + JSON.stringify(data) + ');');\n\t\t} else if (params.format === 'json') {\n\t\t\tres.status(200).json(data);\n\t\t} else {\n\t\t\tres.set('Content-Type', 'application/xml');\n\t\t\tres.status(200).send(toXML(data));\n\t\t}\n\t}\n\n\tpublic static data(req: express.Request, res: express.Response, data: any) {\n\t\tApiResponder.send(req, res, FORMAT.packResponse(data));\n\t}\n\n\tpublic static error(req: express.Request, res: express.Response, err: NodeError) {\n\t\tif (err.fail) {\n\t\t\tApiResponder.send(req, res, FORMAT.packFail(err.fail, err.text));\n\t\t} else {\n\t\t\tApiResponder.send(req, res, FORMAT.packFail(FORMAT.FAIL.GENERIC, (typeof err === 'string' ? err : (err.message || 'Unknown Error')).toString()));\n\t\t}\n\t}\n\n\tpublic static binary(req: express.Request, res: express.Response, data: IApiBinaryResult) {\n\t\tif (data.pipe) {\n\t\t\tdata.pipe.pipe(res);\n\t\t} else if (data.buffer) {\n\t\t\tres.set('Content-Type', data.buffer.contentType);\n\t\t\tres.set('Content-Length', data.buffer.buffer.length.toString());\n// \t\t\tres.set('Cache-Control', 'public, max-age=' + config.max_age);\n\t\t\tres.status(200).send(data.buffer.buffer);\n\t\t} else if (data.file) {\n\t\t\tres.sendFile(data.file.filename, data.file.name || path.basename(data.file.filename));\n\t\t}\n\t}\n}\n","import rateLimiter from 'limiter';\nimport request from 'request';\n\nexport class WebserviceClient {\n\tprivate limiter: rateLimiter.RateLimiter;\n\tprivate userAgent: string;\n\n\tconstructor(requestPerInterval: number, requestIntervalMS: number, userAgent: string) {\n\t\tthis.limiter = new rateLimiter.RateLimiter(requestPerInterval, requestIntervalMS);\n\t\tthis.userAgent = userAgent;\n\t}\n\n\tprotected async getJson<T>(url: string, parameters: object | undefined): Promise<T> {\n\t\tconst options: request.Options = {\n\t\t\turl,\n\t\t\theaders: {'User-Agent': this.userAgent},\n\t\t\tqs: parameters,\n\t\t\ttimeout: 5000\n\t\t};\n\t\tconst limiter = this.limiter;\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tlimiter.removeTokens(1, () => {\n\t\t\t\trequest(options, (err, response, body) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresolve(<T>JSON.parse(body));\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n}\n","export function shuffle<T>(list: Array<T>): Array<T> {\n\tfor (let i = list.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[list[i], list[j]] = [list[j], list[i]];\n\t}\n\treturn list;\n}\n\nexport function randomInt(min: number, max: number) {\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomItem<T>(list: Array<T>): T {\n\tconst i = randomInt(0, list.length - 1);\n\treturn list[i];\n}\n\nexport function randomItems<T>(list: Array<T>, amount?: number): Array<T> {\n\tif (amount === undefined || amount < 0 || list.length <= amount) {\n\t\treturn shuffle<T>(list);\n\t}\n\tconst result: Array<T> = [];\n\tconst done: Array<number> = [];\n\twhile ((result.length < amount)) {\n\t\tconst i = randomInt(0, list.length - 1);\n\t\tif (done.indexOf(i) < 0) {\n\t\t\tresult.push(list[i]);\n\t\t\tdone.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n","module.exports = require(\"fs\");","export const JAMSERVE_VERSION = '0.1.1';\nexport const JAMAPI_VERSION = '0.1.1';\n","module.exports = require(\"express\");","import express from 'express';\nimport {IApiBinaryResult, NodeError} from '../../typings';\nimport path from 'path';\n\nexport class ApiResponder {\n\n\tpublic static ok(res: express.Response) {\n\t\tres.status(200).json({});\n\t}\n\n\tpublic static data(res: express.Response, data: any) {\n\t\tres.status(200).json(data);\n\t}\n\n\tpublic static error(res: express.Response, err: NodeError) {\n\t\tconst msg = (typeof err === 'string' ? err : (err.message || 'Guru Meditation')).toString();\n\t\tconst code = (typeof err.failCode === 'number' ? err.failCode : 500);\n\t\tres.status(code || 500).json({error: msg});\n\t}\n\n\tpublic static binary(res: express.Response, data: IApiBinaryResult) {\n\t\tif (data.json) {\n\t\t\tres.status(200).json(data.json);\n\t\t} else if (data.pipe) {\n\t\t\tdata.pipe.pipe(res);\n\t\t} else if (data.buffer) {\n\t\t\tres.set('Content-Type', data.buffer.contentType);\n\t\t\tres.set('Content-Length', data.buffer.buffer.length.toString());\n// \t\t\tres.set('Cache-Control', 'public, max-age=' + config.max_age);\n\t\t\tres.status(200).send(data.buffer.buffer);\n\t\t} else if (data.file) {\n\t\t\tres.sendFile(data.file.filename, data.file.name || path.basename(data.file.filename));\n\t\t}\n\t}\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {Track, TrackTag} from './track.model';\n\nexport function formatTrackTag(tag: TrackTag): Jam.TrackTag {\n\tlet mbz: Jam.TrackMBTag | undefined = {\n\t\trecordingID: tag.mbRecordingID,\n\t\treleaseTrackID: tag.mbReleaseTrackID,\n\t\ttrackID: tag.mbTrackID,\n\t\tartistID: tag.mbArtistID,\n\t\talbumID: tag.mbAlbumID\n\t};\n\tif (!Object.keys(mbz).find(key => !!(<any>mbz)[key])) {\n\t\tmbz = undefined;\n\t}\n\treturn {\n\t\ttrackNr: tag.track,\n\t\tyear: tag.year,\n\t\ttitle: tag.title,\n\t\tartist: tag.artist,\n\t\talbum: tag.album,\n\t\tgenre: tag.genre,\n\t\tmusicbrainz: mbz\n\t};\n}\n\nexport function formatTrack(track: Track, includes: JamParameters.IncludesTrack): Jam.Track {\n\tincludes = includes || {};\n\treturn {\n\t\tid: track.id,\n\t\tparentID: track.parentID,\n\t\tartistID: track.artistID,\n\t\talbumID: track.albumID,\n\t\tname: track.name,\n\t\tcreated: track.stat.created,\n\t\tduration: track.media.duration || -1,\n\t\tmedia: includes.trackMedia ? {\n\t\t\tbitRate: track.media.bitRate || -1,\n\t\t\tformat: track.media.format || '',\n\t\t\tchannels: track.media.channels || -1,\n\t\t\tsampleRate: track.media.sampleRate || -1\n\t\t} : undefined,\n\t\ttag: includes.trackTag ? formatTrackTag(track.tag) : undefined\n\t};\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {User, UserRoles} from './user.model';\n\nfunction formatRoles(roles: UserRoles): Jam.Roles {\n\treturn {\n\t\t// coverArt: roles.coverArtRole ? true : undefined,\n\t\tstream: roles.streamRole ? true : undefined,\n\t\tupload: roles.uploadRole ? true : undefined,\n\t\tadmin: roles.adminRole ? true : undefined,\n\t\tpodcast: roles.podcastRole ? true : undefined,\n\t\t// settings: roles.settingsRole ? true : undefined,\n\t\t// download: roles.downloadRole ? true : undefined,\n\t\t// playlist: roles.playlistRole ? true : undefined,\n\t\t// comment: roles.commentRole ? true : undefined,\n\t\t// jukebox: roles.jukeboxRole ? true : undefined,\n\t\t// share: roles.shareRole ? true : undefined,\n\t\t// videoConversion: roles.videoConversionRole ? true : undefined\n\t};\n}\n\nexport function formatUser(user: User): Jam.User {\n\treturn {\n\t\tid: user.id,\n\t\tcreated: user.created,\n\t\tname: user.name,\n\t\temail: user.email,\n\t\troles: formatRoles(user.roles)\n\t};\n}\n\n","import {MatchDir} from './match';\nimport {AlbumType, FileTyp, FolderType} from '../../../types';\nimport path from 'path';\nimport Logger from '../../../utils/logger';\nimport {FolderTag} from '../../../objects/folder/folder.model';\n\nconst log = Logger('IO.tag');\n\nexport const cVariousArtist = '[Various Artists]';\nexport const cUnknownArtist = '[Unknown Artist]';\nexport const cUnknownAlbum = '[Unknown Album]';\n\ninterface MetaStatValue<T> {\n\tcount: number;\n\tval: T;\n}\n\ninterface MetaStatString extends MetaStatValue<string> {\n}\n\ninterface MetaStatNumber extends MetaStatValue<number> {\n}\n\ninterface MetaStat {\n\tartist?: string;\n\tartistSort?: string;\n\talbum?: string;\n\tgenre?: string;\n\tmbArtistID?: string;\n\tmbAlbumID?: string;\n\tyear?: number;\n\timages: Array<string>;\n\timage?: string;\n\tisMultiArtist: boolean;\n\tisMultiAlbum: boolean;\n\ttrackCount: number;\n}\n\nfunction convert2Numlist(o: { [key: string]: number; }): Array<MetaStatNumber> {\n\treturn Object.keys(o).map(key => {\n\t\treturn {count: o[key], val: parseInt(key, 10)};\n\t}).sort((a, b) => {\n\t\treturn a.count - b.count;\n\t});\n}\n\nfunction convert2list(o: { [key: string]: number; }): Array<MetaStatString> {\n\treturn Object.keys(o).map(key => {\n\t\treturn {count: o[key], val: key};\n\t}).sort((a, b) => {\n\t\treturn a.count - b.count;\n\t});\n}\n\nfunction getMostUsedTagValue<T>(list: Array<MetaStatValue<T>>, multi?: T): T | undefined {\n\tif (list.length === 0) {\n\t\treturn undefined;\n\t}\n\tif (list.length === 1) {\n\t\treturn list[0].val;\n\t}\n\tlist = list.sort((a, b) => a.count - b.count);\n\tconst cleaned = list.filter((o) => {\n\t\treturn o.count > 1;\n\t});\n\tif (cleaned.length > 1 && multi !== undefined) {\n\t\treturn multi;\n\t}\n\tif (cleaned.length > 0) {\n\t\treturn cleaned[0].val;\n\t}\n\treturn list[0].val;\n}\n\nfunction getMetaStat(dir: MatchDir): MetaStat {\n\t// combine meta frames from child tracks and folders\n\tconst stats: {\n\t\tartist: { [key: string]: number; };\n\t\tartistSort: { [key: string]: number; };\n\t\talbum: { [key: string]: number; };\n\t\tgenre: { [key: string]: number; };\n\t\tmbArtistID: { [key: string]: number; };\n\t\tmbAlbumID: { [key: string]: number; };\n\t\tyear: { [key: string]: number; };\n\t} = {\n\t\tartist: {},\n\t\tartistSort: {},\n\t\talbum: {},\n\t\tgenre: {},\n\t\tyear: {},\n\t\tmbArtistID: {},\n\t\tmbAlbumID: {},\n\t};\n\tconst images: Array<string> = [];\n\tlet trackCount = 0;\n\tdir.files.forEach((file) => {\n\t\tif (file.type === FileTyp.AUDIO) {\n\t\t\ttrackCount++;\n\t\t}\n\t\tif (file.track && file.track.tag) {\n\t\t\tconst tracktag = file.track.tag;\n\t\t\tif (tracktag.artist) {\n\t\t\t\tstats.artist[tracktag.artist] = (stats.artist[tracktag.artist] || 0) + 1;\n\t\t\t}\n\t\t\tif (tracktag.artistSort) {\n\t\t\t\tstats.artistSort[tracktag.artistSort] = (stats.artistSort[tracktag.artistSort] || 0) + 1;\n\t\t\t}\n\t\t\tif (tracktag.album) {\n\t\t\t\tstats.album[tracktag.album] = (stats.album[tracktag.album] || 0) + 1;\n\t\t\t}\n\t\t\tif (tracktag.genre) {\n\t\t\t\tstats.genre[tracktag.genre] = (stats.genre[tracktag.genre] || 0) + 1;\n\t\t\t}\n\t\t\tif (tracktag.year) {\n\t\t\t\tstats.year[tracktag.year] = (stats.year[tracktag.year] || 0) + 1;\n\t\t\t}\n\t\t\tif (tracktag.mbArtistID) {\n\t\t\t\tconst s = tracktag.mbArtistID.split(' ')[0];\n\t\t\t\tstats.mbArtistID[s] = (stats.mbArtistID[s] || 0) + 1;\n\t\t\t}\n\t\t\tif (tracktag.mbAlbumID) {\n\t\t\t\tconst s = tracktag.mbAlbumID.split(' ')[0];\n\t\t\t\tstats.mbAlbumID[s] = (stats.mbAlbumID[s] || 0) + 1;\n\t\t\t}\n\t\t} else if (file.type === FileTyp.IMAGE) {\n\t\t\timages.push(file.name);\n\t\t}\n\t});\n\tdir.directories.forEach((sub) => {\n\t\tif (sub.folder && sub.tag) {\n\t\t\tconst subtag = sub.tag;\n\t\t\tif (subtag.artist) {\n\t\t\t\tstats.artist[subtag.artist] = (stats.artist[subtag.artist] || 0) + 1;\n\t\t\t}\n\t\t\tif (subtag.artistSort) {\n\t\t\t\tstats.artistSort[subtag.artistSort] = (stats.artistSort[subtag.artistSort] || 0) + 1;\n\t\t\t}\n\t\t\tif (subtag.album) {\n\t\t\t\tstats.album[subtag.album] = (stats.album[subtag.album] || 0) + 1;\n\t\t\t}\n\t\t\tif (subtag.genre) {\n\t\t\t\tstats.genre[subtag.genre] = (stats.genre[subtag.genre] || 0) + 1;\n\t\t\t}\n\t\t\tif (subtag.year) {\n\t\t\t\tstats.year[subtag.year] = (stats.year[subtag.year] || 0) + 1;\n\t\t\t}\n\t\t\tif (subtag.mbArtistID) {\n\t\t\t\tconst s = subtag.mbArtistID.split(' ')[0];\n\t\t\t\tstats.mbArtistID[s] = (stats.mbArtistID[s] || 0) + 1;\n\t\t\t}\n\t\t\tif (subtag.mbAlbumID) {\n\t\t\t\tconst s = subtag.mbAlbumID.split(' ')[0];\n\t\t\t\tstats.mbAlbumID[s] = (stats.mbAlbumID[s] || 0) + 1;\n\t\t\t}\n\t\t}\n\t});\n\tconst artists = convert2list(stats.artist);\n\tconst artistSorts = convert2list(stats.artistSort);\n\tconst albums = convert2list(stats.album);\n\tconst genres = convert2list(stats.genre);\n\tconst years = convert2Numlist(stats.year);\n\tconst mbArtistIDs = convert2list(stats.mbArtistID);\n\tconst mbAlbumIDs = convert2list(stats.mbAlbumID);\n\tconst album = getMostUsedTagValue<string>(albums, path.basename(dir.name));\n\tconst artist = getMostUsedTagValue<string>(artists, cVariousArtist);\n\tconst artistSort = getMostUsedTagValue<string>(artistSorts);\n\tconst genre = getMostUsedTagValue<string>(genres);\n\tconst mbAlbumID = getMostUsedTagValue<string>(mbAlbumIDs);\n\tconst mbArtistID = getMostUsedTagValue<string>(mbArtistIDs);\n\tconst year = getMostUsedTagValue<number>(years);\n\tconst isMultiArtist = artist === cVariousArtist;\n\tconst isMultiAlbum = albums.length > 0;\n\tlet image: string | undefined;\n\t// check folder image\n\tif (images.length > 0) {\n\t\tif (images.length === 1) {\n\t\t\timage = path.basename(images[0]);\n\t\t} else {\n\t\t\timages.forEach((img) => {\n\t\t\t\tconst typ = path.basename(img, path.extname(img)).toLowerCase();\n\t\t\t\tif (['folder', 'cover', 'front'].indexOf(typ) >= 0) {\n\t\t\t\t\timage = path.basename(img);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (image === undefined) {\n\t\t\t\timage = path.basename(images[0]);\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\ttrackCount,\n\t\timages,\n\t\timage,\n\t\tisMultiArtist,\n\t\tisMultiAlbum,\n\t\talbum,\n\t\tartist,\n\t\tartistSort,\n\t\tgenre,\n\t\tmbAlbumID,\n\t\tmbArtistID,\n\t\tyear\n\t};\n}\n\nfunction splitDirectoryName(name: string): { title: string; year?: number; } {\n\tconst result: { title: string; year?: number; } = {title: path.basename(name).trim()};\n\t// year title | year - title | (year) title | [year] title\n\tconst parts = result.title.split(' ');\n\tconst s = parts[0].replace(/[^\\w\\s]/gi, '');\n\tif (s.length === 4) {\n\t\tconst y = parseInt(s, 10);\n\t\tif (!isNaN(y)) {\n\t\t\tresult.year = y;\n\t\t\tparts.shift();\n\t\t\tif (parts[0] === '-') {\n\t\t\t\tparts.shift();\n\t\t\t}\n\t\t\tresult.title = parts.join(' ');\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction applyFolderTagType(dir: MatchDir) {\n\tif (!dir.tag) {\n\t\treturn;\n\t}\n\tconst metaStat = getMetaStat(dir);\n\tconst name = path.basename(dir.name).toLowerCase();\n\tlet result: FolderType = FolderType.unknown;\n\tif (dir.level === 0) {\n\t\tresult = FolderType.multiartist;\n\t} else if (name.match(/\\[(extra|various)\\]/) || name.match(/^(extra|various)$/)) {\n\t\tresult = FolderType.extras;\n\t} else if (metaStat.trackCount > 0) {\n\t\tconst dirCount = dir.directories.filter(d => !!d.tag && d.tag.type !== FolderType.extras).length;\n\t\tif (dirCount === 0) {\n\t\t\tresult = FolderType.album;\n\t\t} else {\n\t\t\tresult = FolderType.multialbum;\n\t\t}\n\t} else {\n\t\tif (metaStat.isMultiArtist) {\n\t\t\tresult = FolderType.multialbum;\n\t\t} else {\n\t\t\tresult = FolderType.artist;\n\t\t\tdir.directories.forEach(d => {\n\t\t\t\tif (d.tag && d.tag.type === FolderType.artist) {\n\t\t\t\t\td.tag.type = FolderType.multialbum;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tif (result === FolderType.multialbum) {\n\t\tconst a = dir.directories.find(d => {\n\t\t\treturn (!!d.tag && d.tag.type === FolderType.artist);\n\t\t});\n\t\tif (a) {\n\t\t\tresult = FolderType.multiartist;\n\t\t}\n\t}\n\tdir.tag.type = result;\n}\n\nfunction createFolderTag(dir: MatchDir): FolderTag {\n\tlog.debug('Generating folder tag ', dir.name);\n\tconst metaStat = getMetaStat(dir);\n\tconst nameSplit = splitDirectoryName(dir.name);\n\tconst tag: FolderTag = {\n\t\ttracks: dir.files.filter(f => f.type === FileTyp.AUDIO).length,\n\t\tlevel: dir.level,\n\t\ttype: FolderType.unknown,\n\t\talbum: metaStat.album,\n\t\talbumType: metaStat.isMultiArtist ? AlbumType.mix : AlbumType.album,\n\t\tartist: metaStat.artist,\n\t\tartistSort: metaStat.artistSort,\n\t\ttitle: nameSplit.title,\n\t\timage: metaStat.image,\n\t\tgenre: metaStat.genre,\n\t\tmbAlbumID: metaStat.mbAlbumID,\n\t\tmbArtistID: metaStat.mbArtistID,\n\t\tyear: (nameSplit.year !== undefined) ? nameSplit.year : metaStat.year\n\t};\n\treturn tag;\n}\n\nfunction createTagsR(dir: MatchDir) {\n\tdir.directories.forEach(createTagsR);\n\tif (dir.folder) {\n\t\tdir.tag = createFolderTag(dir);\n\t}\n\tapplyFolderTagType(dir);\n}\n\nexport function fillMatchTags(dir: MatchDir) {\n\tcreateTagsR(dir);\n}\n","module.exports = require(\"limiter\");","import {DBObjectType} from '../../types';\nimport {Playlist} from './playlist.model';\nimport {Track} from '../track/track.model';\nimport {PlaylistStore, SearchQueryPlaylist} from './playlist.store';\nimport {TrackStore} from '../track/track.store';\nimport {BaseStoreService} from '../base/base.service';\n\nexport async function updatePlayListTracks(trackStore: TrackStore, playlist: Playlist): Promise<void> {\n\tconst tracks = await trackStore.byIds(playlist.trackIDs);\n\tconst trackHash: { [id: string]: Track } = {};\n\ttracks.forEach(track => {\n\t\ttrackHash[track.id] = track;\n\t});\n\tplaylist.trackIDs = playlist.trackIDs.filter(id => !!trackHash[id]);\n\tplaylist.duration = 0;\n\tplaylist.trackIDs.forEach(id => {\n\t\tconst track = trackHash[id];\n\t\tplaylist.duration += (track.media.duration || 0);\n\t});\n}\n\nexport class PlaylistService extends BaseStoreService<Playlist, SearchQueryPlaylist> {\n\n\tconstructor(public playlistStore: PlaylistStore, private trackStore: TrackStore) {\n\t\tsuper(playlistStore);\n\t}\n\n\tasync create(name: string, comment: string | undefined, isPublic: boolean, userID: string, trackIDs: Array<string>): Promise<Playlist> {\n\t\tconst now = Date.now();\n\t\tconst playlist: Playlist = {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.playlist,\n\t\t\tname: name,\n\t\t\tcomment: comment,\n\t\t\tisPublic: isPublic,\n\t\t\tuserID: userID,\n\t\t\tcreated: now,\n\t\t\tchanged: now,\n\t\t\ttrackIDs: trackIDs,\n\t\t\tduration: 0\n\t\t};\n\t\tawait updatePlayListTracks(this.trackStore, playlist);\n\t\tplaylist.id = await this.playlistStore.add(playlist);\n\t\treturn playlist;\n\t}\n\n\tasync update(playlist: Playlist): Promise<void> {\n\t\tawait updatePlayListTracks(this.trackStore, playlist);\n\t\tawait this.playlistStore.replace(playlist);\n\t}\n\n\tasync remove(playlist: Playlist): Promise<void> {\n\t\treturn this.playlistStore.remove(playlist.id);\n\t}\n}\n","module.exports = require(\"fluent-ffmpeg\");","import request from 'request';\nimport fs from 'fs';\nimport * as http from 'http';\n\nexport function downloadFile(url: string, filename: string): Promise<void> {\n\treturn new Promise<void>((resolve, reject) => {\n\t\trequest.get(url)\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\treject(err);\n\t\t\t})\n\t\t\t.on('complete', (res: { statusCode: number }) => {\n\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\treject(new Error(http.STATUS_CODES[res.statusCode]));\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.pipe(fs.createWriteStream(filename));\n\t});\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {formatTrackTag} from '../track/track.format';\nimport {Episode} from './episode.model';\n\nexport function formatEpisode(episode: Episode, includes: JamParameters.IncludesTrack, status: string): Jam.PodcastEpisode {\n\treturn {\n\t\tid: episode.id,\n\t\tparentID: '',\n\t\tcreated: episode.stat ? episode.stat.created : 0,\n\t\tpodcastID: episode.podcastID,\n\t\tstatus: status,\n\t\terrorMessage: episode.error,\n\t\tname: episode.name,\n\t\tduration: episode.media ? (episode.media.duration || -1) : -1,\n\t\tdate: episode.date,\n\t\tsummary: episode.summary,\n\t\tguid: episode.guid,\n\t\tauthor: episode.author,\n\t\tlink: episode.link,\n\t\tmedia: includes.trackMedia && episode.media ? {\n\t\t\tbitRate: episode.media.bitRate || -1,\n\t\t\tformat: episode.media.format || '',\n\t\t\tchannels: episode.media.channels || -1,\n\t\t\tsampleRate: episode.media.sampleRate || -1\n\t\t} : undefined,\n\t\ttag: includes.trackTag && episode.tag ? formatTrackTag(episode.tag) : undefined\n\t};\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {ArtistIndex, FolderIndex} from './index.model';\n\nexport function formatArtistIndex(index: ArtistIndex): Jam.ArtistIndex {\n\treturn {\n\t\tlastModified: index.lastModified,\n\t\tgroups: index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tentries: i.entries.map(e => {\n\t\t\t\treturn {\n\t\t\t\t\tname: e.artist.name,\n\t\t\t\t\ttrackCount: e.artist.trackIDs.length,\n\t\t\t\t\talbumCount: e.artist.albumIDs.length,\n\t\t\t\t\tartistID: e.artist.id\n\t\t\t\t};\n\t\t\t})\n\t\t}))\n\t};\n}\n\nexport function formatFolderIndex(index: FolderIndex): Jam.FolderIndex {\n\treturn {\n\t\tlastModified: index.lastModified,\n\t\tgroups: index.groups.map(i => ({\n\t\t\tname: i.name,\n\t\t\tentries: i.entries.map(e => {\n\t\t\t\treturn {\n\t\t\t\t\tname: e.name,\n\t\t\t\t\ttrackCount: e.trackCount,\n\t\t\t\t\tfolderID: e.folder.id\n\t\t\t\t};\n\t\t\t})\n\t\t}))\n\t};\n}\n","module.exports = require(\"cors\");","module.exports = require(\"express-session\");","import {OpenAPIObject, OperationObject, ParameterObject, RequestBodyObject, SchemaObject} from '../model/openapi-spec';\nimport express from 'express';\nimport Logger from './logger';\nimport {Definition} from 'typescript-json-schema';\nimport {validate} from './validate-json';\n\nconst log = Logger('CheckApiParameters');\n\nfunction validOAParameter(query: any, param: ParameterObject): string | null {\n\tif (!query) {\n\t\treturn 'Missing parameter collection ' + param.name;\n\t}\n\tconst schema = <SchemaObject> param.schema;\n\tlet value = query[param.name];\n\t// set default values\n\tif (value === undefined) {\n\t\tif (schema && schema.default !== undefined) {\n\t\t\tquery[param.name] = schema.default;\n\t\t\tvalue = schema.default;\n\t\t}\n\t}\n\t// check required\n\tif (value === undefined) {\n\t\tif (param.required) {\n\t\t\treturn 'Missing required parameter ' + param.name;\n\t\t}\n\t\treturn null;\n\t}\n\t// sanitize & check string parameter type\n\tif (schema.type === 'boolean') {\n\t\tif (['true', 'yes', '1'].indexOf(value.toString()) >= 0) {\n\t\t\tquery[param.name] = true;\n\t\t\tvalue = true;\n\t\t} else if (['false', 'no', '0'].indexOf(value.toString()) >= 0) {\n\t\t\tquery[param.name] = false;\n\t\t\tvalue = false;\n\t\t} else {\n\t\t\treturn 'Invalid boolean parameter ' + param.name;\n\t\t}\n\t\tquery[param.name] = value;\n\t} else if (['float', 'long', 'double', 'number', 'integer'].indexOf(schema.type || '') >= 0) {\n\t\tlet num = Number(value.toString());\n\t\tif (isNaN(num)) {\n\t\t\treturn 'Invalid number parameter ' + param.name;\n\t\t}\n\t\tif (schema.type === 'integer') {\n\t\t\tnum = Math.floor(num);\n\t\t}\n\t\tif (schema.minimum !== undefined && schema.minimum > num) {\n\t\t\treturn 'Invalid number parameter ' + param.name + '; minimum is ' + schema.minimum;\n\t\t}\n\t\tif (schema.maximum !== undefined && schema.maximum < num) {\n\t\t\treturn 'Invalid number parameter ' + param.name + '; maximum is ' + schema.maximum;\n\t\t}\n\t\tquery[param.name] = num;\n\t} else if (schema.type === 'string') {\n\t\tconst s = value.toString().trim();\n\t\t// if (s.length === 0) {\n\t\t// \treturn 'Empty string parameter ' + param.name;\n\t\t// }\n\t\tif (schema.enum) {\n\t\t\tif (schema.enum.indexOf(s) < 0) {\n\t\t\t\treturn 'Invalid enum string parameter ' + param.name + ': ' + s;\n\t\t\t}\n\t\t}\n\t\tquery[param.name] = s;\n\t} else if (schema.type === 'array') {\n\t\tconst items = <SchemaObject>(schema.items || {type: 'unknown'});\n\t\tif (items.type === 'string') {\n\t\t\tconst list = ((Array.isArray(value) ? value : [value]) || []).map(s => s.toString().trim());\n\t\t\tif (items.enum) {\n\t\t\t\tfor (let i = 0; i < list.length; i++) {\n\t\t\t\t\tconst s = list[i];\n\t\t\t\t\tif (items.enum.indexOf(s) < 0) {\n\t\t\t\t\t\treturn 'Invalid enum string parameter ' + param.name + ': ' + s;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tquery[param.name] = list;\n\t\t} else if (['float', 'long', 'double', 'number', 'integer'].indexOf(items.type || '') >= 0) {\n\t\t\tconst list = ((Array.isArray(value) ? value : [value]) || []).map(id => {\n\t\t\t\tlet num = Number(id.toString());\n\t\t\t\tif (items.type === 'integer') {\n\t\t\t\t\tnum = Math.floor(num);\n\t\t\t\t}\n\t\t\t\treturn num;\n\t\t\t});\n\t\t\tfor (let i = 0; i < list.length; i++) {\n\t\t\t\tconst num = list[i];\n\t\t\t\tif (isNaN(num)) {\n\t\t\t\t\treturn 'Invalid number array parameter ' + param.name;\n\t\t\t\t}\n\t\t\t\tif (items.minimum !== undefined && items.minimum > num) {\n\t\t\t\t\treturn 'Invalid number array parameter ' + param.name + '; minimum is ' + items.minimum;\n\t\t\t\t}\n\t\t\t\tif (schema.maximum !== undefined && schema.maximum < num) {\n\t\t\t\t\treturn 'Invalid number array parameter ' + items.name + '; maximum is ' + items.maximum;\n\t\t\t\t}\n\t\t\t}\n\t\t\tquery[param.name] = list;\n\t\t} else {\n\t\t\tconsole.log('TODO: validOAParameter list type', schema, value);\n\t\t}\n\t}\n\treturn null;\n}\n\nasync function checkAORequestBody(cmd: OperationObject, apiSchema: any, body: any): Promise<void> {\n\tif (!cmd.requestBody || !(<RequestBodyObject>cmd.requestBody).content || !(<RequestBodyObject>cmd.requestBody).content['application/json']) {\n\t\treturn;\n\t}\n\tif (!body) {\n\t\treturn Promise.reject(Error('Missing Request Body'));\n\t}\n\tconst schema = (<RequestBodyObject>cmd.requestBody).content['application/json'].schema;\n\tif (!schema || !schema.$ref) {\n\t\treturn Promise.reject(Error('Unimplemented POST schema'));\n\t}\n\tconst def = apiSchema.definitions[schema.$ref.split('/')[3]];\n\tif (!def) {\n\t\treturn Promise.reject(Error('Unknown POST schema' + schema.$ref));\n\t}\n\tconst result = await validate(body, def);\n\tif (result.errors.length > 0) {\n\t\tconsole.error(def, body, result.errors);\n\t\treturn Promise.reject(Error(JSON.stringify(result.errors)));\n\t}\n}\n\nasync function checkAOParameters(cmd: OperationObject, schema: Definition, req: express.Request): Promise<void> {\n\tif (!cmd.parameters) {\n\t\treturn;\n\t}\n\tlet error: string | null = null;\n\tcmd.parameters.find(param => {\n\t\tparam = <ParameterObject>param;\n\t\tif (param.in === 'query') {\n\t\t\terror = validOAParameter(req.query, param);\n\t\t} else if (param.in === 'path') {\n\t\t\terror = validOAParameter(req.params, param);\n\t\t} else if (param.in === 'header') {\n\t\t\terror = validOAParameter(req.headers, param);\n\t\t} else if (param.in === 'cookie') {\n\t\t\terror = validOAParameter(req.cookies, param);\n\t\t} else {\n\t\t\tlog.info('Invalid/Unknown parameter spec', param);\n\t\t}\n\t\treturn !!error;\n\t});\n\tif (error) {\n\t\treturn Promise.reject(Error(error));\n\t}\n}\n\nexport async function checkOpenApiParameters(name: string, req: express.Request, openapi: OpenAPIObject, schema: Definition, forceMethod?: string): Promise<void> {\n\tconst cmdPath = openapi.paths[name];\n\tif (!cmdPath) {\n\t\tlog.info('cmd not found to validate', name);\n\t\treturn;\n\t}\n\tconst method = forceMethod || req.method.toLowerCase();\n\tconst cmd = cmdPath[method];\n\tif (!cmd) {\n\t\tlog.info('cmd method ' + req.method + ' not found to validate', req.path);\n\t\treturn;\n\t}\n\tif (method === 'get') {\n\t\tawait checkAOParameters(cmd, schema, req);\n\t} else {\n\t\tawait checkAORequestBody(cmd, schema, req.body);\n\t}\n}\n","\nexport function hexEncode(n: string): string {\n\tconst i: Array<string> = [];\n\tconst r: Array<string> = [];\n\tconst u = '0123456789abcdef';\n\tfor (let t = 0; t < 256; t++) {\n\t\t/* tslint:disable */\n\t\ti[t] = u.charAt(t >> 4) + u.charAt(t & 15);\n\t\t/* tslint:enable */\n\t}\n\tfor (let t = 0; t < n.length; t++) {\n\t\tr[t] = i[n.charCodeAt(t)];\n\t}\n\treturn r.join('');\n}\n\nexport function hexDecode(hex: string): string {\n\tlet str = '';\n\tfor (let i = 0; i < hex.length; i += 2) {\n\t\tstr += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n\t}\n\treturn str.trim();\n}\n","import {Engine} from './engine/engine';\nimport {configureLogger} from './utils/logger';\nimport {Server} from './api/server';\nimport {loadConfig} from './config';\nimport {Store} from './engine/store/store';\nimport {DBElastic} from './db/elasticsearch/db-elastic';\nimport {DBNedb} from './db/nedb/db-nedb';\nimport {Database} from './db/db.model';\n\nconst config = loadConfig();\n\nconfigureLogger(config.log.level);\n\nlet db: Database;\nif (config.database.use === 'elasticsearch') {\n\tdb = new DBElastic(config.database.options.elasticsearch);\n} else {\n\tdb = new DBNedb(config.getDataPath(['nedb']));\n}\nconst store = new Store(db);\nconst engine = new Engine(config, store);\nconst server = new Server(engine);\n\nasync function run(): Promise<void> {\n\ttry {\n\t\tawait engine.start();\n\t\tawait server.start();\n\t} catch (e) {\n\t\tconsole.error('Error on startup', e);\n\t\treturn;\n\t}\n\ttry {\n\t\tawait engine.ioService.refresh();\n\t} catch (e) {\n\t\tconsole.error('Error on startup refresh', e);\n\t}\n}\n\nasync function stop(): Promise<void> {\n\ttry {\n\t\tawait server.stop();\n\t\tawait engine.stop();\n\t\tprocess.exit();\n\t} catch (e) {\n\t\tconsole.error('Error on startdown', e);\n\t\tprocess.exit(1);\n\t}\n}\n\nasync function runClearDB(): Promise<void> {\n\tawait engine.store.open();\n\tawait engine.store.reset();\n\tawait engine.store.close();\n}\n\nif (process.argv.indexOf('--cleardb') > 0) {\n\trunClearDB().then(() => {\n\t\tconsole.log('done.');\n\t}).catch(e => {\n\t\tconsole.error(e);\n\t});\n} else {\n\n\tprocess.on('SIGTERM', () => {\n\t\tstop();\n\t});\n\n\trun();\n}\n\n","import path from 'path';\nimport fse from 'fs-extra';\nimport {IoService} from './io/io.service';\nimport {Store} from './store/store';\nimport {AudioModule} from '../modules/audio/audio.module';\nimport {DBObjectType} from '../types';\nimport {IndexService} from './index/index.service';\nimport {MetaDataService} from './metadata/metadata.service';\nimport {UserService} from '../objects/user/user.service';\nimport {ChatService} from './chat/chat.service';\nimport {GenreService} from './genre/genre.service';\nimport {PodcastService} from '../objects/podcast/podcast.service';\nimport {NowPlayingService} from './nowplaying/nowplaying.service';\nimport {RootService} from '../objects/root/root.service';\nimport {PlaylistService} from '../objects/playlist/playlist.service';\nimport {PlayQueueService} from '../objects/playqueue/playqueue.service';\nimport {Config} from '../config';\nimport {WaveformService} from './waveform/waveform.service';\nimport {StreamService} from './stream/stream.service';\nimport {BookmarkService} from '../objects/bookmark/bookmark.service';\nimport {StateService} from '../objects/state/state.service';\nimport {ImageService} from './image/image.service';\nimport {DownloadService} from './download/download.service';\nimport {User} from '../objects/user/user.model';\nimport {Root} from '../objects/root/root.model';\nimport {RadioService} from '../objects/radio/radio.service';\nimport {FolderService} from '../objects/folder/folder.service';\nimport {ImageModule} from '../modules/image/image.module';\nimport {TrackService} from '../objects/track/track.service';\nimport {ArtistService} from '../objects/artist/artist.service';\nimport {AlbumService} from '../objects/album/album.service';\nimport {EpisodeService} from '../objects/episode/episode.service';\nimport {ThirdPartyConfig} from '../config/thirdparty.config';\n\nexport class Engine {\n\tpublic ioService: IoService;\n\tpublic audioModule: AudioModule;\n\tpublic imageModule: ImageModule;\n\tpublic waveformService: WaveformService;\n\tpublic metaDataService: MetaDataService;\n\tpublic indexService: IndexService;\n\tpublic userService: UserService;\n\tpublic rootService: RootService;\n\tpublic chatService: ChatService;\n\tpublic genreService: GenreService;\n\tpublic playQueueService: PlayQueueService;\n\tpublic podcastService: PodcastService;\n\tpublic episodeService: EpisodeService;\n\tpublic playlistService: PlaylistService;\n\tpublic nowPlayingService: NowPlayingService;\n\tpublic streamService: StreamService;\n\tpublic bookmarkService: BookmarkService;\n\tpublic stateService: StateService;\n\tpublic imageService: ImageService;\n\tpublic downloadService: DownloadService;\n\tpublic radioService: RadioService;\n\tpublic folderService: FolderService;\n\tpublic trackService: TrackService;\n\tpublic artistService: ArtistService;\n\tpublic albumService: AlbumService;\n\n\tconstructor(public config: Config, public store: Store) {\n\t\tthis.audioModule = new AudioModule(ThirdPartyConfig);\n\t\tthis.waveformService = new WaveformService(config.getDataPath(['cache', 'waveforms']));\n\t\tthis.imageModule = new ImageModule(config.getDataPath(['cache', 'images']));\n\t\tthis.stateService = new StateService(this.store.stateStore);\n\t\tthis.folderService = new FolderService(this.store.folderStore, this.store.trackStore, this.stateService, this.imageModule);\n\t\tthis.trackService = new TrackService(this.store.trackStore, this.folderService, this.stateService);\n\t\tthis.artistService = new ArtistService(this.store.artistStore, this.store.trackStore, this.folderService, this.stateService);\n\t\tthis.albumService = new AlbumService(this.store.albumStore, this.store.trackStore, this.folderService, this.stateService);\n\t\tthis.userService = new UserService(this.config.getDataPath(['images']), this.store.userStore, this.store.stateStore, this.store.playlistStore,\n\t\t\tthis.store.bookmarkStore, this.store.playQueueStore, this.imageModule);\n\t\tthis.imageService = new ImageService(this.imageModule, this.trackService, this.folderService, this.artistService, this.albumService, this.userService);\n\t\tthis.genreService = new GenreService(this.store.trackStore);\n\t\tthis.indexService = new IndexService(config.app.index, this.store.artistStore, this.store.folderStore, this.store.trackStore);\n\t\tthis.ioService = new IoService(this.store, this.audioModule, this.imageModule, this.waveformService, this.indexService, this.genreService);\n\t\tthis.downloadService = new DownloadService(this.store.trackStore);\n\t\tthis.chatService = new ChatService(config.app.chat);\n\t\tthis.nowPlayingService = new NowPlayingService(this.stateService);\n\t\tthis.streamService = new StreamService();\n\t\tthis.playlistService = new PlaylistService(this.store.playlistStore, this.store.trackStore);\n\t\tthis.playQueueService = new PlayQueueService(this.store.playQueueStore);\n\t\tthis.bookmarkService = new BookmarkService(this.store.bookmarkStore);\n\t\tthis.episodeService = new EpisodeService(config.getDataPath(['podcasts']), this.store.episodeStore, this.audioModule);\n\t\tthis.podcastService = new PodcastService(this.store.podcastStore, this.episodeService);\n\t\tthis.metaDataService = new MetaDataService(this.store.folderStore, this.store.trackStore, this.store.albumStore, this.store.artistStore, this.audioModule);\n\t\tthis.rootService = new RootService(this.store.rootStore);\n\t\tthis.radioService = new RadioService(this.store.radioStore);\n\t}\n\n\tprivate async checkFirstStart(): Promise<void> {\n\t\tif (!this.config.firstStart) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.config.firstStart.adminUser) {\n\t\t\tconst count = await this.store.userStore.count();\n\t\t\tif (count === 0) {\n\t\t\t\tconst adminUser = this.config.firstStart.adminUser;\n\t\t\t\tconst user: User = {\n\t\t\t\t\tid: '',\n\t\t\t\t\tname: adminUser.name,\n\t\t\t\t\tpass: adminUser.pass || '',\n\t\t\t\t\temail: adminUser.mail || '',\n\t\t\t\t\ttype: DBObjectType.user,\n\t\t\t\t\t// ldapAuthenticated: true,\n\t\t\t\t\tscrobblingEnabled: true,\n\t\t\t\t\tcreated: Date.now(),\n\t\t\t\t\troles: {\n\t\t\t\t\t\tstreamRole: true,\n\t\t\t\t\t\tuploadRole: true,\n\t\t\t\t\t\tadminRole: true,\n\t\t\t\t\t\tpodcastRole: true,\n\t\t\t\t\t\t// coverArtRole: true,\n\t\t\t\t\t\t// settingsRole: true,\n\t\t\t\t\t\t// downloadRole: true,\n\t\t\t\t\t\t// playlistRole: true,\n\t\t\t\t\t\t// commentRole: true,\n\t\t\t\t\t\t// jukeboxRole: true,\n\t\t\t\t\t\t// videoConversionRole: true,\n\t\t\t\t\t\t// shareRole: true\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tawait this.userService.create(user);\n\t\t\t}\n\t\t}\n\t\tif (this.config.firstStart.roots) {\n\t\t\tconst count = await this.store.rootStore.count();\n\t\t\tif (count === 0) {\n\t\t\t\tconst firstStartRoots = this.config.firstStart.roots;\n\t\t\t\tfor (const first of firstStartRoots) {\n\t\t\t\t\tconst root: Root = {\n\t\t\t\t\t\tid: '',\n\t\t\t\t\t\tcreated: Date.now(),\n\t\t\t\t\t\ttype: DBObjectType.root,\n\t\t\t\t\t\tname: first.name,\n\t\t\t\t\t\tpath: first.path\n\t\t\t\t\t};\n\t\t\t\t\tawait this.store.rootStore.add(root);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkDataPaths(): Promise<void> {\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data));\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data, 'cache', 'waveforms'));\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data, 'cache', 'uploads'));\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data, 'cache', 'images'));\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data, 'images'));\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data, 'session'));\n\t\tawait fse.ensureDir(path.resolve(this.config.paths.data, 'podcasts'));\n\t}\n\n\tasync start(): Promise<void> {\n\t\t// check paths\n\t\tawait this.checkDataPaths();\n\t\t// open store\n\t\tawait this.store.open();\n\t\t// first start?\n\t\tawait this.checkFirstStart();\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tawait this.store.close();\n\t}\n\n\n}\n\n","import {Store} from '../store/store';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport Logger from '../../utils/logger';\nimport {ScanDir, scanDir} from './components/scan';\nimport {MatchDir, matchDir} from './components/match';\nimport {MergeChanges, Merger} from './components/merge';\nimport {MetaMerge} from './components/meta';\nimport {clearID3, scanForRemoved} from './components/clean';\nimport {Subsonic} from '../../model/subsonic-rest-data';\nimport {WaveformService} from '../waveform/waveform.service';\nimport {Root, RootStatus} from '../../objects/root/root.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {Track} from '../../objects/track/track.model';\nimport {IndexService} from '../index/index.service';\nimport {GenreService} from '../genre/genre.service';\nimport {ImageModule} from '../../modules/image/image.module';\n\nconst log = Logger('IO');\n\n/*\n \tProcessing:\n\n \t* read folders and ile stats into tree\n \t* merge tree into db\n \t* merge Album and Artist meta data\n \t* clean db\n\n */\n\n/**\n * Handles file access/reading/writing\n */\n\nexport class IoService {\n\tpublic scanning = false;\n\tprivate scanningCount: undefined | number;\n\tprivate rootstatus: { [id: string]: RootStatus } = {};\n\n\tconstructor(private store: Store, private audioModule: AudioModule, private imageModule: ImageModule, private waveformService: WaveformService, private indexService: IndexService, private genreService: GenreService) {\n\t}\n\n\tprivate async scanDir(dir: string, parent: Folder | undefined, level: number, rootID: string, changes: MergeChanges): Promise<Folder | undefined> {\n\t\tconst scan: ScanDir = await scanDir(dir);\n\t\tconst match: MatchDir = await matchDir(scan, this.store, rootID);\n\t\tif (parent) {\n\t\t\tmatch.parent = {name: parent.path, folder: parent, level, rootID: rootID, files: [], directories: [match], removedFolders: [], removedTracks: [], stat: {mtime: 0, ctime: 0}};\n\t\t}\n\t\tconst merger = new Merger(rootID, this.store, this.audioModule, (count: number) => {\n\t\t\tthis.scanningCount = count;\n\t\t});\n\t\tawait await merger.merge(match, changes);\n\t\treturn match.folder;\n\t}\n\n\tgetScanStatus(): Subsonic.ScanStatus {\n\t\treturn {scanning: this.scanning, count: this.scanningCount};\n\t}\n\n\tgetRootStatus(id: string): RootStatus {\n\t\treturn this.rootstatus[id];\n\t}\n\n\tprivate startScanning(): MergeChanges {\n\t\tthis.scanningCount = 0;\n\t\tthis.scanning = true;\n\t\treturn {\n\t\t\tnewTracks: [],\n\t\t\tunchangedTracks: [],\n\t\t\tunchangedFolders: [],\n\t\t\tremovedTracks: [],\n\t\t\tupdateTracks: [],\n\t\t\tnewFolders: [],\n\t\t\tremovedFolders: [],\n\t\t\tupdateFolders: []\n\t\t};\n\t}\n\n\tprivate async stopScanning(changes: MergeChanges): Promise<void> {\n\t\tthis.scanning = false;\n\t\tthis.scanningCount = undefined;\n\t\tawait this.cleanScanStore(changes);\n\t}\n\n\tasync cleanStore(): Promise<void> {\n\t\tconst changes: MergeChanges = {\n\t\t\tnewTracks: [],\n\t\t\tunchangedTracks: [],\n\t\t\tremovedTracks: [],\n\t\t\tupdateTracks: [],\n\t\t\tnewFolders: [],\n\t\t\tunchangedFolders: [],\n\t\t\tremovedFolders: [],\n\t\t\tupdateFolders: []\n\t\t};\n\t\tawait this.cleanScanStore(changes);\n\t}\n\n\tprivate async cleanScanStore(changes: MergeChanges): Promise<void> {\n\t\tconst {removeTracks, removeFolders} = await scanForRemoved(this.store, changes);\n\t\tconst trackIDs = await this.store.cleanStore(removeTracks, removeFolders);\n\t\tawait this.imageModule.clearImageCacheByIDs(trackIDs);\n\t\tawait this.waveformService.clearWaveformCacheByIDs(trackIDs);\n\t\tawait clearID3(this.store, this.imageModule, removeTracks);\n\t\tconst meta = new MetaMerge(this.store);\n\t\tawait meta.sync(changes);\n\t\tawait clearID3(this.store, this.imageModule, changes.removedTracks);\n\t\tlog.info('New Tracks', changes.newTracks.length);\n\t\tlog.info('New Folders', changes.newFolders.length);\n\t\tlog.info('Update Tracks', changes.updateTracks.length);\n\t\tlog.info('Update Folders', changes.updateFolders.length);\n\t\tlog.info('Remove Tracks', changes.removedTracks.length);\n\t\tlog.info('Remove Folders', changes.removedFolders.length);\n\t}\n\n\tasync rescanFolder(folder: Folder): Promise<void> {\n\t\tif (this.scanning) {\n\t\t\treturn;\n\t\t}\n\t\tconst changes = this.startScanning();\n\t\tlog.info('Start Scanning Folder', folder.path);\n\t\tif (!folder.parentID || folder.parentID.length === 0) {\n\t\t\tawait this.scanDir(folder.path, undefined, 0, folder.rootID, changes);\n\t\t} else {\n\t\t\tconst parent = await this.store.folderStore.byId(folder.parentID);\n\t\t\tif (parent) {\n\t\t\t\tawait this.scanDir(folder.path, parent, parent.tag.level, folder.rootID, changes);\n\t\t\t}\n\t\t\t// TODO update all parent folder tags until root\n\t\t}\n\t\tawait this.stopScanning(changes);\n\t\tlog.info('Stop Scanning Folder', folder.path);\n\t}\n\n\tprivate async scanRoot(root: Root, changes: MergeChanges): Promise<void> {\n\t\tlog.info('Scanning Root', root.path);\n\t\tthis.rootstatus[root.id] = {lastScan: Date.now(), scanning: true};\n\t\ttry {\n\t\t\tawait this.scanDir(root.path, undefined, 0, root.id, changes);\n\t\t\tthis.rootstatus[root.id] = {lastScan: Date.now()};\n\t\t} catch (e) {\n\t\t\tlog.error('Scanning Error', root.path, e.toString());\n\t\t\tif (['EACCES', 'ENOENT'].indexOf((<any>e).code) >= 0) {\n\t\t\t\tthis.rootstatus[root.id] = {lastScan: Date.now(), error: 'Directory not found/no access/error in filesystem'};\n\t\t\t} else {\n\t\t\t\tthis.rootstatus[root.id] = {lastScan: Date.now(), error: e.toString()};\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async rescanRoot(root: Root): Promise<void> {\n\t\tif (this.scanning) {\n\t\t\treturn;\n\t\t}\n\t\tlog.info('Start Scanning Root', root.name);\n\t\tconst changes = this.startScanning();\n\t\tawait this.scanRoot(root, changes);\n\t\tlog.info('Stop Scanning Root', root.name);\n\t\tawait this.stopScanning(changes);\n\t}\n\n\tprivate async refreshInternal(): Promise<void> {\n\t\tif (this.scanning) {\n\t\t\treturn;\n\t\t}\n\t\tlog.info('Start Scanning');\n\t\tconst changes = this.startScanning();\n\t\tconst roots = await this.store.rootStore.all();\n\t\tfor (const root of roots) {\n\t\t\tawait this.scanRoot(root, changes);\n\t\t}\n\t\tlog.info('Stop Scanning');\n\t\tawait this.stopScanning(changes);\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tawait this.refreshInternal();\n\t\tawait this.indexService.buildIndexes();\n\t\tawait this.genreService.refresh();\n\t}\n\n\tasync refreshTracks(tracks: Array<Track>): Promise<void> {\n\t\t// TODO: rescan tracks only, not the whole thing\n\t\tawait this.refresh();\n\t\t// await this.rescanTracks(tracks);\n\t\tawait this.indexService.buildIndexes();\n\t\tawait this.genreService.refresh();\n\t}\n\n\tasync refreshRoot(root: Root): Promise<void> {\n\t\tawait this.rescanRoot(root);\n\t\tawait this.indexService.buildIndexes();\n\t\tawait this.genreService.refresh();\n\t}\n\n\tasync clean(): Promise<void> {\n\t\tawait this.cleanStore();\n\t\tawait this.indexService.buildIndexes();\n\t\tawait this.genreService.refresh();\n\t}\n\n}\n","module.exports = require(\"winston\");","module.exports = require(\"winston-timer\");","import {FileTyp} from '../../../types';\nimport path from 'path';\nimport {getFileType} from '../../../utils/filetype';\nimport Logger from '../../../utils/logger';\nimport fse from 'fs-extra';\n\nconst log = Logger('IO.scan');\n\nexport interface ScanDir {\n\tname: string;\n\tstat: {\n\t\tctime: number,\n\t\tmtime: number,\n\t};\n\tdirectories: Array<ScanDir>;\n\tfiles: Array<ScanFile>;\n}\n\nexport interface ScanFile {\n\tname: string;\n\ttype: FileTyp;\n\tstat: {\n\t\tctime: number,\n\t\tmtime: number,\n\t\tsize: number\n\t};\n}\n\nasync function scanDirR(dir: string, stat: fse.Stats): Promise<ScanDir> {\n\tlog.debug('Scanning Directory', dir);\n\tconst result: ScanDir = {\n\t\tname: dir,\n\t\tstat: {\n\t\t\tctime: stat.ctime.valueOf(),\n\t\t\tmtime: stat.mtime.valueOf()\n\t\t},\n\t\tdirectories: [],\n\t\tfiles: []\n\t};\n\tconst folders: Array<{ dir: string, stat: fse.Stats }> = [];\n\tconst list = await fse.readdir(dir);\n\tfor (const filename of list) {\n\t\tif (filename[0] !== '.') {\n\t\t\tconst sub = path.join(dir, filename);\n\t\t\tconst subStat = await fse.stat(sub);\n\t\t\tif (subStat.isDirectory()) {\n\t\t\t\tfolders.push({dir: sub, stat: subStat});\n\t\t\t} else {\n\t\t\t\tconst file: ScanFile = {\n\t\t\t\t\tname: sub,\n\t\t\t\t\ttype: getFileType(sub),\n\t\t\t\t\tstat: {\n\t\t\t\t\t\tctime: subStat.ctime.valueOf(),\n\t\t\t\t\t\tmtime: subStat.mtime.valueOf(),\n\t\t\t\t\t\tsize: subStat.size\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tresult.files.push(file);\n\t\t\t}\n\t\t}\n\t}\n\tfor (const folder of folders) {\n\t\tconst sub = await scanDirR(folder.dir, folder.stat);\n\t\tresult.directories.push(sub);\n\t}\n\treturn result;\n}\n\nexport async function scanDir(dir: string): Promise<ScanDir> {\n\tconst stat = await fse.stat(dir);\n\treturn scanDirR(dir, stat);\n}\n","import {Store} from '../../store/store';\nimport {ScanDir, ScanFile} from './scan';\nimport path from 'path';\nimport Logger from '../../../utils/logger';\nimport {Folder, FolderTag} from '../../../objects/folder/folder.model';\nimport {Track} from '../../../objects/track/track.model';\n\nconst log = Logger('IO.match');\n\nexport interface MatchDir extends ScanDir {\n\tlevel: number;\n\trootID: string;\n\ttag?: FolderTag;\n\tparent?: MatchDir;\n\tfolder?: Folder;\n\tfiles: Array<MatchFile>;\n\tdirectories: Array<MatchDir>;\n\tremovedTracks: Array<Track>;\n\tremovedFolders: Array<Folder>;\n}\n\nexport interface MatchFile extends ScanFile {\n\ttrack?: Track;\n}\n\nexport async function matchDir(dir: ScanDir, store: Store, rootID: string): Promise<MatchDir> {\n\tconst result: MatchDir = clone(dir, undefined, 0, rootID);\n\tresult.folder = await store.folderStore.searchOne({path: dir.name});\n\tawait matchDirR(result, store);\n\treturn result;\n}\n\nfunction clone(dir: ScanDir, parent: MatchDir | undefined, level: number, rootID: string): MatchDir {\n\tconst result: MatchDir = {\n\t\trootID,\n\t\tparent,\n\t\tlevel,\n\t\tname: dir.name,\n\t\tstat: dir.stat,\n\t\tfolder: undefined,\n\t\tfiles: dir.files.map(file => {\n\t\t\treturn {name: file.name, type: file.type, stat: file.stat};\n\t\t}),\n\t\tdirectories: [],\n\t\tremovedTracks: [],\n\t\tremovedFolders: []\n\t};\n\tresult.directories = dir.directories.map(sub => clone(sub, result, level + 1, rootID));\n\treturn result;\n}\n\nasync function matchDirR(dir: MatchDir, store: Store): Promise<void> {\n\tlog.debug('Matching Directory', dir.name);\n\tconst tracks = await store.trackStore.search({path: dir.name});\n\ttracks.forEach(track => {\n\t\tconst filename = path.join(track.path, track.name);\n\t\tconst file = dir.files.find(f => f.name === filename);\n\t\tif (file) {\n\t\t\tfile.track = track;\n\t\t} else {\n\t\t\tdir.removedTracks.push(track);\n\t\t}\n\t});\n\tif (dir.folder) {\n\t\tconst folders = await store.folderStore.search({parentID: dir.folder.id});\n\t\tfor (const subFolder of folders) {\n\t\t\tconst subDir = dir.directories.find(sd => sd.name === subFolder.path);\n\t\t\tif (!subDir) {\n\t\t\t\tdir.removedFolders.push(subFolder);\n\t\t\t} else {\n\t\t\t\tsubDir.folder = subFolder;\n\t\t\t\tawait matchDirR(subDir, store);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {Store} from '../../store/store';\nimport {MatchDir, MatchFile} from './match';\nimport {DBObjectType, FileTyp, FolderType} from '../../../types';\nimport path from 'path';\nimport {AudioModule} from '../../../modules/audio/audio.module';\nimport {deepCompare} from '../../../utils/deep-compare';\nimport Logger from '../../../utils/logger';\nimport {fillMatchTags} from './tag';\nimport {Track} from '../../../objects/track/track.model';\nimport {Folder} from '../../../objects/folder/folder.model';\nimport {ensureTrailingPathSeparator} from '../../../utils/fs-utils';\n\nconst log = Logger('IO.merge');\n\nexport interface MergeTrackInfo {\n\ttrack: Track;\n\tdir: MatchDir;\n}\n\nexport interface MergeChanges {\n\tnewTracks: Array<MergeTrackInfo>;\n\tunchangedTracks: Array<MergeTrackInfo>;\n\tremovedTracks: Array<Track>;\n\tupdateTracks: Array<MergeTrackInfo>;\n\tnewFolders: Array<Folder>;\n\tunchangedFolders: Array<Folder>;\n\tremovedFolders: Array<Folder>;\n\tupdateFolders: Array<Folder>;\n}\n\nexport class Merger {\n\tscanningCount = 0;\n\n\tconstructor(private rootID: string, private store: Store, private audio: AudioModule, private onProgress: (count: number) => void) {\n\t}\n\n\tprivate static folderHasChanged(dir: MatchDir): boolean {\n\t\treturn (!dir.folder) ||\n\t\t\t(dir.stat.mtime !== dir.folder.stat.modified) ||\n\t\t\t(dir.stat.ctime !== dir.folder.stat.created) ||\n\t\t\t(!deepCompare(dir.folder.tag, dir.tag));\n\t}\n\n\tprivate static trackHasChanged(file: MatchFile): boolean {\n\t\treturn (!file.track) ||\n\t\t\t(file.stat.mtime !== file.track.stat.modified) ||\n\t\t\t(file.stat.ctime !== file.track.stat.created) ||\n\t\t\t(file.stat.size !== file.track.stat.size);\n\t}\n\n\tprivate async newFolder(dir: MatchDir): Promise<Folder> {\n\t\tlog.info('New Folder', dir.name);\n\t\tconst folder: Folder = {\n\t\t\tid: '',\n\t\t\trootID: dir.rootID,\n\t\t\tpath: ensureTrailingPathSeparator(dir.name),\n\t\t\tparentID: (dir.parent && dir.parent.folder ? dir.parent.folder.id : undefined),\n\t\t\tstat: {\n\t\t\t\tcreated: dir.stat.ctime,\n\t\t\t\tmodified: dir.stat.mtime\n\t\t\t},\n\t\t\ttag: dir.tag || {tracks: 0, level: -1, type: FolderType.unknown},\n\t\t\ttype: DBObjectType.folder\n\t\t};\n\t\tfolder.id = await this.store.folderStore.add(folder);\n\t\tdir.folder = folder;\n\t\treturn folder;\n\t}\n\n\tprivate async updateFolder(dir: MatchDir): Promise<Folder | undefined> {\n\t\tconst old = dir.folder;\n\t\tif (!old) {\n\t\t\treturn;\n\t\t}\n\t\tlog.info('Update Folder', dir.name);\n\t\tconst folder: Folder = {\n\t\t\tid: old.id,\n\t\t\trootID: dir.rootID,\n\t\t\tpath: ensureTrailingPathSeparator(dir.name),\n\t\t\tparentID: (dir.parent && dir.parent.folder ? dir.parent.folder.id : undefined),\n\t\t\tstat: {\n\t\t\t\tcreated: dir.stat.ctime,\n\t\t\t\tmodified: dir.stat.mtime\n\t\t\t},\n\t\t\ttag: dir.tag || {tracks: 0, level: dir.level, type: FolderType.unknown},\n\t\t\ttype: DBObjectType.folder,\n\t\t\tinfo: old.info\n\t\t};\n\t\tawait this.store.folderStore.replace(folder);\n\t\treturn folder;\n\t}\n\n\tprivate async buildTrack(file: MatchFile, parent: Folder): Promise<Track> {\n\t\tthis.scanningCount++;\n\t\tthis.onProgress(this.scanningCount);\n\t\tconst data = await this.audio.read(file.name);\n\t\treturn {\n\t\t\tid: '',\n\t\t\trootID: this.rootID,\n\t\t\talbumID: '',\n\t\t\tartistID: '',\n\t\t\tparentID: (parent ? parent.id : ''),\n\t\t\tname: path.basename(file.name),\n\t\t\tpath: path.dirname(file.name),\n\t\t\tstat: {\n\t\t\t\tcreated: file.stat.ctime,\n\t\t\t\tmodified: file.stat.mtime,\n\t\t\t\tsize: file.stat.size\n\t\t\t},\n\t\t\tmedia: data.media || {},\n\t\t\ttag: data.tag || {},\n\t\t\ttype: DBObjectType.track\n\t\t};\n\t}\n\n\tprivate async newTrack(file: MatchFile, parent: Folder): Promise<Track> {\n\t\tlog.info('New Track', file.name);\n\t\tconst track = await this.buildTrack(file, parent);\n\t\ttrack.id = await this.store.trackStore.add(track);\n\t\treturn track;\n\t}\n\n\tprivate async updateTrack(file: MatchFile, parent: Folder): Promise<Track | undefined> {\n\t\tlog.info('Update Track', file.name);\n\t\tconst old = file.track;\n\t\tif (!old) {\n\t\t\treturn;\n\t\t}\n\t\tconst track = await this.buildTrack(file, parent);\n\t\ttrack.id = old.id;\n\t\ttrack.info = old.info;\n\t\tawait this.store.trackStore.replace(track);\n\t\treturn track;\n\t}\n\n\tprivate async compareFile(file: MatchFile, dir: MatchDir, changes: MergeChanges, parent: Folder | undefined): Promise<void> {\n\t\tif (file.type !== FileTyp.AUDIO || !parent) {\n\t\t\treturn;\n\t\t}\n\t\tif (!file.track) {\n\t\t\tconst track = await this.newTrack(file, parent);\n\t\t\tfile.track = track;\n\t\t\tchanges.newTracks.push({track, dir});\n\t\t} else if (Merger.trackHasChanged(file)) {\n\t\t\tconst track = await this.updateTrack(file, parent);\n\t\t\tif (track) {\n\t\t\t\tfile.track = track;\n\t\t\t\tchanges.updateTracks.push({track, dir});\n\t\t\t}\n\t\t} else {\n\t\t\tchanges.unchangedTracks.push({track: file.track, dir});\n\t\t}\n\t}\n\n\tprivate async compareSubs(dir: MatchDir, changes: MergeChanges): Promise<void> {\n\t\tfor (const sub of dir.directories) {\n\t\t\tawait this.compareFilesR(sub, changes);\n\t\t}\n\t\tfor (const file of dir.files) {\n\t\t\tawait this.compareFile(file, dir, changes, dir.folder);\n\t\t}\n\t}\n\n\tprivate async compareFilesR(dir: MatchDir, changes: MergeChanges): Promise<void> {\n\t\tlog.debug('Compare Directory', dir.name);\n\t\tdir.removedFolders.forEach(folder => {\n\t\t\tchanges.removedFolders.push(folder);\n\t\t});\n\t\tdir.removedTracks.forEach(track => {\n\t\t\tchanges.removedTracks.push(track);\n\t\t});\n\t\tif (!dir.folder) {\n\t\t\tconst folder = await this.newFolder(dir);\n\t\t\tchanges.newFolders.push(folder);\n\t\t}\n\t\tawait this.compareSubs(dir, changes);\n\t}\n\n\tprivate async compareFoldersR(dir: MatchDir, changes: MergeChanges): Promise<void> {\n\t\tif (dir.folder) {\n\t\t\tif (Merger.folderHasChanged(dir)) {\n\t\t\t\tconst data = await this.updateFolder(dir);\n\t\t\t\tif (data) {\n\t\t\t\t\tchanges.updateFolders.push(data);\n\t\t\t\t\tdir.folder = data;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tchanges.unchangedFolders.push(dir.folder);\n\t\t\t}\n\t\t\tfor (const d of dir.directories) {\n\t\t\t\tawait this.compareFoldersR(d, changes);\n\t\t\t}\n\t\t} else {\n\t\t\treturn Promise.reject(Error('db entry must exists to compare ' + dir.name));\n\t\t}\n\t}\n\n\tasync merge(dir: MatchDir, changes: MergeChanges): Promise<void> {\n\t\tawait this.compareFilesR(dir, changes);\n\t\tfillMatchTags(dir);\n\t\tawait this.compareFoldersR(dir, changes);\n\t}\n}\n","export function deepCompare(a: any, b: any, ignore?: Array<string>): boolean {\n\tconst ignoreList: Array<string> = ignore || [];\n\tconst compare = (oa: any, ob: any) => {\n\t\tif (a === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tif (b === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof oa === 'object') {\n\t\t\tif (!deepCompare(oa, ob, ignore)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (oa !== ob) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\tif (a === undefined) {\n\t\treturn false;\n\t}\n\tif (b === undefined) {\n\t\treturn false;\n\t}\n\tlet key;\n\tfor (key in a) {\n\t\tif (a.hasOwnProperty(key) && ignoreList.indexOf(key) < 0) {\n\t\t\tif (!compare(a[key], b[key])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tfor (key in b) {\n\t\tif (b.hasOwnProperty(key) && ignoreList.indexOf(key) < 0) {\n\t\t\tif (!compare(a[key], b[key])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n","import {AlbumType, DBObjectType} from '../../../types';\nimport {Store} from '../../store/store';\nimport Logger from '../../../utils/logger';\nimport {MergeChanges, MergeTrackInfo} from './merge';\nimport {cUnknownAlbum, cUnknownArtist} from './tag';\nimport {Artist} from '../../../objects/artist/artist.model';\nimport {Track} from '../../../objects/track/track.model';\nimport {Album} from '../../../objects/album/album.model';\n\nconst log = Logger('IO.meta');\n\nexport class MetaMerge {\n\n\tconstructor(private store: Store) {\n\t}\n\n\tprivate static getArtistMBArtistID(trackInfo: MergeTrackInfo): string | undefined {\n\t\tif (trackInfo.dir.folder && trackInfo.dir.folder.tag.albumType === AlbumType.mix) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn trackInfo.track.tag.mbAlbumArtistID || trackInfo.track.tag.mbArtistID;\n\t\t}\n\t}\n\n\tprivate static getArtistNameSort(trackInfo: MergeTrackInfo): string | undefined {\n\t\tif (trackInfo.dir.folder && trackInfo.dir.folder.tag.albumType === AlbumType.mix) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn trackInfo.track.tag.artistSort;\n\t\t}\n\t}\n\n\tprivate static getArtistName(trackInfo: MergeTrackInfo): string {\n\t\tif (trackInfo.dir.folder && trackInfo.dir.folder.tag.albumType === AlbumType.mix) {\n\t\t\treturn trackInfo.dir.folder.tag.artist || cUnknownArtist;\n\t\t} else {\n\t\t\treturn trackInfo.track.tag.albumArtist || trackInfo.track.tag.artist || cUnknownArtist;\n\t\t}\n\t}\n\n\tprivate static getAlbumName(trackInfo: MergeTrackInfo): string {\n\t\tif (trackInfo.dir.folder && trackInfo.dir.folder.tag.albumType === AlbumType.mix) {\n\t\t\treturn trackInfo.dir.folder.tag.album || cUnknownAlbum;\n\t\t} else {\n\t\t\treturn trackInfo.track.tag.album || cUnknownAlbum;\n\t\t}\n\t}\n\n\tprivate async findArtist(trackInfo: MergeTrackInfo): Promise<Artist | undefined> {\n\t\tconst name = MetaMerge.getArtistName(trackInfo);\n\t\tconst mbArtistID = trackInfo.track.tag.mbAlbumArtistID || trackInfo.track.tag.mbArtistID;\n\t\tif (mbArtistID) {\n\t\t\tconst artist = await this.store.artistStore.searchOne({mbArtistID});\n\t\t\tif (artist) {\n\t\t\t\treturn artist;\n\t\t\t}\n\t\t}\n\t\treturn this.store.artistStore.searchOne({name});\n\t}\n\n\tprivate async addArtist(trackInfo: MergeTrackInfo): Promise<string> {\n\t\tconst name = MetaMerge.getArtistName(trackInfo);\n\t\tconst artist = await this.findArtist(trackInfo);\n\t\tif (artist) {\n\t\t\tartist.trackIDs.push(trackInfo.track.id);\n\t\t\tif (artist.rootIDs.indexOf(trackInfo.track.rootID) < 0) {\n\t\t\t\tartist.rootIDs.push(trackInfo.track.rootID);\n\t\t\t}\n\t\t\tawait this.store.artistStore.replace(artist);\n\t\t\treturn artist.id;\n\t\t} else {\n\t\t\tconst a: Artist = {\n\t\t\t\tid: '',\n\t\t\t\ttype: DBObjectType.artist,\n\t\t\t\trootIDs: [trackInfo.track.rootID],\n\t\t\t\tname: name,\n\t\t\t\tnameSort: MetaMerge.getArtistNameSort(trackInfo),\n\t\t\t\talbumIDs: [],\n\t\t\t\tmbArtistID: MetaMerge.getArtistMBArtistID(trackInfo),\n\t\t\t\ttrackIDs: [trackInfo.track.id],\n\t\t\t\tcreated: Date.now()\n\t\t\t};\n\t\t\tlog.debug('Add Artist', a.name);\n\t\t\ta.id = await this.store.artistStore.add(a);\n\t\t\treturn a.id;\n\t\t}\n\t}\n\n\tprivate async removeID3Artist(track: Track): Promise<void> {\n\t\tconst artist = await this.store.artistStore.searchOne({trackID: track.id});\n\t\tif (artist) {\n\t\t\tartist.trackIDs = artist.trackIDs.filter(id => id !== track.id);\n\t\t\tif (artist.trackIDs.length === 0) {\n\t\t\t\tawait this.store.artistStore.remove(artist.id);\n\t\t\t\tawait this.store.stateStore.removeByQuery({destID: artist.id, type: DBObjectType.artist});\n\t\t\t} else {\n\t\t\t\tawait this.store.artistStore.replace(artist);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async syncID3Artist(trackInfo: MergeTrackInfo): Promise<string> {\n\t\tconst artist = await this.findArtist(trackInfo);\n\t\tif (artist && (artist.trackIDs.indexOf(trackInfo.track.id) >= 0)) {\n\t\t\t// TODO: upsert artist name changes with same mbArtistID\n\t\t\treturn artist.id;\n\t\t}\n\t\tawait this.removeID3Artist(trackInfo.track);\n\t\treturn this.addArtist(trackInfo);\n\t}\n\n\tprivate async findAlbum(trackInfo: MergeTrackInfo, artistID: string): Promise<Album | undefined> {\n\t\tconst name = MetaMerge.getAlbumName(trackInfo);\n\t\tif (trackInfo.track.tag.mbAlbumID) {\n\t\t\tconst album = await this.store.albumStore.searchOne({mbAlbumID: trackInfo.track.tag.mbAlbumID});\n\t\t\tif (album) {\n\t\t\t\treturn album;\n\t\t\t}\n\t\t}\n\t\treturn this.store.albumStore.searchOne({name, artistID});\n\t}\n\n\tprivate async addID3Album(trackInfo: MergeTrackInfo, artistID: string): Promise<string> {\n\t\tconst name = MetaMerge.getAlbumName(trackInfo);\n\t\tconst album = await this.findAlbum(trackInfo, artistID);\n\t\tif (album) {\n\t\t\talbum.trackIDs.push(trackInfo.track.id);\n\t\t\tif (album.rootIDs.indexOf(trackInfo.track.rootID) < 0) {\n\t\t\t\talbum.rootIDs.push(trackInfo.track.rootID);\n\t\t\t}\n\t\t\talbum.duration += (trackInfo.track.media.duration || 0);\n\t\t\tawait this.store.albumStore.replace(album);\n\t\t\treturn album.id;\n\t\t} else {\n\t\t\tconst a: Album = {\n\t\t\t\tid: '',\n\t\t\t\ttype: DBObjectType.album,\n\t\t\t\tname: name,\n\t\t\t\tartist: MetaMerge.getArtistName(trackInfo),\n\t\t\t\tartistID: artistID,\n\t\t\t\tmbArtistID: MetaMerge.getArtistMBArtistID(trackInfo),\n\t\t\t\tmbAlbumID: trackInfo.track.tag.mbAlbumID,\n\t\t\t\tgenre: trackInfo.track.tag.genre,\n\t\t\t\ttrackIDs: [trackInfo.track.id],\n\t\t\t\trootIDs: [trackInfo.track.rootID],\n\t\t\t\tyear: trackInfo.track.tag.year,\n\t\t\t\tduration: trackInfo.track.media.duration || 0,\n\t\t\t\tcreated: Date.now()\n\t\t\t};\n\t\t\tlog.debug('Add Album', a.name);\n\t\t\ta.id = await this.store.albumStore.add(a);\n\t\t\tconst artist = await this.store.artistStore.byId(artistID);\n\t\t\tif (artist) {\n\t\t\t\tartist.albumIDs.push(a.id);\n\t\t\t\tawait this.store.artistStore.replace(artist);\n\t\t\t}\n\t\t\treturn a.id;\n\t\t}\n\t}\n\n\tprivate async removeID3Album(track: Track): Promise<void> {\n\t\tconst album = await this.store.albumStore.searchOne({trackID: track.id});\n\t\tif (album) {\n\t\t\talbum.trackIDs = album.trackIDs.filter(id => id !== track.id);\n\t\t\talbum.duration -= (track.media.duration || 0);\n\t\t\tif (album.trackIDs.length === 0) {\n\t\t\t\tconst artist = await this.store.artistStore.byId(album.artistID);\n\t\t\t\tif (artist) {\n\t\t\t\t\tartist.albumIDs = artist.albumIDs.filter(id => id !== album.id);\n\t\t\t\t\tawait this.store.artistStore.replace(artist);\n\t\t\t\t\tawait this.store.albumStore.remove(album.id);\n\t\t\t\t\tawait this.store.stateStore.removeByQuery({destID: album.id, type: DBObjectType.album});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tawait this.store.albumStore.replace(album);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async syncAlbum(trackInfo: MergeTrackInfo, artistID: string): Promise<void> {\n\t\tconst album = await this.findAlbum(trackInfo, artistID);\n\t\tif (album && (album.trackIDs.indexOf(trackInfo.track.id) >= 0)) {\n\t\t\t// TODO: upsert artist name changes with same mbArtistID\n\t\t\treturn;\n\t\t}\n\t\tawait this.removeID3Album(trackInfo.track);\n\t\tawait this.addID3Album(trackInfo, artistID);\n\t}\n\n\tprivate async addID3s(trackInfos: Array<MergeTrackInfo>): Promise<void> {\n\t\tconst artistSearchesName: { [name: string]: Array<MergeTrackInfo> } = {};\n\t\tconst artistTracks: { [id: string]: { artist: Artist, tracks: Array<MergeTrackInfo>, hasChanged: boolean } } = {};\n\t\t// collect artists searches\n\t\ttrackInfos.forEach(trackInfo => {\n\t\t\tconst name = MetaMerge.getArtistName(trackInfo);\n\t\t\tif (name && name.length > 0) {\n\t\t\t\tartistSearchesName[name] = artistSearchesName[name] || [];\n\t\t\t\tartistSearchesName[name].push(trackInfo);\n\t\t\t}\n\t\t});\n\t\t// search artists\n\t\tfor (const name of Object.keys(artistSearchesName)) {\n\t\t\tconst artist = await this.store.artistStore.searchOne({name});\n\t\t\tconst idtracks = artistSearchesName[name];\n\t\t\tif (artist) {\n\t\t\t\tidtracks.forEach(t => {\n\t\t\t\t\tt.track.artistID = artist.id;\n\t\t\t\t});\n\t\t\t\tartistTracks[artist.id] = (artistTracks[artist.id] || {artist, tracks: [], hasChanged: true});\n\t\t\t\tartistTracks[artist.id].tracks = artistTracks[artist.id].tracks.concat(idtracks);\n\t\t\t\tartistTracks[artist.id].hasChanged = true;\n\t\t\t\tartist.trackIDs = artist.trackIDs.concat(idtracks.map(t => t.track.id));\n\t\t\t\tidtracks.forEach(t => {\n\t\t\t\t\tif (artist.rootIDs.indexOf(t.track.rootID) < 0) {\n\t\t\t\t\t\tartist.rootIDs.push(t.track.rootID);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// gets saved later\n\t\t\t} else {\n\t\t\t\tconst a: Artist = {\n\t\t\t\t\tid: '',\n\t\t\t\t\ttype: DBObjectType.artist,\n\t\t\t\t\tname: MetaMerge.getArtistName(idtracks[0]),\n\t\t\t\t\tnameSort: MetaMerge.getArtistNameSort(idtracks[0]),\n\t\t\t\t\trootIDs: [],\n\t\t\t\t\talbumIDs: [],\n\t\t\t\t\tmbArtistID: MetaMerge.getArtistMBArtistID(idtracks[0]),\n\t\t\t\t\ttrackIDs: idtracks.map(t => t.track.id),\n\t\t\t\t\tcreated: Date.now()\n\t\t\t\t};\n\t\t\t\tidtracks.forEach(t => {\n\t\t\t\t\tif (a.rootIDs.indexOf(t.track.rootID) < 0) {\n\t\t\t\t\t\ta.rootIDs.push(t.track.rootID);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlog.debug('Add Artist', a.name);\n\t\t\t\ta.id = await this.store.artistStore.add(a);\n\t\t\t\tartistTracks[a.id] = {artist: a, tracks: idtracks, hasChanged: false};\n\t\t\t\tidtracks.forEach(t => {\n\t\t\t\t\tt.track.artistID = a.id;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// search albums\n\t\tfor (const artistID of  Object.keys(artistTracks)) {\n\t\t\tconst artistidtracks = artistTracks[artistID];\n\t\t\tconst albumtracks: { [name: string]: Array<MergeTrackInfo> } = {};\n\t\t\tartistidtracks.tracks.forEach(trackInfo => {\n\t\t\t\tconst name = MetaMerge.getAlbumName(trackInfo);\n\t\t\t\talbumtracks[name] = albumtracks[name] || [];\n\t\t\t\talbumtracks[name].push(trackInfo);\n\t\t\t});\n\t\t\tfor (const name of Object.keys(albumtracks)) {\n\t\t\t\tconst atracks = albumtracks[name];\n\t\t\t\tconst album = await this.store.albumStore.searchOne({name, artistID});\n\t\t\t\tif (album) {\n\t\t\t\t\talbum.trackIDs = album.trackIDs.concat(atracks.map(t => t.track.id));\n\t\t\t\t\tatracks.forEach(t => {\n\t\t\t\t\t\tt.track.albumID = album.id;\n\t\t\t\t\t\talbum.duration += (t && t.track && t.track.media && t.track.media.duration ? t.track.media.duration : 0);\n\t\t\t\t\t\tif (album.rootIDs.indexOf(t.track.rootID) < 0) {\n\t\t\t\t\t\t\talbum.rootIDs.push(t.track.rootID);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tlog.debug('Update Album', album.name);\n\t\t\t\t\tartistidtracks.artist.albumIDs.push(album.id);\n\t\t\t\t\tartistidtracks.hasChanged = true;\n\t\t\t\t\tawait this.store.albumStore.replace(album);\n\t\t\t\t} else {\n\t\t\t\t\tconst a: Album = {\n\t\t\t\t\t\tid: '',\n\t\t\t\t\t\ttype: DBObjectType.album,\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\trootIDs: [],\n\t\t\t\t\t\tartist: MetaMerge.getArtistName(atracks[0]),\n\t\t\t\t\t\tartistID: artistID,\n\t\t\t\t\t\tmbArtistID: MetaMerge.getArtistMBArtistID(atracks[0]),\n\t\t\t\t\t\tmbAlbumID: atracks[0].track.tag.mbAlbumID,\n\t\t\t\t\t\tgenre: atracks[0].track.tag.genre,\n\t\t\t\t\t\ttrackIDs: atracks.map(t => t.track.id),\n\t\t\t\t\t\tyear: atracks[0].track.tag.year,\n\t\t\t\t\t\tduration: atracks.reduce((b, c) => (b + (c && c.track && c.track.media && c.track.media.duration ? c.track.media.duration : 0)), 0),\n\t\t\t\t\t\tcreated: Date.now()\n\t\t\t\t\t};\n\t\t\t\t\tatracks.forEach(t => {\n\t\t\t\t\t\tif (a.rootIDs.indexOf(t.track.rootID) < 0) {\n\t\t\t\t\t\t\ta.rootIDs.push(t.track.rootID);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tlog.debug('Add Album', a.name);\n\t\t\t\t\ta.id = await this.store.albumStore.add(a);\n\t\t\t\t\tartistidtracks.artist.albumIDs.push(a.id);\n\t\t\t\t\tatracks.forEach(t => {\n\t\t\t\t\t\tt.track.albumID = a.id;\n\t\t\t\t\t});\n\t\t\t\t\tartistidtracks.hasChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// save artists\n\t\tconst artists = Object.keys(artistTracks).filter(artistID => artistTracks[artistID].hasChanged).map(artistID => artistTracks[artistID].artist);\n\t\tlog.debug('Updating Artists:', artists.length);\n\t\tawait this.store.artistStore.replaceMany(artists);\n\n\t\t// save tracks\n\t\tconst tracks = trackInfos.filter(trackInfo => (trackInfo.track.albumID || trackInfo.track.artistID)).map(trackInfo => trackInfo.track);\n\t\tlog.debug('Updating Tracks:', tracks.length);\n\t\tawait this.store.trackStore.replaceMany(tracks);\n\t}\n\n\tprivate async syncID3(trackInfo: MergeTrackInfo): Promise<void> {\n\t\tconst id = await this.syncID3Artist(trackInfo);\n\t\tawait this.syncAlbum(trackInfo, id);\n\t}\n\n\tasync sync(changes: MergeChanges): Promise<void> {\n\t\t// new tracks && leftovers from last unfinished scan\n\t\tconst trackInfos = changes.newTracks.concat(changes.unchangedTracks.filter(t => (!t.track.albumID && !t.track.artistID)));\n\t\tawait this.addID3s(trackInfos);\n\t\tfor (const trackInfo of changes.updateTracks) {\n\t\t\tawait this.syncID3(trackInfo);\n\t\t}\n\t}\n}\n","import path from 'path';\nimport Logger from '../../../utils/logger';\nimport {Store} from '../../store/store';\nimport {MergeChanges} from './merge';\nimport {DBObjectType} from '../../../types';\nimport {Root} from '../../../objects/root/root.model';\nimport {Track} from '../../../objects/track/track.model';\nimport {Folder} from '../../../objects/folder/folder.model';\nimport fse from 'fs-extra';\nimport {ImageModule} from '../../../modules/image/image.module';\n\nconst log = Logger('IO.clean');\n\nfunction isInRoot(list: Array<Root>, fullpath: string): Root | null {\n\tconst result = null;\n\tfor (let i = 0; i < list.length; i++) {\n\t\tif (fullpath.indexOf(list[i].path) === 0) {\n\t\t\treturn list[i];\n\t\t}\n\t}\n\treturn result;\n}\n\nexport async function scanForRemoved(store: Store, changes: MergeChanges): Promise<{\n\tremoveTracks: Array<Track>;\n\tremoveFolders: Array<Folder>;\n}> {\n\n\tconst removeTracks: Array<Track> = changes.removedTracks;\n\tconst removeFolders: Array<Folder> = changes.removedFolders;\n\tconst doneFileIds: Array<string> = changes.newTracks.map(t => t.track.id)\n\t\t.concat(changes.updateTracks.map(t => t.track.id))\n\t\t.concat(changes.unchangedTracks.map(t => t.track.id))\n\t\t.concat(changes.removedTracks.map(t => t.id));\n\tconst doneFolderIds: Array<string> = changes.newFolders.map(t => t.id)\n\t\t.concat(changes.updateFolders.map(t => t.id))\n\t\t.concat(changes.unchangedFolders.map(t => t.id))\n\t\t.concat(changes.removedFolders.map(t => t.id));\n\n\tconst roots = await store.rootStore.all();\n\tlog.debug('Collecting removed folders');\n\tawait store.folderStore.iterate(async (folders) => {\n\t\tfor (const folder of folders) {\n\t\t\tif (!isInRoot(roots, folder.path)) {\n\t\t\t\tremoveFolders.push(folder);\n\t\t\t} else if (doneFolderIds.indexOf(folder.id) < 0) {\n\t\t\t\tconst exists = await fse.pathExists(folder.path);\n\t\t\t\tif (!exists) {\n\t\t\t\t\tremoveFolders.push(folder);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tlog.debug('Collecting removed tracks');\n\tawait store.trackStore.iterate(async (tracks) => {\n\t\tfor (const track of tracks) {\n\t\t\tif (!isInRoot(roots, track.path)) {\n\t\t\t\tremoveTracks.push(track);\n\t\t\t} else if (doneFileIds.indexOf(track.id) < 0) {\n\t\t\t\tconst exists = await fse.pathExists(path.join(track.path, track.name));\n\t\t\t\tif (!exists) {\n\t\t\t\t\tremoveTracks.push(track);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\treturn {removeTracks, removeFolders};\n}\n\nexport async function clearID3(store: Store, imageModule: ImageModule, removeTracks: Array<Track>): Promise<void> {\n\tif (removeTracks.length === 0) {\n\t\treturn;\n\t}\n\tlog.debug('Cleaning ID3');\n\tconst trackIDs = removeTracks.map(track => track.id);\n\tconst albums = await store.albumStore.search({trackIDs});\n\talbums.forEach(album => {\n\t\tlet duration = 0;\n\t\talbum.trackIDs = album.trackIDs.filter(id => {\n\t\t\tconst track = removeTracks.find(t => t.id === id);\n\t\t\tif (track) {\n\t\t\t\tduration += (track.media.duration || 0);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\talbum.duration -= duration;\n\t});\n\tconst removeAlbums = albums.filter(album => album.trackIDs.length === 0).map(album => album.id);\n\tconst updateAlbums = albums.filter(album => album.trackIDs.length !== 0);\n\tif (removeAlbums.length > 0) {\n\t\tawait store.albumStore.remove(removeAlbums);\n\t\tawait store.stateStore.removeByQuery({destIDs: removeAlbums, type: DBObjectType.album});\n\t}\n\tif (updateAlbums.length > 0) {\n\t\tawait store.albumStore.replaceMany(updateAlbums);\n\t}\n\tconst artists = await store.artistStore.search({trackIDs});\n\tartists.forEach(artist => {\n\t\tartist.trackIDs = artist.trackIDs.filter(id => trackIDs.indexOf(id) < 0);\n\t\tartist.albumIDs = artist.albumIDs.filter(id => removeAlbums.indexOf(id) < 0);\n\t});\n\tconst removeArtists = artists.filter(artist => artist.trackIDs.length === 0).map(artist => artist.id);\n\tconst updateArtists = artists.filter(artist => artist.trackIDs.length !== 0);\n\tif (removeArtists.length > 0) {\n\t\tawait store.artistStore.remove(removeArtists);\n\t\tawait store.stateStore.removeByQuery({destIDs: removeArtists, type: DBObjectType.artist});\n\t}\n\tif (updateArtists.length > 0) {\n\t\tawait store.artistStore.replaceMany(updateArtists);\n\t}\n\tconst ids = removeAlbums.concat(removeArtists);\n\tawait imageModule.clearImageCacheByIDs(ids);\n}\n\n","import {ID3v2, IID3V2, IMP3, MP3, simplifyTag} from 'jamp3';\nimport {ChartLyricsClient, ChartLyricsResult} from './clients/chartlyrics-client';\nimport {AcoustidClient} from './clients/acoustid-client';\nimport {LastFMClient} from './clients/lastfm-client';\nimport {MusicbrainzClient} from './clients/musicbrainz-client';\nimport {MusicbrainzClientApi} from './clients/musicbrainz-client.interface';\nimport {LastFM} from '../../model/lastfm-rest-data';\nimport {Acoustid} from '../../model/acoustid-rest-data';\nimport {MusicBrainz} from '../../model/musicbrainz-rest-data';\nimport {fileSuffix} from '../../utils/fs-utils';\nimport {cleanGenre} from '../../utils/genres';\nimport {Jam} from '../../model/jam-rest-data';\nimport {TrackMedia, TrackTag} from '../../objects/track/track.model';\nimport {MetaInfoAlbum, MetaInfoArtist, MetaInfoImage, MetaInfoTopSong, MetaInfoTrackSimilarSong} from './metadata.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport fse from 'fs-extra';\nimport {ThirdpartyToolsConfig} from '../../config/thirdparty.config';\n\nexport interface AudioScanResult {\n\tmedia?: TrackMedia;\n\ttag?: TrackTag;\n}\n\nexport class FORMAT {\n\tstatic packJamServeMpeg(data?: IMP3.MPEG): TrackMedia {\n\t\tif (!data) {\n\t\t\treturn {};\n\t\t}\n\t\treturn {\n\t\t\tformat: 'mp3',\n\t\t\tduration: data.durationEstimate,\n\t\t\tbitRate: data.bitRate,\n\t\t\tsampleRate: data.sampleRate,\n\t\t\tchannels: data.channels,\n\t\t\tencoded: data.encoded,\n\t\t\tmode: data.mode,\n\t\t\tversion: data.version + ' ' + data.layer\n\t\t};\n\t}\n\n\tstatic packJamServeTag(data?: IID3V2.Tag): TrackTag | undefined {\n\t\tif (!data) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst simple = simplifyTag(data);\n\t\t// ? simplifyTag(result.id3v2) : undefined\n\t\tlet year: number | undefined = simple.year;\n\t\tif (simple.release_year) {\n\t\t\tconst y = parseInt(simple.release_year, 10);\n\t\t\tif (!isNaN(y)) {\n\t\t\t\tyear = y;\n\t\t\t}\n\t\t}\n\t\tif (simple.originalyear) {\n\t\t\tconst y = parseInt(simple.originalyear, 10);\n\t\t\tif (!isNaN(y)) {\n\t\t\t\tyear = y;\n\t\t\t}\n\t\t}\n\t\tif (simple.original_release_year) {\n\t\t\tconst y = parseInt(simple.original_release_year, 10);\n\t\t\tif (!isNaN(y)) {\n\t\t\t\tyear = y;\n\t\t\t}\n\t\t}\n\t\tif (simple.release_date) {\n\t\t\tconst y = parseInt(simple.release_date.slice(0, 4), 10);\n\t\t\tif (!isNaN(y)) {\n\t\t\t\tyear = y;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\talbum: simple.album,\n\t\t\talbumSort: simple.album_sort_order,\n\t\t\talbumArtist: simple.album_artist,\n\t\t\talbumArtistSort: simple.album_artist_sort || simple.album_artist_sort_order,\n\t\t\tartist: simple.artist,\n\t\t\tartistSort: simple.artist_sort,\n\t\t\tgenre: simple.genre ? cleanGenre(simple.genre) : undefined,\n\t\t\tdisc: simple.disc,\n\t\t\ttitle: simple.title,\n\t\t\ttitleSort: simple.title_sort_order,\n\t\t\ttrack: simple.track,\n\t\t\tyear: year,\n\t\t\tmbTrackID: simple.TRACKID,\n\t\t\tmbAlbumType: simple.ALBUMTYPE,\n\t\t\tmbAlbumArtistID: simple.ALBUMARTISTID,\n\t\t\tmbArtistID: simple.ARTISTID,\n\t\t\tmbAlbumID: simple.ALBUMID,\n\t\t\tmbReleaseTrackID: simple.RELEASETRACKID,\n\t\t\tmbReleaseGroupID: simple.RELEASEGROUPID,\n\t\t\tmbRecordingID: simple.RECORDINGID,\n\t\t\tmbAlbumStatus: simple.ALBUMSTATUS,\n\t\t\tmbReleaseCountry: simple.RELEASECOUNTRY\n\t\t};\n\t}\n\n\tstatic packMediaInfoImage(images: Array<LastFM.Image>): MetaInfoImage {\n\t\tlet small: string | undefined;\n\t\tlet medium: string | undefined;\n\t\tlet large: string | undefined;\n\t\tlet image = (images || []).find(img => img.size === 'small');\n\t\tif (image && image.url && image.url.length > 0) {\n\t\t\tsmall = image.url;\n\t\t}\n\t\timage = (images || []).find(img => img.size === 'medium');\n\t\tif (image && image.url && image.url.length > 0) {\n\t\t\tmedium = image.url;\n\t\t}\n\t\timage = (images || []).find(img => img.size === 'large');\n\t\tif (image && image.url && image.url.length > 0) {\n\t\t\tlarge = image.url;\n\t\t}\n\t\treturn {\n\t\t\tsmall: small,\n\t\t\tmedium: medium,\n\t\t\tlarge: large\n\t\t};\n\t}\n\n\tstatic packMediaInfoArtist(data?: LastFM.Artist): MetaInfoArtist | undefined {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tif (!data.mbid) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\tname: data.name,\n\t\t\tmbid: data.mbid,\n\t\t\turl: data.url,\n\t\t\timage: this.packMediaInfoImage(data.image),\n\t\t\ttags: data.tags,\n\t\t\tdescription: data.bio ? data.bio.content : undefined,\n\t\t\tsimilar: data.similar && data.similar.artist ? data.similar.artist.map(artist => {\n\t\t\t\treturn {\n\t\t\t\t\tname: artist.name,\n\t\t\t\t\turl: artist.url,\n\t\t\t\t\timage: this.packMediaInfoImage(artist.image)\n\t\t\t\t};\n\t\t\t}) : undefined\n\t\t};\n\t}\n\n\tstatic packMediaInfoSimilarSong(data?: LastFM.SimilarTracks): Array<MetaInfoTrackSimilarSong> {\n\t\tif (!data || !data.track || data.track.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn data.track.map(t => {\n\t\t\treturn {\n\t\t\t\tname: t.name,\n\t\t\t\tmbid: t.mbid,\n\t\t\t\turl: t.url,\n\t\t\t\tduration: parseFloat(t.duration),\n\t\t\t\tartist: {\n\t\t\t\t\tname: t.artist.name,\n\t\t\t\t\tmbid: t.artist.mbid,\n\t\t\t\t\turl: t.artist.name\n\t\t\t\t},\n\t\t\t\timage: this.packMediaInfoImage(t.image)\n\t\t\t};\n\t\t});\n\t}\n\n\tstatic packMediaInfoAlbum(data?: LastFM.Album): MetaInfoAlbum | undefined {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\tname: data.name,\n\t\t\tartist: data.artist,\n\t\t\tmbid: data.mbid,\n\t\t\turl: data.url,\n\t\t\timage: this.packMediaInfoImage(data.image),\n\t\t\ttags: data.tags,\n\t\t\tdescription: data.wiki ? data.wiki.content : undefined\n\t\t};\n\t}\n\n\tstatic packMediaInfoTopSongs(data?: LastFM.TopTracks): Array<MetaInfoTopSong> {\n\t\tif (!data || !data.track || data.track.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn data.track.map(t => {\n\t\t\treturn {\n\t\t\t\tname: t.name,\n\t\t\t\tmbid: t.mbid,\n\t\t\t\turl: t.url,\n\t\t\t\trank: t.rank,\n\t\t\t\tartist: {\n\t\t\t\t\tname: t.artist.name,\n\t\t\t\t\tmbid: t.artist.mbid,\n\t\t\t\t\turl: t.artist.name\n\t\t\t\t},\n\t\t\t\timage: this.packMediaInfoImage(t.image)\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport class AudioModule {\n\tmusicbrainz: MusicbrainzClient;\n\tacoustid: AcoustidClient;\n\tlastFM: LastFMClient;\n\tchartLyrics: ChartLyricsClient;\n\n\tconstructor(tools: ThirdpartyToolsConfig) {\n\t\tthis.musicbrainz = new MusicbrainzClient({userAgent: tools.musicbrainz.userAgent, retryOn: true});\n\t\tthis.lastFM = new LastFMClient({key: tools.lastfm.apiKey, userAgent: tools.lastfm.userAgent});\n\t\tthis.acoustid = new AcoustidClient({key: tools.acoustid.apiKey, userAgent: tools.acoustid.userAgent});\n\t\tthis.chartLyrics = new ChartLyricsClient(tools.chartlyrics.userAgent);\n\t}\n\n\tasync read(filename: string): Promise<AudioScanResult> {\n\t\tconst suffix = fileSuffix(filename);\n\t\tif (suffix === 'mp3') {\n\t\t\tconst mp3 = new MP3();\n\t\t\tconst result = await mp3.read({filename, mpegQuick: true, mpeg: true, id3v2: true});\n\t\t\tif (!result) {\n\t\t\t\treturn {tag: {}, media: {}};\n\t\t\t} else {\n\t\t\t\treturn {tag: FORMAT.packJamServeTag(result.id3v2), media: FORMAT.packJamServeMpeg(result.mpeg)};\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: read other audio file format tags\n\t\t\tconsole.log('TODO: read other audio file format tags', filename);\n\t\t\treturn {tag: {}, media: {}};\n\t\t}\n\t}\n\n\tasync write(filename: string, tag: TrackTag): Promise<void> {\n\t\treturn Promise.reject(Error('not implemented'));\n\t\t/*\n\t\t // logger.verbose('Writing Tag', filename);\n\t\t let dest = filename + '.temp.mp3';\n\t\t fs.copyFile(filename, dest, (err) => {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tlet frames = [];\n\t\t\tObject.keys(tag).forEach(key => {\n\t\t\t\tif (simpleMapReverse[key]) {\n\t\t\t\t\tframes.push({id: simpleMapReverse[key], text: tag[key]});\n\t\t\t\t} else if (key.indexOf('T:') === 0) {\n\t\t\t\t\tframes.push({id: 'TXXX', description: key.slice(2), text: tag[key]});\n\t\t\t\t}\n\t\t\t});\n\t\t\ttagio.write({\n\t\t\t\tpath: dest,\n\t\t\t\tconfiguration: {\n\t\t\t\t\tconfigurationReadable: true,\n\t\t\t\t\taudioPropertiesReadable: true,\n\t\t\t\t\tid3v1Readable: true,\n\t\t\t\t\tid3v1Writable: true,\n\t\t\t\t\tid3v1Encoding: tagio.Encoding.UTF8,\n\t\t\t\t\tid3v2Readable: true,\n\t\t\t\t\tid3v2Writable: true,\n\t\t\t\t\tapeReadable: false,\n\t\t\t\t\tapeWritable: false\n\t\t\t\t},\n\t\t\t\tid3v1: {\n\t\t\t\t\t'title': tag.title || '',\n\t\t\t\t\t'album': tag.album || '',\n\t\t\t\t\t'artist': tag.artist || '',\n\t\t\t\t\t'track': parseInt(tag.track, 10),\n\t\t\t\t\t'year': parseInt(tag.year || tag.date || 0, 10),\n\t\t\t\t\t'genre': tag.genre || '',\n\t\t\t\t\t'comment': ''\n\t\t\t\t},\n\t\t\t\tid3v2: frames\n\t\t\t}).then((res) => {\n\t\t\t\tcb(null, res);\n\t\t\t}).catch((err) => {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t});\n\t\t **/\n\t}\n\n\tasync saveID3v2(filename: string, tag: Jam.ID3Tag): Promise<void> {\n\t\tconst exists = await fse.pathExists(filename + '.bak.org');\n\t\tif (exists) {\n\t\t\tawait fse.copy(filename, filename + '.bak.org');\n\t\t}\n\t\tconst frames: Array<IID3V2.Frame> = [];\n\t\tObject.keys(tag.frames).map(id => {\n\t\t\tconst f = tag.frames[id] || [];\n\t\t\tf.forEach(value => {\n\t\t\t\tframes.push({id, head: {statusFlags: {}, formatFlags: {}, size: 0}, value});\n\t\t\t});\n\t\t\treturn;\n\t\t});\n\t\tconst t: IID3V2.Tag = {\n\t\t\tid: 'ID3v2',\n\t\t\thead: {\n\t\t\t\tver: tag.version,\n\t\t\t\trev: 0,\n\t\t\t\tsize: 0,\n\t\t\t\tvalid: true\n\t\t\t},\n\t\t\tstart: 0,\n\t\t\tend: 0,\n\t\t\tframes\n\t\t};\n\t\tconst id3v2 = new ID3v2();\n\t\tawait id3v2.write(filename, t, tag.version, 0);\n\t}\n\n\tasync readID3v2(filename: string): Promise<Jam.ID3Tag> {\n\t\tconst id3v2 = new ID3v2();\n\t\tconst id3v2tag = await id3v2.read(filename);\n\t\tif (!id3v2tag || !id3v2tag.head) {\n\t\t\treturn Promise.reject(Error('No ID3v2 Tag found'));\n\t\t}\n\t\tconst tag: Jam.ID3Tag = {\n\t\t\tversion: id3v2tag.head.ver,\n\t\t\tframes: {}\n\t\t};\n\t\tid3v2tag.frames.forEach(frame => {\n\t\t\tconst f = tag.frames[frame.id] || [];\n\t\t\tif (frame.value && frame.value.hasOwnProperty('bin')) {\n\t\t\t\tconst binValue = <any>frame.value;\n\t\t\t\tbinValue.bin = binValue.bin.toString('base64');\n\t\t\t}\n\t\t\tf.push(frame.value);\n\t\t\ttag.frames[frame.id] = f;\n\t\t});\n\t\treturn tag;\n\t}\n\n\tasync readID3v2Image(filename: string, type: number): Promise<{ buffer?: Buffer, mimeType?: string }> {\n\t\tconst id3v2 = new ID3v2();\n\t\tconst tag = await id3v2.read(filename);\n\t\tif (!tag) {\n\t\t\treturn {};\n\t\t}\n\t\tconst frame = tag.frames.find(f => {\n\t\t\tif (['APIC', 'PIC'].indexOf(f.id) >= 0) {\n\t\t\t\treturn (<IID3V2.FrameValue.Pic>f.value).pictureType === type;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\tif (!frame) {\n\t\t\treturn {};\n\t\t}\n\t\treturn {buffer: (<IID3V2.FrameValue.Pic>frame.value).bin, mimeType: (<IID3V2.FrameValue.Pic>frame.value).mimeType};\n\t}\n\n\tasync mediaInfoArtistInfo(artistName: string): Promise<MetaInfoArtist | undefined> {\n\t\tconst data = await this.lastFM.artist(artistName);\n\t\treturn FORMAT.packMediaInfoArtist(data);\n\t}\n\n\tasync mediaInfoArtistInfoByArtistID(artistID: string): Promise<MetaInfoArtist | undefined> {\n\t\tconst data = await this.lastFM.artistID(artistID);\n\t\treturn FORMAT.packMediaInfoArtist(data);\n\t}\n\n\tasync mediaInfoAlbumInfo(albumName: string, artistName: string): Promise<MetaInfoAlbum | undefined> {\n\t\tconst data = await this.lastFM.album(albumName, artistName);\n\t\tconst result = FORMAT.packMediaInfoAlbum(data);\n\t\tif (result && result.mbid) {\n\t\t\tconst mb = await this.musicbrainz.lookup({id: result.mbid, type: 'release', inc: 'labels'});\n\t\t\tresult.releases = mb.releases;\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync mediaInfoAlbumInfoByAlbumID(albumID: string): Promise<MetaInfoAlbum | undefined> {\n\t\tconst data = await this.lastFM.albumID(albumID);\n\t\tconst result = FORMAT.packMediaInfoAlbum(data);\n\t\tif (result) {\n\t\t\tconst mb = await this.musicbrainz.lookup({id: albumID, type: 'release', inc: 'labels'});\n\t\t\tresult.releases = mb.releases;\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync mediaInfoSimilarTrack(title: string, artist: string): Promise<Array<MetaInfoTrackSimilarSong>> {\n\t\tconst data = await this.lastFM.similarTrack(title, artist);\n\t\treturn FORMAT.packMediaInfoSimilarSong(data);\n\t}\n\n\tasync mediaInfoSimilarTrackByMBTrackID(trackID: string): Promise<Array<MetaInfoTrackSimilarSong>> {\n\t\tconst data = await this.lastFM.similarTrackID(trackID);\n\t\treturn FORMAT.packMediaInfoSimilarSong(data);\n\t}\n\n\tasync mediaInfoTopSongs(artistName: string): Promise<Array<MetaInfoTopSong>> {\n\t\t// TODO: get more than 50\n\t\tconst data = await this.lastFM.topArtistSongs(artistName);\n\t\treturn FORMAT.packMediaInfoTopSongs(data);\n\t}\n\n\tasync mediaInfoTopSongsByArtistID(artistID: string): Promise<Array<MetaInfoTopSong>> {\n\t\t// TODO: get more than 50\n\t\tconst data = await this.lastFM.topArtistSongsID(artistID);\n\t\treturn FORMAT.packMediaInfoTopSongs(data);\n\t}\n\n\tasync acoustidLookup(filename: string, includes: string | undefined): Promise<Array<Acoustid.Result>> {\n\t\treturn this.acoustid.acoustid(filename, includes);\n\t}\n\n\tasync musicbrainzSearch(type: string, query: MusicbrainzClientApi.SearchQuery): Promise<MusicBrainz.Response> {\n\t\treturn this.musicbrainz.search({type: type, query});\n\t}\n\n\tasync musicbrainzLookup(type: string, id: string, inc: string | undefined): Promise<MusicBrainz.Response> {\n\t\treturn this.musicbrainz.lookup({type: type, id, inc});\n\t}\n\n\tasync musicbrainzAlbumByFolder(folder: Folder): Promise<MusicBrainz.Response> {\n\t\tconst query: MusicbrainzClientApi.SearchQueryRelease = {\n\t\t\tarid: folder.tag.mbArtistID,\n\t\t\tartist: folder.tag.artist,\n\t\t\trelease: folder.tag.album || folder.tag.title\n\t\t};\n\t\treturn this.musicbrainz.search({type: 'release', query});\n\t}\n\n\tasync lastFMLookup(type: string, id: string): Promise<LastFM.Result> {\n\t\t// TODO: get more than 50\n\t\treturn this.lastFM.lookup(type, id);\n\t}\n\n\tasync getLyrics(artist: string, song: string): Promise<ChartLyricsResult | undefined> {\n\t\treturn this.chartLyrics.search(artist, song);\n\t}\n\n\n}\n","module.exports = require(\"jamp3\");","import {WebserviceXMLClient} from '../../../utils/webservice-xml-client';\n\nexport interface ChartLyricsResult {\n\tid: string;\n\ttrackId: string;\n\tchecksum: string;\n\tsong: string;\n\tartist: string;\n\turl: string;\n\tcovertArtUrl: string;\n\trank: string;\n\tcorrectUrl: string;\n\tlyric: string;\n}\n\nexport class ChartLyricsClient extends WebserviceXMLClient {\n\n\tconstructor(userAgent: string) {\n\t\tsuper(1, 1000, userAgent);\n\t}\n\n\tasync search(artistName: string, songName: string): Promise<ChartLyricsResult | undefined> {\n\t\tconst opts = {\n\t\t\tartist: artistName,\n\t\t\tsong: songName\n\t\t};\n\t\tconst data = await this.getJson<any>('http://api.chartlyrics.com/apiv1.asmx/SearchLyricDirect', opts);\n\t\tif (!data || !data.GetLyricResult) {\n\t\t\treturn;\n\t\t}\n\t\tconst o = data.GetLyricResult;\n\t\tconst result: ChartLyricsResult = {\n\t\t\tid: (o ? o.LyricId[0] : '') || '',\n\t\t\ttrackId: (o ? o.TrackId[0] : '') || '',\n\t\t\tchecksum: (o ? o.LyricChecksum[0] : '') || '',\n\t\t\tsong: (o ? o.LyricSong[0] : '') || '',\n\t\t\tartist: (o ? o.LyricArtist[0] : '') || '',\n\t\t\turl: (o ? o.LyricUrl[0] : '') || '',\n\t\t\tcovertArtUrl: (o ? o.LyricCovertArtUrl[0] : '') || '',\n\t\t\trank: (o ? o.LyricRank[0] : '') || '',\n\t\t\tcorrectUrl: (o ? o.LyricCorrectUrl[0] : '') || '',\n\t\t\tlyric: (o ? o.Lyric[0] : '') || ''\n\t\t};\n\t\treturn result;\n\t}\n}\n","import rateLimiter from 'limiter';\nimport request from 'request';\nimport xml2js from 'xml2js';\n\nexport class WebserviceXMLClient {\n\tprivate limiter: rateLimiter.RateLimiter;\n\tprivate userAgent: string;\n\n\tconstructor(requestPerInterval: number, requestIntervalMS: number, userAgent: string) {\n\t\tthis.limiter = new rateLimiter.RateLimiter(requestPerInterval, requestIntervalMS);\n\t\tthis.userAgent = userAgent;\n\t}\n\n\tprotected async getJson<T>(url: string, parameters: object | undefined): Promise<T> {\n\t\tconst options: request.Options = {\n\t\t\turl,\n\t\t\theaders: {'User-Agent': this.userAgent},\n\t\t\tqs: parameters\n\t\t};\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tthis.limiter.removeTokens(1, () => {\n\t\t\t\trequest(options, (err, response, body) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t}\n\t\t\t\t\txml2js.parseString(body, (err2, result) => {\n\t\t\t\t\t\tif (err2) {\n\t\t\t\t\t\t\treturn reject(err2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(<T>result);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t});\n\t}\n\n}\n","module.exports = require(\"xml2js\");","import {fpcalc, FPCalcOptions, FPCalcResult} from '../tools/fpcalc';\nimport {WebserviceClient} from '../../../utils/webservice-client';\nimport {Acoustid} from '../../../model/acoustid-rest-data';\nimport Logger from '../../../utils/logger';\n\nconst log = Logger('Acoustid');\n\n// const ALL_META_DEFAULT = 'recordings recordingids releases releaseids releasegroups releasegroupids tracks compress usermeta sources';\n\nconst META_DEFAULT = 'recordings releases releasegroups tracks compress usermeta sources';\n\ndeclare namespace AcoustidClient {\n\n\texport interface AcoustidClientOptions {\n\t\tkey: string;\n\t\tuserAgent: string;\n\t\tmeta?: string;\n\t\tfpcalc?: FPCalcOptions;\n\t}\n\n}\n\nexport class AcoustidClient extends WebserviceClient {\n\toptions: AcoustidClient.AcoustidClientOptions;\n\n\tconstructor(options: AcoustidClient.AcoustidClientOptions) {\n\t\t// \"not more than 3 per second\" https://acoustid.org/webservice\n\t\tsuper(3, 1000, options.userAgent);\n\t\tthis.options = options;\n\t}\n\n\tprivate async get(fp: FPCalcResult, includes: string | undefined): Promise<Array<Acoustid.Result>> {\n\t\tincludes = includes || this.options.meta || META_DEFAULT;\n\t\tlog.info('requesting by fingerprint', includes);\n\t\tconst data = await this.getJson<Acoustid.Results>('http://api.acoustid.org/v2/lookup', {\n\t\t\tformat: 'json',\n\t\t\tmeta: includes,\n\t\t\tclient: this.options.key,\n\t\t\tduration: fp.duration.toFixed(0),\n\t\t\tfingerprint: fp.fingerprint\n\t\t});\n\t\tif (data.status !== 'ok') {\n\t\t\treturn Promise.reject(Error(data.status));\n\t\t}\n\t\treturn data.results;\n\t}\n\n\tasync acoustid(file: string, includes: string | undefined): Promise<Array<Acoustid.Result>> {\n\t\ttry {\n\t\t\tconst result = await fpcalc(file, this.options.fpcalc || {});\n\t\t\treturn this.get(result, includes);\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","import {spawnToolJson} from '../../../utils/tool';\n\nexport interface FPCalcOptions {\n\tlength?: number;\n\traw?: boolean;\n}\n\nexport interface FPCalcResult {\n\tduration: number;\n\tfingerprint: string;\n\tfingerprintRaw?: Buffer;\n}\n\nexport async function fpcalc(filename: string, options: FPCalcOptions): Promise<FPCalcResult> {\n\tconst cmds: Array<string> = ['-json'];\n\tif (options.length) {\n\t\tcmds.push('-length', options.length.toFixed(0));\n\t}\n\tif (options.raw) {\n\t\tcmds.push('-raw');\n\t}\n\treturn await spawnToolJson<FPCalcResult>('fpcalc', 'FPCALC_PATH', [...cmds, filename]);\n}\n","import {getBinPath} from './which';\nimport {spawn} from 'child_process';\n\nexport async function spawnToolStream(binName: string, envName: string, args: Array<string>, onData: (buffer: Buffer) => void): Promise<string> {\n\tconst bin = await getBinPath(binName, envName);\n\tif (!bin || bin.length === 0) {\n\t\treturn Promise.reject(Promise.reject('Tool binary not found ' + binName));\n\t}\n\treturn new Promise<string>((resolve, reject) => {\n\t\tconst child = spawn(bin, args);\n\t\tlet stderr = '';\n\t\tchild.stdout.on('data', (data: Buffer) => {\n\t\t\tonData(data);\n\t\t});\n\t\tchild.stderr.on('data', (data: Buffer) => {\n\t\t\tstderr += data.toString();\n\t\t});\n\t\tchild.on('close', (code: number) => {\n\t\t\tresolve(stderr);\n\t\t});\n\t});\n}\n\nexport async function spawnTool(binName: string, envName: string, args: Array<string>): Promise<string> {\n\tconst bin = await getBinPath(binName, envName);\n\tif (!bin || bin.length === 0) {\n\t\treturn Promise.reject('Tool binary not found ' + binName);\n\t}\n\treturn new Promise<string>((resolve, reject) => {\n\t\tconst child = spawn(bin, args);\n\t\tlet result = '';\n\t\tlet error = '';\n\t\tchild.stdout.on('data', (data: Buffer) => {\n\t\t\tresult += data.toString();\n\t\t});\n\t\tchild.stderr.on('data', (data: Buffer) => {\n\t\t\terror += data.toString();\n\t\t});\n\t\tchild.on('close', (code: number) => {\n\t\t\tresolve(result);\n\t\t});\n\t});\n}\n\nexport async function spawnToolJson<T>(binName: string, envName: string, args: Array<string>): Promise<T> {\n\tconst data = await spawnTool(binName, envName, args);\n\tconst result: T = JSON.parse(data);\n\treturn result;\n}\n","import path from 'path';\nimport {NodeDataCallback} from '../typings';\nimport fse from 'fs-extra';\n\nconst isWindows = process && (process.platform === 'win32' || /^(msys|cygwin)$/.test(process.env.OSTYPE || ''));\n\nconst cache: { [name: string]: string; } = {};\n\nconst COLON = isWindows ? ';' : ':';\n\nfunction getPathInfo(cmd: string, opt: any) {\n\tconst colon = opt.colon || COLON;\n\tlet pathEnv = opt.path || process.env.PATH || '';\n\tlet pathExt = [''];\n\n\tpathEnv = pathEnv.split(colon);\n\n\tlet pathExtExe = '';\n\tif (isWindows) {\n\t\tpathEnv.unshift(process.cwd());\n\t\tpathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM');\n\t\tpathExt = pathExtExe.split(colon);\n\n\n\t\t// Always test the cmd itself first.  isexe will check to make sure\n\t\t// it's found in the pathExt set.\n\t\tif (cmd.indexOf('.') !== -1 && pathExt[0] !== '') {\n\t\t\tpathExt.unshift('');\n\t\t}\n\t}\n\n\t// If it has a slash, then we don't bother searching the pathenv.\n\t// just check the file itself, and that's it.\n\tif (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/)) {\n\t\tpathEnv = [''];\n\t}\n\n\treturn {\n\t\tenv: pathEnv,\n\t\text: pathExt,\n\t\textExe: pathExtExe\n\t};\n}\n\nfunction getNotFoundError(cmd: string): Error {\n\tconst er = new Error('not found: ' + cmd);\n\t(<any>er).code = 'ENOENT';\n\treturn er;\n}\n\nfunction checkWindowsMode(filename: string, options: { pathExt?: string }, stat: fse.Stats): boolean {\n\tif (!stat.isSymbolicLink() && !stat.isFile()) {\n\t\treturn false;\n\t}\n\tconst pathext = options.pathExt !== undefined ? options.pathExt : process.env.PATHEXT;\n\tif (!pathext) {\n\t\treturn true;\n\t}\n\tconst pathexts = pathext.split(';');\n\tif (pathexts.indexOf('') !== -1) {\n\t\treturn true;\n\t}\n\tfor (let i = 0; i < pathexts.length; i++) {\n\t\tconst p = pathexts[i].toLowerCase();\n\t\tif (p && filename.substr(-p.length).toLowerCase() === p) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction checkMode(filename: string, options: { pathExt?: string }, stat: fse.Stats): boolean {\n\tconst mod = stat.mode;\n\tconst uid = stat.uid;\n\tconst gid = stat.gid;\n\tconst myUid = /*options.uid !== undefined ? options.uid :*/ process.getuid && process.getuid();\n\tconst myGid = /*options.gid !== undefined ? options.gid :*/ process.getgid && process.getgid();\n\tconst u = parseInt('100', 8);\n\tconst g = parseInt('010', 8);\n\tconst o = parseInt('001', 8);\n\tconst ug = u | g;\n\tconst ret = (mod & o) ||\n\t\t(mod & g) && gid === myGid ||\n\t\t(mod & u) && uid === myUid ||\n\t\t(mod & ug) && myUid === 0;\n\treturn !!ret;\n}\n\nfunction isexeStat(filename: string, options: { pathExt?: string }, stat: fse.Stats) {\n\tif (!stat.isFile()) {\n\t\treturn false;\n\t}\n\tif (!isWindows) {\n\t\treturn checkMode(filename, options, stat);\n\t} else {\n\t\treturn checkWindowsMode(filename, options, stat);\n\t}\n}\n\nfunction isexe(filename: string, options: { pathExt?: string }, cb: NodeDataCallback<boolean>) {\n\tfse.stat(filename, (err, stat) => {\n\t\tcb(err, err ? false : isexeStat(filename, options, stat));\n\t});\n}\n\nexport function whichs(cmd: string, cb: (error: Error | null, result?: Array<string>) => void) {\n\tconst opt: { all?: boolean } = {};\n\tconst info = getPathInfo(cmd, opt);\n\tconst pathEnv = info.env;\n\tconst pathExt = info.ext;\n\tconst pathExtExe = info.extExe;\n\tconst found: Array<string> = [];\n\n\t(function F(i, l) {\n\t\tif (i === l) {\n\t\t\tif (opt.all && found.length) {\n\t\t\t\treturn cb(null, found);\n\t\t\t} else {\n\t\t\t\treturn cb(getNotFoundError(cmd));\n\t\t\t}\n\t\t}\n\n\t\tlet pathPart = pathEnv[i];\n\t\tif (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"') {\n\t\t\tpathPart = pathPart.slice(1, -1);\n\t\t}\n\n\t\tlet p = path.join(pathPart, cmd);\n\t\tif (!pathPart && (/^\\.[\\\\\\/]/).test(cmd)) {\n\t\t\tp = cmd.slice(0, 2) + p;\n\t\t}\n\t\t(function E(ii, ll) {\n\t\t\tif (ii === ll) {\n\t\t\t\treturn F(i + 1, l);\n\t\t\t}\n\t\t\tconst ext = pathExt[ii];\n\t\t\tisexe(p + ext, {pathExt: pathExtExe}, (err, is) => {\n\t\t\t\tif (!err && is) {\n\t\t\t\t\tif (opt.all) {\n\t\t\t\t\t\tfound.push(p + ext);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn cb(null, [p + ext]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn E(ii + 1, ll);\n\t\t\t});\n\t\t})(0, pathExt.length);\n\t})(0, pathEnv.length);\n}\n\nasync function which(name: string): Promise<string | undefined> {\n\treturn new Promise<string | undefined>((resolve, reject) => {\n\t\twhichs(name, (err, result) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else if (result && result.length > 0) {\n\t\t\t\tresolve(result[0]);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\nasync function localBin(name: string): Promise<string | undefined> {\n\tconst s = path.join('.', 'bin', 'tools', name, process.platform, process.arch, name) + (isWindows ? '.exe' : '');\n\tconst exists = await fse.pathExists(s);\n\tif (exists) {\n\t\treturn s;\n\t}\n}\n\nasync function enviroment(envName: string): Promise<string | undefined> {\n\tconst s = process.env[envName];\n\tif (s && s.length > 0) {\n\t\tconst exists = await fse.pathExists(s);\n\t\tif (exists) {\n\t\t\treturn s;\n\t\t}\n\t}\n}\n\nexport async function getBinPath(name: string, envName: string): Promise<string | undefined> {\n\tif (name in cache) {\n\t\treturn cache[name];\n\t}\n\ttry {\n\t\t// Try envName\n\t\tconst s = await enviroment(envName);\n\t\tif (s && s.length > 0) {\n\t\t\tcache[name] = s;\n\t\t\treturn s;\n\t\t}\n\t} catch (e) {\n\t}\n\ttry {\n\t\t// Search in the PATH\n\t\tconst s = await which(name);\n\t\tif (s && s.length > 0) {\n\t\t\tcache[name] = s;\n\t\t\treturn s;\n\t\t}\n\t} catch (e) {\n\t}\n\ttry {\n\t\t// Search in the PATH\n\t\tconst s = await localBin(name);\n\t\tif (s && s.length > 0) {\n\t\t\tcache[name] = s;\n\t\t\treturn s;\n\t\t}\n\t} catch (e) {\n\t}\n}\n","module.exports = require(\"child_process\");","import {WebserviceClient} from '../../../utils/webservice-client';\nimport {LastFM} from '../../../model/lastfm-rest-data';\nimport Logger from '../../../utils/logger';\nimport {LastFMClientApi} from './lastfm-client.interface';\n\nconst log = Logger('LastFM');\n\nexport class LastFMClient extends WebserviceClient {\n\toptions: LastFMClientApi.LastFMClientApiOptions;\n\n\tconstructor(options: LastFMClientApi.LastFMClientApiOptions) {\n\t\t// \"not make more than 5 requests per originating IP address per second\" https://www.last.fm/api/tos\n\t\tsuper(5, 1000, options.userAgent);\n\t\tthis.options = options;\n\t}\n\n\tprivate beautify(obj: any): any {\n\n\t\tconst walk = (o: any, parent: any): any => {\n\t\t\tif (o === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (o === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Array.isArray(o)) {\n\t\t\t\treturn o.map((sub: any) => walk(sub, parent)).filter((sub: any) => sub !== undefined);\n\t\t\t}\n\t\t\tif (typeof o === 'object') {\n\t\t\t\tconst result: any = {};\n\t\t\t\tObject.keys(o).forEach(key => {\n\t\t\t\t\tconst sub = walk(o[key], o);\n\t\t\t\t\tif (sub !== undefined) {\n\t\t\t\t\t\tif (key === '#text') {\n\t\t\t\t\t\t\tresult['url'] = sub;\n\t\t\t\t\t\t} else if (key === '@attr') {\n\t\t\t\t\t\t\tObject.keys(sub).forEach(subkey => {\n\t\t\t\t\t\t\t\tresult[subkey] = sub[subkey];\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (key === 'tags') {\n\t\t\t\t\t\t\tif (sub.tag) {\n\t\t\t\t\t\t\t\tif (!Array.isArray(sub.tag)) {\n\t\t\t\t\t\t\t\t\tsub.tag = [sub.tag];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresult[key] = sub.tag;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult[key] = sub;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (key === 'tracks') {\n\t\t\t\t\t\t\tif (sub.track) {\n\t\t\t\t\t\t\t\tif (!Array.isArray(sub.track)) {\n\t\t\t\t\t\t\t\t\tsub.track = [sub.track];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresult[key] = sub.track;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult[key] = sub;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (key === 'links') {\n\t\t\t\t\t\t\tif (sub.link) {\n\t\t\t\t\t\t\t\tif (!Array.isArray(sub.link)) {\n\t\t\t\t\t\t\t\t\tsub.link = [sub.link];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresult[key] = sub.link;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult[key] = sub;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult[key] = sub;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn o;\n\t\t};\n\t\treturn walk(obj, {});\n\t}\n\n\tprivate async get(api: string, params: { [name: string]: string; }): Promise<LastFM.Result> {\n\t\tlog.info('requesting', api, JSON.stringify(params));\n\t\tparams['method'] = api;\n\t\tconst sorted_params: { [name: string]: string; } = {'method': api};\n\t\tObject.keys(params).forEach(key => {\n\t\t\tsorted_params[key] = params[key];\n\t\t});\n\t\tsorted_params['api_key'] = this.options.key;\n\t\tsorted_params['format'] = 'json';\n\t\tconst data = await this.getJson('http://ws.audioscrobbler.com/2.0/', sorted_params);\n\t\treturn <LastFM.Result>this.beautify(data);\n\t}\n\n\tasync artist(artist: string): Promise<LastFM.Artist | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getInfo\n\t\tconst data = await this.get('artist.getInfo', {artist});\n\t\treturn data.artist;\n\t}\n\n\tasync trackID(mbid: string): Promise<LastFM.Track | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getInfo\n\t\tconst data = await this.get('artist.getInfo', {mbid});\n\t\treturn data.track;\n\t}\n\n\tasync artistID(mbid: string): Promise<LastFM.Artist | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getInfo\n\t\tconst data = await this.get('artist.getInfo', {mbid});\n\t\treturn data.artist;\n\t}\n\n\tasync album(album: string, artist: string): Promise<LastFM.Album | undefined> {\n\t\t// https://www.last.fm/api/show/album.getInfo\n\t\tconst data = await this.get('album.getInfo', {artist, album});\n\t\treturn data.album;\n\t}\n\n\tasync albumID(mbid: string): Promise<LastFM.Album | undefined> {\n\t\t// https://www.last.fm/api/show/album.getInfo\n\t\tconst data = await this.get('album.getInfo', {mbid});\n\t\treturn data.album;\n\t}\n\n\tasync albumIDTopTags(mbid: string): Promise<LastFM.TopTracks | undefined> {\n\t\t// https://www.last.fm/api/show/album.getTopTags\n\t\tconst data = await this.get('album.getTopTags', {mbid});\n\t\treturn data.toptracks;\n\t}\n\n\tasync similarTrack(track: string, artist: string): Promise<LastFM.SimilarTracks | undefined> {\n\t\t// https://www.last.fm/api/show/track.getSimilar\n\t\tconst data = await this.get('track.getSimilar', {track, artist});\n\t\treturn data.similartracks;\n\t}\n\n\tasync similarTrackID(mbid: string): Promise<LastFM.SimilarTracks | undefined> {\n\t\t// https://www.last.fm/api/show/track.getSimilar\n\t\tconst data = await this.get('track.getSimilar', {mbid});\n\t\treturn data.similartracks;\n\t}\n\n\tasync topArtistSongs(artist: string): Promise<LastFM.TopTracks | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getTopTracks\n\t\tconst data = await this.get('artist.getTopTracks', {artist});\n\t\treturn data.toptracks;\n\t}\n\n\tasync topArtistSongsID(mbid: string): Promise<LastFM.TopTracks | undefined> {\n\t\t// https://www.last.fm/api/show/artist.getTopTracks\n\t\tconst data = await this.get('artist.getTopTracks', {mbid});\n\t\treturn data.toptracks;\n\t}\n\n\tasync lookup(type: string, id: string): Promise<LastFM.Result> {\n\t\tif (type === 'album') {\n\t\t\tconst album = await this.albumID(id);\n\t\t\treturn {album};\n\t\t} else if (type === 'album-toptracks') {\n\t\t\tconst toptracks = await this.albumIDTopTags(id);\n\t\t\treturn {toptracks};\n\t\t} else if (type === 'artist') {\n\t\t\tconst artist = await this.artistID(id);\n\t\t\treturn {artist};\n\t\t} else if (type === 'track') {\n\t\t\tconst track = await this.trackID(id);\n\t\t\treturn {track};\n\t\t} else if (type === 'track-similar') {\n\t\t\tconst similartracks = await this.similarTrackID(id);\n\t\t\treturn {similartracks};\n\t\t} else if (type === 'artist-toptracks') {\n\t\t\tconst toptracks = await this.topArtistSongsID(id);\n\t\t\treturn {toptracks};\n\t\t} else {\n\t\t\treturn Promise.reject(Error('Invalid LastFM lookup type parameter'));\n\t\t}\n\t}\n\n}\n","import {WebserviceClient} from '../../../utils/webservice-client';\nimport {LookupBrowseTypes, LookupIncludes} from './musicbrainz-client.types';\nimport {MusicBrainz} from '../../../model/musicbrainz-rest-data';\nimport Logger from '../../../utils/logger';\nimport {MusicbrainzClientApi} from './musicbrainz-client.interface';\n\nconst log = Logger('Musicbrainz');\n\nexport class MusicbrainzClient extends WebserviceClient {\n\toptions = {\n\t\thost: 'http://musicbrainz.org',\n\t\tport: 80,\n\t\tbasePath: '/ws/2/',\n\t\tuserAgent: '',\n\t\tlimit: 25,\n\t\tretryOn: false,\n\t\tretryDelay: 3000,\n\t\tretryCount: 3\n\t};\n\n\tconstructor(options: MusicbrainzClientApi.Options) {\n\t\t// https://musicbrainz.org/doc/XML_Web_Service/Rate_Limiting \"Currently that rate is (on average) 1 request per second. (per ip)\"\n\t\tsuper(1, 1000, options.userAgent);\n\t\tthis.options = Object.assign({}, this.options, options);\n\t}\n\n\tprivate beautify(obj: any): any {\n\t\tconst formatKey = (key: string): string => {\n\t\t\treturn key.split('-').map((value, index) => {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\treturn value[0].toUpperCase() + value.slice(1);\n\t\t\t}).join('');\n\t\t};\n\n\t\tconst walk = (o: any): any => {\n\t\t\tif (o === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (o === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Array.isArray(o)) {\n\t\t\t\treturn o.map((sub: any) => walk(sub)).filter((sub: any) => sub !== undefined);\n\t\t\t}\n\t\t\tif (typeof o === 'object') {\n\t\t\t\tconst result: any = {};\n\t\t\t\tObject.keys(o).forEach(key => {\n\t\t\t\t\tconst sub = walk(o[key]);\n\t\t\t\t\tif (sub !== undefined) {\n\t\t\t\t\t\tresult[formatKey(key)] = sub;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn o;\n\t\t};\n\t\treturn walk(obj);\n\t}\n\n\tprivate concatSearchQuery(query: MusicbrainzClientApi.SearchQuery): string {\n\t\treturn Object.keys(query)\n\t\t\t.filter(key => ((<any>query)[key] !== undefined && (<any>query)[key] !== null))\n\t\t\t.map(key => key + ':\"' + encodeURIComponent((<any>query)[key]) + '\"')\n\t\t\t.join('%20AND%20');\n\t}\n\n\tprivate async get(req: MusicbrainzClientApi.Request): Promise<any> {\n\t\tconst q = Object.keys(req.query)\n\t\t\t.filter(key => (req.query[key] !== undefined && req.query[key] !== null))\n\t\t\t.map(key => key + '=' + req.query[key]);\n\t\tq.push('limit=' + (req.limit || this.options.limit || 25));\n\t\tq.push('offset=' + (req.offset || 0));\n\t\tq.push('fmt=json');\n\t\tconst url = this.options.host + (this.options.port !== 80 ? ':' + this.options.port : '') + req.path + '?' + q.join('&');\n\n\t\tconst isRateLimitError = (body: any): boolean => {\n\t\t\treturn (body && body.error && body.error.indexOf('allowable rate limit') >= 0);\n\t\t\t// \"error\":\"Your requests are exceeding the allowable rate limit. Please see http://wiki.musicbrainz.org/XMLWebService for more information.\"\n\t\t};\n\t\tconst options = this.options;\n\t\tconst get = this.get;\n\n\t\tasync function retry(error: Error): Promise<any> {\n\t\t\tif (options.retryOn && req.retry < options.retryCount) {\n\t\t\t\treq.retry++;\n\t\t\t\tlog.info('rate limit hit, retrying in ' + options.retryDelay + 'ms');\n\t\t\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tget(req).then(resolve).catch(reject);\n\t\t\t\t\t}, options.retryDelay);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(error);\n\t\t\t}\n\t\t}\n\n\t\tlog.info('requesting', JSON.stringify(req));\n\t\ttry {\n\t\t\tconst data = await this.getJson<any>(url, undefined);\n\t\t\tif (isRateLimitError(data)) {\n\t\t\t\treturn retry(Error(data.error));\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (e) {\n\t\t\tconst statusCode = e.statusCode;\n\t\t\tif (statusCode === 502 || statusCode === 503) {\n\t\t\t\treturn retry(e);\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync search(params: MusicbrainzClientApi.ParameterSearch): Promise<MusicBrainz.Response> {\n\t\tconst data = await this.get({\n\t\t\tpath: this.options.basePath + params.type + '/',\n\t\t\tquery: {query: this.concatSearchQuery(params.query || {})},\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\treturn this.beautify(data);\n\t}\n\n\tasync luceneSearch(params: MusicbrainzClientApi.ParameterLuceneSearch): Promise<MusicBrainz.Response> {\n\t\t// https://lucene.apache.org/core/4_3_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description\n\t\tif (!params.query || params.query.length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid query for type ' + params.type));\n\t\t}\n\t\tconst data = await this.get({\n\t\t\tpath: this.options.basePath + params.type + '/',\n\t\t\tquery: {\n\t\t\t\tquery: encodeURIComponent(params.query || '')\n\t\t\t},\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\tconst result: any = {};\n\t\tresult[params.type] = data || {};\n\t\treturn this.beautify(result);\n\t}\n\n\tasync lookup(params: MusicbrainzClientApi.ParameterLookup): Promise<MusicBrainz.Response> {\n\t\tif (!params.id || params.id.length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid lookup id for type ' + params.type));\n\t\t}\n\t\tconst lookup = LookupIncludes[params.type];\n\t\tconst inc = params.inc || LookupIncludes[params.type].join('+');\n\t\tif (!lookup) {\n\t\t\treturn Promise.reject(Error('Invalid Lookup'));\n\t\t}\n\t\tconst data = await this.get({\n\t\t\tpath: this.options.basePath + params.type + '/' + params.id,\n\t\t\tquery: {\n\t\t\t\tmbid: params.id,\n\t\t\t\tinc: inc\n\t\t\t},\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\tconst result: any = {};\n\t\tresult[params.type] = data || {};\n\t\treturn this.beautify(result);\n\t}\n\n\tasync browse(params: MusicbrainzClientApi.ParameterBrowse): Promise<MusicBrainz.Response> {\n\t\tconst invalidKey = Object.keys(params.lookupIds).find(key => !LookupBrowseTypes[params.type] || LookupBrowseTypes[params.type].indexOf(key) < 0);\n\t\tif (invalidKey) {\n\t\t\treturn Promise.reject(Error('Invalid browse lookup key for type ' + params.type + ': ' + invalidKey));\n\t\t}\n\t\tconst query = Object.assign({inc: params.inc}, params.lookupIds);\n\t\tconst data = await this.get({\n\t\t\tpath: this.options.basePath + params.type,\n\t\t\tquery,\n\t\t\tretry: 0,\n\t\t\tlimit: params.limit,\n\t\t\toffset: params.offset\n\t\t});\n\t\tconst result: any = {};\n\t\tresult[params.type] = data || {};\n\t\treturn this.beautify(result);\n\t}\n\n}\n","export const LookupBrowseTypes: { [type: string]: Array<string> } = {\n\tarea: ['collection'],\n\tartist: ['area', 'collection', 'recording', 'release', 'release-group', 'work'],\n\tcollection: ['area', 'artist', 'editor', 'event', 'label', 'place', 'recording', 'release', 'release-group', 'work'],\n\tevent: ['area', 'artist', 'collection', 'place'],\n\tinstrument: ['collection'],\n\tlabel: ['area', 'collection', 'release'],\n\tplace: ['area', 'collection'],\n\trecording: ['artist', 'collection', 'release'],\n\trelease: ['area', 'artist', 'collection', 'label', 'track', 'track_artist', 'recording', 'release-group'],\n\t'release-group': ['artist', 'collection', 'release'],\n\tseries: ['collection'],\n\twork: ['artist', 'collection'],\n\turl: ['resource']\n};\n\nexport const LookupIncludes: { [type: string]: Array<string> } = {\n\tarea: [],\n\tartist: ['recordings', 'releases', 'release-groups', 'works', 'aliases'],\n\tcollection: ['user-collections'],\n\tevent: [],\n\tinstrument: [],\n\tlabel: ['releases'],\n\tplace: [],\n\trecording: ['artists', 'releases', 'artist-credits', 'aliases', 'tags', 'ratings', 'annotation'],\n\trelease: ['artists', 'collections', 'labels', 'recordings', 'release-groups', 'discids', 'media', 'isrcs', 'artist-credits', 'aliases', 'tags', 'annotation'],\n\t'release-group': ['artists', 'releases', 'media', 'artist-credits', 'aliases', 'tags', 'ratings', 'annotation'],\n\tseries: [],\n\twork: [],\n\turl: []\n};\n\nexport const enum LookupEntity {\n\tarea = 'area',\n\tartist = 'artist',\n\tcollection = 'collection',\n\tevent = 'event',\n\tinstrument = 'instrument',\n\tlabel = 'label',\n\tplace = 'place',\n\trecording = 'recording',\n\trelease = 'release',\n\treleaseGroup = 'release-group',\n\tseries = 'series',\n\twork = 'work',\n\turl = 'url'\n}\n","let GenresSlugs: { [slug: string]: string }; // will be build on first use\n\nconst genreByNumbers = [\n\t'Blues',\n\t'Classic Rock',\n\t'Country',\n\t'Dance',\n\t'Disco',\n\t'Funk',\n\t'Grunge',\n\t'Hip Hop',\n\t'Jazz',\n\t'Metal',\n\t'New Age',\n\t'Oldies',\n\t'Other',\n\t'Pop',\n\t'R&B',\n\t'Rap',\n\t'Reggae',\n\t'Rock',\n\t'Techno',\n\t'Industrial',\n\t'Alternative',\n\t'Ska',\n\t'Death Metal',\n\t'Pranks',\n\t'Soundtrack',\n\t'Euro-Techno',\n\t'Ambient',\n\t'Trip-Hop',\n\t'Vocal',\n\t'Jazz+Funk',\n\t'Fusion',\n\t'Trance',\n\t'Classical',\n\t'Instrumental',\n\t'Acid',\n\t'House',\n\t'Game',\n\t'Sound Clip',\n\t'Gospel',\n\t'Noise',\n\t'Alternative Rock',\n\t'Bass',\n\t'Soul',\n\t'Punk',\n\t'Space',\n\t'Meditative',\n\t'Instrumental Pop',\n\t'Instrumental Rock',\n\t'Ethnic',\n\t'Gothic',\n\t'Darkwave',\n\t'Techno-Industrial',\n\t'Electronic',\n\t'Pop-Folk',\n\t'Eurodance',\n\t'Dream',\n\t'Southern Rock',\n\t'Comedy',\n\t'Cult',\n\t'Gangsta Rap',\n\t'Top 40',\n\t'Christian Rap',\n\t'Pop-Funk',\n\t'Jungle',\n\t'Native American',\n\t'Cabaret',\n\t'New Wave',\n\t'Psychedelic',\n\t'Rave',\n\t'Showtunes',\n\t'Trailer',\n\t'Lo-Fi',\n\t'Tribal',\n\t'Acid Punk',\n\t'Acid Jazz',\n\t'Polka',\n\t'Retro',\n\t'Musical',\n\t'Rock & Roll',\n\t'Hard Rock',\n\t'Folk',\n\t'Folk-Rock',\n\t'National Folk',\n\t'Swing',\n\t'Fast Fusion',\n\t'Bebop',\n\t'Latin',\n\t'Revival',\n\t'Celtic',\n\t'Bluegrass',\n\t'Avantgarde',\n\t'Gothic Rock',\n\t'Progressive Rock',\n\t'Psychedelic Rock',\n\t'Symphonic Rock',\n\t'Slow Rock',\n\t'Big Band',\n\t'Chorus',\n\t'Easy Listening',\n\t'Acoustic',\n\t'Humour',\n\t'Speech',\n\t'Chanson',\n\t'Opera',\n\t'Chamber Music',\n\t'Sonata',\n\t'Symphony',\n\t'Booty Bass',\n\t'Primus',\n\t'Porn Groove',\n\t'Satire',\n\t'Slow Jam',\n\t'Club',\n\t'Tango',\n\t'Samba',\n\t'Folklore',\n\t'Ballad',\n\t'Power Ballad',\n\t'Rhythmic Soul',\n\t'Freestyle',\n\t'Duet',\n\t'Punk Rock',\n\t'Drum Solo',\n\t'A Cappella',\n\t'Euro-House',\n\t'Dance Hall',\n\t'Goa',\n\t'Drum & Bass',\n\t'Club-House',\n\t'Hardcore',\n\t'Terror',\n\t'Indie',\n\t'BritPop',\n\t'Weltmusik',\n\t'Polsk Punk',\n\t'Beat',\n\t'Christian Gangsta Rap',\n\t'Heavy Metal',\n\t'Black Metal',\n\t'Crossover',\n\t'Contemporary Christian',\n\t'Christian Rock',\n\t'Merengue',\n\t'Salsa',\n\t'Thrash Metal',\n\t'Anime',\n\t'JPop',\n\t'Synthpop',\n\t'Abstract',\n\t'Art Rock',\n\t'Baroque',\n\t'Bhangra',\n\t'Big Beat',\n\t'Breakbeat',\n\t'Chillout',\n\t'Downtempo',\n\t'Dub',\n\t'EBM',\n\t'Eclectic',\n\t'Electro',\n\t'Electroclash',\n\t'Emo',\n\t'Experimental',\n\t'Garage',\n\t'Global',\n\t'IDM',\n\t'Illbient',\n\t'Industro-Goth',\n\t'Jam Band',\n\t'Krautrock',\n\t'Leftfield',\n\t'Lounge',\n\t'Math Rock',\n\t'New Romantic',\n\t'Nu-Breakz',\n\t'Post-Punk',\n\t'Post-Rock',\n\t'Psytrance',\n\t'Shoegaze',\n\t'Space Rock',\n\t'Trop Rock',\n\t'World Music',\n\t'Neoclassical',\n\t'Audiobook',\n\t'Audio Theatre',\n\t'Neue Deutsche Welle',\n\t'Podcast',\n\t'Indie Rock',\n\t'G-Funk',\n\t'Dubstep',\n\t'Garage Rock',\n\t'Psybient'];\n\nexport const Genres: Array<string> = [\n\t'2 Tone',\n\t'2-Step Garage',\n\t'4-Beat',\n\t'A Cappella',\n\t'Abstract',\n\t'Acid',\n\t'Acid Breaks',\n\t'Acid House',\n\t'Acid Jazz',\n\t'Acid Punk',\n\t'Acid Rock',\n\t'Acid Techno',\n\t'Acid Trance',\n\t'Acousmatic Music',\n\t'Acoustic',\n\t'Adult Contemporary',\n\t'African',\n\t'African Blues',\n\t'African Heavy Metal',\n\t'African Hip Hop',\n\t'Afro / Cosmic Disco',\n\t'Afro-Cuban Jazz',\n\t'Afrobeat',\n\t'Aggrotech',\n\t'Alternative',\n\t'Alternative Country',\n\t'Alternative Dance',\n\t'Alternative Hip Hop',\n\t'Alternative Metal',\n\t'Alternative Rock',\n\t'Ambient',\n\t'Ambient Dub',\n\t'Ambient House',\n\t'American Folk Revival',\n\t'Americana',\n\t'Anarcho Punk',\n\t'Anime',\n\t'Anti-folk',\n\t'Apala',\n\t'Arab Pop',\n\t'Art Punk',\n\t'Art Rock',\n\t'Asian',\n\t'Asian American Jazz',\n\t'Asian Underground',\n\t'Atlanta Hip Hop',\n\t'Audio Theatre',\n\t'Audiobook',\n\t'Australian Country Music',\n\t'Australian Hip Hop',\n\t'AustroPop',\n\t'Avant-garde',\n\t'Avant-garde Jazz',\n\t'Avant-garde Metal',\n\t'Avantgarde',\n\t'Axé',\n\t'Bachata',\n\t'Background Music',\n\t'Baila',\n\t'Baithak Gana',\n\t'Bakersfield sound',\n\t'Balearic Beat',\n\t'Balearic Trance',\n\t'Ballad',\n\t'Baltimore Club',\n\t'Banda',\n\t'Baroque',\n\t'Baroque Pop',\n\t'Bass',\n\t'Bassline',\n\t'Baul',\n\t'Beat',\n\t'Beat Music',\n\t'Beautiful Music',\n\t'Bebop',\n\t'Benga',\n\t'Berlin School',\n\t'Bhangra',\n\t'Big Band',\n\t'Big Beat',\n\t'Big Room',\n\t'Bikutsi',\n\t'BitPop',\n\t'Black Metal',\n\t'Blue-Eyed Soul',\n\t'Bluegrass',\n\t'Blues',\n\t'Blues Country',\n\t'Blues Rock',\n\t'Blues Shouter',\n\t'Bolero',\n\t'Bongo Flava',\n\t'Boogie',\n\t'Boogie-Woogie',\n\t'Booty Bass',\n\t'Bossa Nova',\n\t'Bounce Music',\n\t'Bouncy House',\n\t'Bouncy Techno',\n\t'Bouyon',\n\t'Brazilian',\n\t'Brazilian Rock',\n\t'Breakbeat',\n\t'Breakbeat Hardcore',\n\t'Breakcore',\n\t'Breakstep',\n\t'Brega',\n\t'Brick City club',\n\t'Brill Building',\n\t'British Blues',\n\t'British Dance Band',\n\t'British Folk revival',\n\t'British Hip Hop',\n\t'BritPop',\n\t'Broken Beat',\n\t'Brostep',\n\t'Bubblegum Dance',\n\t'Bubblegum Pop',\n\t'Bullerengue',\n\t'C-Pop',\n\t'Cabaret',\n\t'Cadence-lypso',\n\t'Cajun',\n\t'Cajun fiddle tunes',\n\t'Calypso',\n\t'Canadian Blues',\n\t'Canción',\n\t'Canterbury scene',\n\t'Canzone',\n\t'Cape Jazz',\n\t'Caribbean',\n\t'Celtic',\n\t'Celtic Metal',\n\t'Celtic Music',\n\t'Celtic Punk',\n\t'Cha Cha Cha',\n\t'Chalga',\n\t'Chamber Jazz',\n\t'Chamber Music',\n\t'Chanson',\n\t'Chap Hop',\n\t'Chicago Blues',\n\t'Chicago Hip Hop',\n\t'Chicago House',\n\t'Chicano Rap',\n\t'Chicha',\n\t'Chill-out',\n\t'Chillout',\n\t'Chillstep',\n\t'Chillwave',\n\t'Chimurenga',\n\t'Chinese Rock',\n\t'Chiptune',\n\t'Chopped & Screwed',\n\t'Choro',\n\t'Chorus',\n\t'Christian Country Music',\n\t'Christian Gangsta Rap',\n\t'Christian Hip Hop',\n\t'Christian Metal',\n\t'Christian Pop',\n\t'Christian Punk',\n\t'Christian Rap',\n\t'Christian Rock',\n\t'Chutney',\n\t'Chutney soca',\n\t'Classic Country',\n\t'Classic female Blues',\n\t'Classic Rock',\n\t'Classical',\n\t'Classical crossover',\n\t'Close harmony',\n\t'Club',\n\t'Club-House',\n\t'Coldwave',\n\t'Comedy',\n\t'Compas',\n\t'Complextro',\n\t'Congolese rumba',\n\t'Conscious Hip Hop',\n\t'Contemporary Christian',\n\t'Contemporary Folk',\n\t'Contemporary R&B',\n\t'Continental Jazz',\n\t'Cool Jazz',\n\t'Country',\n\t'Country Blues',\n\t'Country Pop',\n\t'Country Rap',\n\t'Country Rock',\n\t'Country-Rap',\n\t'Coupé-Décalé',\n\t'Western Music',\n\t'CowPunk',\n\t'Criolla',\n\t'Crossover',\n\t'Crossover Jazz',\n\t'Crossover Thrash',\n\t'Crunk',\n\t'Crunkcore',\n\t'Crust Punk',\n\t'Crustgrind',\n\t'Cult',\n\t'Cumbia',\n\t'Cumbia Rap',\n\t'Cybergrind',\n\t'D-beat',\n\t'Dance',\n\t'Dance Hall',\n\t'Dance-Pop',\n\t'Dance-Punk',\n\t'Dance-Rock',\n\t'Dancehall',\n\t'Dancehall Music',\n\t'Dangdut',\n\t'Dansband Music',\n\t'Dark Ambient',\n\t'Dark Cabaret',\n\t'Dark Electro',\n\t'Dark Wave',\n\t'Darkcore',\n\t'Darkcore jungle',\n\t'Darkstep',\n\t'Darkwave',\n\t'Death \\'n\\' roll',\n\t'Death industrial',\n\t'Death Metal',\n\t'Death-Doom',\n\t'Deathcore',\n\t'DeathRock',\n\t'Deep Funk',\n\t'Deep House',\n\t'Delta Blues',\n\t'Desert Rock',\n\t'Detroit Blues',\n\t'Detroit Hip Hop',\n\t'Detroit Techno',\n\t'Digital hardcore',\n\t'Disco',\n\t'Disco polo',\n\t'Diva House',\n\t'Dixieland',\n\t'Djent',\n\t'Doom Metal',\n\t'Doomcore',\n\t'Downtempo',\n\t'Dream',\n\t'Dream Pop',\n\t'Dream Trance',\n\t'Drill',\n\t'Drill & Bass',\n\t'Drone Metal',\n\t'Drone Music',\n\t'Drum & Bass',\n\t'Drum Solo',\n\t'Drumstep',\n\t'Dub',\n\t'Dub Techno',\n\t'Dubstep',\n\t'Dubstyle',\n\t'Dubtronica',\n\t'Duet',\n\t'Dunedin Sound',\n\t'Dutch House',\n\t'East Coast Hip Hop',\n\t'Easy Listening',\n\t'EBM',\n\t'Eclectic',\n\t'Electric Blues',\n\t'Electro',\n\t'Electro House',\n\t'Electro Music',\n\t'Electro Swing',\n\t'Electro-Industrial',\n\t'Electroacoustic',\n\t'Electroacoustic Music',\n\t'Electroclash',\n\t'Electronic',\n\t'Electronic Body Music',\n\t'Electronic Rock',\n\t'Electronica',\n\t'Electronicore',\n\t'ElectroPop',\n\t'ElectroPunk',\n\t'Elevator Music',\n\t'Emo',\n\t'Ethereal Wave',\n\t'Ethnic',\n\t'Ethnic electronica',\n\t'Ethno Jazz',\n\t'Euro Disco',\n\t'Euro-House',\n\t'Euro-Techno',\n\t'Eurobeat',\n\t'Eurodance',\n\t'European free Jazz',\n\t'EuroPop',\n\t'Experimental',\n\t'Experimental Hip Hop',\n\t'Experimental Music',\n\t'Experimental Rock',\n\t'Fado',\n\t'Fann at-Tanbura',\n\t'Fast Fusion',\n\t'Fidget House',\n\t'Fijiri',\n\t'Filk Music',\n\t'Filmi',\n\t'Flamenco',\n\t'Florida Breaks',\n\t'Folk',\n\t'Folk Metal',\n\t'Folk Pop',\n\t'Folk Punk',\n\t'Folk Rock',\n\t'Folk-Rock',\n\t'Folklore',\n\t'Folktronica',\n\t'Forró',\n\t'Franco-Country',\n\t'Freak Folk',\n\t'Freakbeat',\n\t'Free Funk',\n\t'Free Improvisation',\n\t'Free Jazz',\n\t'Free Tekno',\n\t'Freestyle',\n\t'Freestyle Music',\n\t'Freestyle Rap',\n\t'French House',\n\t'French Pop',\n\t'Frevo',\n\t'Fuji Music',\n\t'Full On',\n\t'Funk',\n\t'Funk Carioca',\n\t'Funk Metal',\n\t'Funkstep',\n\t'Funktronica',\n\t'Funky House',\n\t'Furniture Music',\n\t'Fusion',\n\t'Future Garage',\n\t'Future House',\n\t'FuturePop',\n\t'G-Funk',\n\t'Gabba',\n\t'Game',\n\t'Game Boy Music',\n\t'Gamelan',\n\t'Gangsta Rap',\n\t'Garage',\n\t'Garage House',\n\t'Garage Punk',\n\t'Garage Rock',\n\t'Genge',\n\t'Ghetto House',\n\t'Ghettotech',\n\t'Glam Metal',\n\t'Glam Rock',\n\t'Glitch',\n\t'Glitch Hop',\n\t'Global',\n\t'Go-go',\n\t'Goa',\n\t'Goa Trance',\n\t'Golden Age Hip Hop',\n\t'Goregrind',\n\t'Gospel',\n\t'Gospel Blues',\n\t'Gothic',\n\t'Gothic Metal',\n\t'Gothic Rock',\n\t'Grime',\n\t'Grindcore',\n\t'Grindie',\n\t'Groove Metal',\n\t'Grunge',\n\t'Grupera',\n\t'Guajira',\n\t'Gypsy Jazz',\n\t'Gypsy Punk',\n\t'Happy Hardcore',\n\t'Hard Bop',\n\t'Hard House',\n\t'Hard NRG',\n\t'Hard Rock',\n\t'Hard Trance',\n\t'Hardbag',\n\t'Hardcore',\n\t'Hardcore Rap',\n\t'Hardcore Hip Hop',\n\t'Hardcore Punk',\n\t'Hardstep',\n\t'Hardstyle',\n\t'Heavy Metal',\n\t'Hellbilly Music',\n\t'Hi-NRG',\n\t'Highlife',\n\t'Hill Country Blues',\n\t'Hip Hop',\n\t'Hip Hop Soul',\n\t'Hip House',\n\t'Hip Pop',\n\t'Hip Hop',\n\t'Hiplife',\n\t'Hokum',\n\t'Hokum Blues',\n\t'Honky Tonk',\n\t'Horror Punk',\n\t'Horrorcore',\n\t'House',\n\t'House Music',\n\t'Houston Hip Hop',\n\t'Huayno',\n\t'Humour',\n\t'Hyphy',\n\t'IDM',\n\t'Igbo highlife',\n\t'Igbo Rap',\n\t'Illbient',\n\t'Indian Pop',\n\t'Indie',\n\t'Indie Folk',\n\t'Indie Pop',\n\t'Indie Rock',\n\t'Indietronica',\n\t'Industrial',\n\t'Industrial Folk',\n\t'Industrial Hip Hop',\n\t'Industrial Metal',\n\t'Industrial Music',\n\t'Industrial Rock',\n\t'Industro-Goth',\n\t'Instrumental',\n\t'Instrumental Country',\n\t'Instrumental Hip Hop',\n\t'Instrumental Pop',\n\t'Instrumental Rock',\n\t'Iranian Pop',\n\t'Isicathamiya',\n\t'Isolationism',\n\t'Italo Dance',\n\t'Italo Disco',\n\t'Italo House',\n\t'J-Pop',\n\t'Jam Band',\n\t'Jangle Pop',\n\t'Japanoise',\n\t'Jazz',\n\t'Jazz Blues',\n\t'Jazz Fusion',\n\t'Jazz House',\n\t'Jazz Rap',\n\t'Jazz Rock',\n\t'Jazz-Funk',\n\t'Jazz+Funk',\n\t'Jerkin\\'',\n\t'Jersey Club',\n\t'Jit',\n\t'JPop',\n\t'Jùjú',\n\t'Jump Blues',\n\t'Jump-up',\n\t'Jumpstyle',\n\t'Jungle',\n\t'K-Pop',\n\t'Kadongo Kamu',\n\t'Kansas City Blues',\n\t'Kansas City Jazz',\n\t'Kapuka',\n\t'Keroncong',\n\t'Khaliji',\n\t'Kizomba',\n\t'Krautrock',\n\t'Kuduro',\n\t'Kwaito',\n\t'Kwassa Kwassa',\n\t'Kwela',\n\t'Laïkó',\n\t'Lambada',\n\t'Laptronica',\n\t'Latin',\n\t'Latin alternative',\n\t'Latin ballad',\n\t'Latin Christian',\n\t'Latin House',\n\t'Latin Jazz',\n\t'Latin Metal',\n\t'Latin Pop',\n\t'Latin Rock',\n\t'Latin Swing',\n\t'Lavani',\n\t'Leftfield',\n\t'Lento Violento',\n\t'Liquid Dubstep',\n\t'Liquid Funk',\n\t'Livetronica',\n\t'Liwa',\n\t'Lo-fi',\n\t'Lo-Fi',\n\t'Louisiana Blues',\n\t'Louisiana Swamp Pop',\n\t'Lounge',\n\t'Lounge Music',\n\t'Lovers Rock',\n\t'Low Bap',\n\t'Lowercase',\n\t'Luk Krung',\n\t'Luk Thung',\n\t'Lyrical Hip Hop',\n\t'M-Base',\n\t'Mafioso Rap',\n\t'Mainstream Jazz',\n\t'Mákina',\n\t'Makossa',\n\t'Maloya',\n\t'Mambo',\n\t'MandoPop',\n\t'Manila Sound',\n\t'Maracatu',\n\t'Mariachi',\n\t'Marrabenta',\n\t'Math Rock',\n\t'Mathcore',\n\t'Mbalax',\n\t'Mbaqanga',\n\t'Mbube',\n\t'Medieval Metal',\n\t'Meditative',\n\t'Melbourne Bounce',\n\t'Melodic Death Metal',\n\t'Melodic Metalcore',\n\t'Memphis Blues',\n\t'Merengue',\n\t'MerenRap',\n\t'Méringue',\n\t'Metal',\n\t'Metalcore',\n\t'Mexican Pop',\n\t'Mexican Son',\n\t'Miami Bass',\n\t'Microhouse',\n\t'Middle of the road',\n\t'Midwest Hip Hop',\n\t'Minimal Techno',\n\t'Minimal Wave',\n\t'Modal Jazz',\n\t'Moombahcore',\n\t'Moombahton',\n\t'Morlam',\n\t'Morna',\n\t'Mosambique',\n\t'Motswako',\n\t'Música Criolla',\n\t'Música Popular Brasileira',\n\t'Música Sertaneja',\n\t'Musical',\n\t'Musique Concrète',\n\t'Nagoya Kei',\n\t'Nashville Sound',\n\t'National Folk',\n\t'Native American',\n\t'NDW',\n\t'Ndombolo',\n\t'NederPop',\n\t'Neo Soul',\n\t'Neo-Bop Jazz',\n\t'Neo-Psychedelia',\n\t'Neo-Swing',\n\t'Neoclassical',\n\t'Neoclassical Metal',\n\t'Neofolk',\n\t'Neotraditional Country',\n\t'Nerdcore',\n\t'Neue Deutsche Welle',\n\t'NeuroFunk',\n\t'Neurohop',\n\t'New Age',\n\t'New Beat',\n\t'New jack swing',\n\t'New Jersey Hip Hop',\n\t'New Prog',\n\t'New Rave',\n\t'New Romantic',\n\t'New Romanticism',\n\t'New School Hip Hop',\n\t'New Wave',\n\t'New-age Music',\n\t'Nintendocore',\n\t'Nitzhonot',\n\t'No wave',\n\t'Noise',\n\t'Noise Rock',\n\t'Noisegrind',\n\t'Nortec',\n\t'Norteño',\n\t'Northern Soul',\n\t'Novelty Ragtime',\n\t'Nu Jazz',\n\t'Nu Metal',\n\t'Nu Skool Breaks',\n\t'Nu-Breakz',\n\t'Nu-Disco',\n\t'Nu-Funk',\n\t'Nu-Gaze',\n\t'Nu-NRG',\n\t'Nueva canción',\n\t'Old School Hip Hop',\n\t'Oldies',\n\t'Opera',\n\t'Operatic Pop',\n\t'Orchestral Jazz',\n\t'Original Pilipino Music',\n\t'Other',\n\t'Outlaw Country',\n\t'Outsider House',\n\t'P-Funk',\n\t'Pagan Metal',\n\t'Pagode',\n\t'Paisley Underground',\n\t'Palm-wine',\n\t'Piedmont Blues',\n\t'Pinoy Pop',\n\t'Podcast',\n\t'Political Hip Hop',\n\t'Polka',\n\t'Polsk Punk',\n\t'Pop',\n\t'Pop Punk',\n\t'Pop Rap',\n\t'Pop Rock',\n\t'Pop Soul',\n\t'Pop Sunda',\n\t'Pop-Folk',\n\t'Pop-Funk',\n\t'Porn Groove',\n\t'Porro',\n\t'Post-Bop',\n\t'Post-Disco',\n\t'Post-Grunge',\n\t'Post-Hardcore',\n\t'Post-Metal',\n\t'Post-Punk',\n\t'Post-Punk Revival',\n\t'Post-Rock',\n\t'Power Ballad',\n\t'Power Electronics',\n\t'Power Metal',\n\t'Power Noise',\n\t'Power Pop',\n\t'Powerviolence',\n\t'Pranks',\n\t'Primus',\n\t'Progressive Bluegrass',\n\t'Progressive Country',\n\t'Progressive Folk',\n\t'Progressive House',\n\t'Progressive Metal',\n\t'Progressive Pop',\n\t'Progressive Rock',\n\t'Progressive Trance',\n\t'Protest Song',\n\t'Psybient',\n\t'Psychedelic',\n\t'Psychedelic Folk',\n\t'Psychedelic Pop',\n\t'Psychedelic Rock',\n\t'Psychedelic Trance',\n\t'Psychobilly',\n\t'Punkabilly',\n\t'Psytrance',\n\t'Punk',\n\t'Punk Blues',\n\t'Punk Jazz',\n\t'Punk Rock',\n\t'Punta',\n\t'Punta Rock',\n\t'R&B',\n\t'Raga Rock',\n\t'Ragga',\n\t'Ragga Jungle',\n\t'Raggacore',\n\t'Ragini',\n\t'Ragtime',\n\t'Raï',\n\t'Ranchera',\n\t'Rap',\n\t'Rap Metal',\n\t'Rap Music',\n\t'Rap Opera',\n\t'Rap Rock',\n\t'Rapcore',\n\t'Rara tech',\n\t'Rasin',\n\t'Rave',\n\t'Reactionary Bluegrass',\n\t'Rebetiko',\n\t'Red Dirt',\n\t'Reggae',\n\t'Reggae Español',\n\t'Spanish Reggae',\n\t'Reggae Fusion',\n\t'Reggaestep',\n\t'Reggaeton',\n\t'Regional Mexican',\n\t'Retro',\n\t'Revival',\n\t'Rhythm & Blues',\n\t'Rhythmic Soul',\n\t'Riot grrrl',\n\t'Rock',\n\t'Rock & Roll',\n\t'Rock en Español',\n\t'Rock in Opposition',\n\t'Rockabilly',\n\t'Rocksteady',\n\t'Rumba',\n\t'Russian Pop',\n\t'Sadcore',\n\t'Sakara',\n\t'Salsa',\n\t'Salsa romántica',\n\t'Samba',\n\t'Samba Rock',\n\t'Sambass',\n\t'Satire',\n\t'Sawt',\n\t'Schlager',\n\t'Screamo',\n\t'Sega',\n\t'Seggae',\n\t'Semba',\n\t'Sertanejo',\n\t'Shangaan electro',\n\t'Shibuya-kei',\n\t'Shoegaze',\n\t'Showtunes',\n\t'Singer-songwriter',\n\t'Ska',\n\t'Ska Jazz',\n\t'Ska Punk',\n\t'Skate Punk',\n\t'Skiffle',\n\t'Skweee',\n\t'Slow Jam',\n\t'Slow Rock',\n\t'Slowcore',\n\t'Sludge Metal',\n\t'Smooth Jazz',\n\t'Snap Music',\n\t'Soca',\n\t'Soft Rock',\n\t'Son',\n\t'Son Cubano',\n\t'Sonata',\n\t'Songo',\n\t'Songo-Salsa',\n\t'Sophisti-Pop',\n\t'Soukous',\n\t'Soul',\n\t'Soul Blues',\n\t'Soul Jazz',\n\t'Sound Clip',\n\t'Soundtrack',\n\t'Southern Hip Hop',\n\t'Southern Rock',\n\t'Southern Soul',\n\t'Space',\n\t'Space Age Pop',\n\t'Space Disco',\n\t'Space Music',\n\t'Space Rock',\n\t'Speech',\n\t'Speed garage',\n\t'Speed Metal',\n\t'Speedcore',\n\t'St.Louis Blues',\n\t'St.Louis Hip Hop',\n\t'Stoner Rock',\n\t'Straight-ahead Jazz',\n\t'Street Punk',\n\t'Stride Jazz',\n\t'Sufi Rock',\n\t'SungPoetry',\n\t'Sunshine Pop',\n\t'Suomisaundi',\n\t'Surf Pop',\n\t'Surf Rock',\n\t'Swamp Blues',\n\t'Swing',\n\t'Symphonic black Metal',\n\t'Symphonic Metal',\n\t'Symphonic Rock',\n\t'Symphony',\n\t'Synthpop',\n\t'SynthPop',\n\t'Synthwave',\n\t'Taarab',\n\t'Tango',\n\t'Tech House',\n\t'Tech Trance',\n\t'Techdombe',\n\t'Technical death Metal',\n\t'Techno',\n\t'Techno-Industrial',\n\t'Techstep',\n\t'Tecno Brega',\n\t'Tecnobrega',\n\t'Teen Pop',\n\t'Tejano',\n\t'Terror',\n\t'Texas Blues',\n\t'Texas Country',\n\t'Thai Pop',\n\t'Third stream',\n\t'Thrash Metal',\n\t'Thrashcore',\n\t'Timba',\n\t'Top 40',\n\t'Trad Jazz',\n\t'Traditional Country Music',\n\t'Traditional Pop Music',\n\t'Trailer',\n\t'Trance',\n\t'Trance Music',\n\t'TRap',\n\t'TRapstep',\n\t'Tribal',\n\t'Tribal House',\n\t'Trip hop',\n\t'Trip-Hop',\n\t'Trival',\n\t'Trop Rock',\n\t'Tropical',\n\t'Tropical House',\n\t'Tropicalia',\n\t'TropiPop',\n\t'Truck-driving Country',\n\t'Turkish Pop',\n\t'Turntablism',\n\t'Twin Cities Hip Hop',\n\t'Twoubadou',\n\t'UK Funky',\n\t'UK Garage',\n\t'UK Hardcore',\n\t'Unblack Metal',\n\t'Underground Hip Hop',\n\t'Uplifting Trance',\n\t'Urban Pasifika',\n\t'V-Pop',\n\t'Vallenato',\n\t'Vaporwave',\n\t'Video game Music',\n\t'Viking Metal',\n\t'VisPop',\n\t'Visual Kei',\n\t'Vocal',\n\t'Vocal Jazz',\n\t'Vocal Trance',\n\t'War Metal',\n\t'Weltmusik',\n\t'West Coast Blues',\n\t'West Coast Hip Hop',\n\t'West Coast Jazz',\n\t'Western swing',\n\t'Witch House',\n\t'Wonky',\n\t'Wonky Pop',\n\t'World Fusion',\n\t'World Music',\n\t'Worldbeat',\n\t'Zouglou',\n\t'Zouk',\n\t'Zouk-Lambada',\n\t'Zydeco'\n];\n\nfunction slugify(genre: string): string {\n\treturn genre.replace(/[& \\-\\.]/g, '').toLowerCase();\n}\n\nexport function getKnownGenre(genre: string): string | undefined {\n\tconst slug = slugify(genre);\n\tif (!GenresSlugs) {\n\t\tGenresSlugs = {};\n\t\tGenres.forEach(g => {\n\t\t\tGenresSlugs[slugify(g)] = g;\n\t\t});\n\t}\n\treturn GenresSlugs[slug];\n}\n\nexport function cleanGenre(genre: string): string {\n\tconst results: Array<string> = [];\n\tconst parts = genre.split('/');\n\tparts.forEach((part: string) => {\n\t\t// test for (number)\n\t\tpart = part.trim();\n\t\tconst numpart = /\\((\\d+)\\)/.exec(part);\n\t\tlet num: number | undefined;\n\t\tif (numpart) {\n\t\t\tnum = parseInt(numpart[1], 10);\n\t\t\tpart = part.slice(0, numpart.index) + part.slice(numpart.index + numpart[0].length);\n\t\t}\n\t\tif (part.length === 0 && (num !== undefined)) {\n\t\t\tconst s = genreByNumbers[num];\n\t\t\tif (s) {\n\t\t\t\tpart = s;\n\t\t\t}\n\t\t}\n\t\tif (part.length > 0) {\n\t\t\tconst slug = slugify(part);\n\t\t\tlet result: string | undefined;\n\t\t\tif (!GenresSlugs) {\n\t\t\t\tGenresSlugs = {};\n\t\t\t\tGenres.forEach(g => {\n\t\t\t\t\tGenresSlugs[slugify(g)] = g;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (GenresSlugs && GenresSlugs[slug]) {\n\t\t\t\tresult = GenresSlugs[slug];\n\t\t\t}\n\t\t\tif (!result && part.indexOf(' & ') >= 0) {\n\t\t\t\tconst subParts = part.split('&');\n\t\t\t\tsubParts.forEach(sub => {\n\t\t\t\t\tsub = cleanGenre(sub);\n\t\t\t\t\tif (results.indexOf(sub) < 0) {\n\t\t\t\t\t\tresults.push(sub);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (result) {\n\t\t\t\tif (results.indexOf(result) < 0) {\n\t\t\t\t\tresults.push(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (results.indexOf(part) < 0) {\n\t\t\t\t\tresults.push(part);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\treturn results.join(' / ');\n}\n","import path from 'path';\nimport {IndexConfig} from '../../config';\nimport {ArtistIndex, ArtistIndexEntry, FolderIndex, FolderIndexEntry, Indexes} from './index.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {ArtistStore} from '../../objects/artist/artist.store';\nimport {FolderStore} from '../../objects/folder/folder.store';\nimport {TrackStore} from '../../objects/track/track.store';\n\nexport class IndexTreeBuilder {\n\tprivate ignore: string;\n\n\tconstructor(indexConfig: IndexConfig, private artistStore: ArtistStore, private folderStore: FolderStore, private trackStore: TrackStore) {\n\t\tthis.ignore = indexConfig.ignore.join('|');\n\t}\n\n\tremoveArticles(name: string): string {\n\t\t// /^(?:(?:the|los|les)\\s+)?(.*)/gi\n\t\tconst matches = new RegExp('^(?:(?:' + this.ignore + ')\\\\s+)?(.*)', 'gi').exec(name);\n\t\treturn matches ? matches[1] : name;\n\t}\n\n\tgetIndexChar(name: string, sortname?: string): string {\n\t\tconst c = (sortname || this.removeArticles(name) || '').trim().toUpperCase().charAt(0);\n\t\tconst regex_symbols = /[-!$%^&*()_+|~=`{}\\[\\]:\\/;<>?,.@#\\d]/;\n\t\tif (c.match(regex_symbols) === null) {\n\t\t\treturn c;\n\t\t}\n\t\treturn '#';\n\t}\n\n\tasync buildArtistIndex(): Promise<ArtistIndex> {\n\t\tconst result: ArtistIndex = {groups: [], lastModified: Date.now()};\n\t\tconst artists = await this.artistStore.all();\n\t\tartists.forEach(artist => {\n\t\t\tconst entry: ArtistIndexEntry = {artist};\n\t\t\tconst indexChar = this.getIndexChar(artist.name, artist.nameSort);\n\t\t\tlet group = result.groups.find(g => g.name === indexChar);\n\t\t\tif (!group) {\n\t\t\t\tgroup = {name: indexChar, entries: []};\n\t\t\t\tresult.groups.push(group);\n\t\t\t}\n\t\t\tgroup.entries.push(entry);\n\t\t});\n\t\tresult.groups.forEach(group => {\n\t\t\tgroup.entries.sort((a, b) => {\n\t\t\t\treturn a.artist.name.localeCompare(b.artist.name);\n\t\t\t});\n\t\t});\n\t\tresult.groups.sort((a, b) => {\n\t\t\treturn a.name.localeCompare(b.name);\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate async getTotalTrackCount(folder: Folder): Promise<number> {\n\t\treturn this.trackStore.searchCount({inPath: folder.path});\n\t}\n\n\tasync buildFolderIndex(): Promise<FolderIndex> {\n\t\tconst result: FolderIndex = {groups: [], lastModified: Date.now()};\n\t\tconst folders = await this.folderStore.search({level: 1});\n\t\tfor (const folder of folders) {\n\t\t\tconst trackCount = await this.getTotalTrackCount(folder);\n\t\t\tconst entry: FolderIndexEntry = {\n\t\t\t\tname: path.basename(folder.path),\n\t\t\t\tnameSort: folder.tag.artistSort || this.removeArticles(path.basename(folder.path)),\n\t\t\t\ttrackCount: trackCount || 0,\n\t\t\t\tfolder\n\t\t\t};\n\t\t\tconst indexChar = this.getIndexChar(entry.name, entry.nameSort);\n\t\t\tlet group = result.groups.find(g => g.name === indexChar);\n\t\t\tif (!group) {\n\t\t\t\tgroup = {name: indexChar, entries: []};\n\t\t\t\tresult.groups.push(group);\n\t\t\t}\n\t\t\tgroup.entries.push(entry);\n\t\t}\n\t\tresult.groups.forEach(group => {\n\t\t\tgroup.entries.sort((a, b) => {\n\t\t\t\treturn a.nameSort.localeCompare(b.nameSort);\n\t\t\t});\n\t\t});\n\t\tresult.groups.sort((a, b) => {\n\t\t\treturn a.name.localeCompare(b.name);\n\t\t});\n\t\treturn result;\n\t}\n\n\tasync buildIndexes(): Promise<Indexes> {\n\t\tconst folderIndex = await this.buildFolderIndex();\n\t\tconst artistIndex = await this.buildArtistIndex();\n\t\treturn {folderIndex, artistIndex};\n\t}\n}\n\nexport class IndexService {\n\tprivate cached?: Indexes;\n\n\tconstructor(public indexConfig: IndexConfig, private artistStore: ArtistStore, private folderStore: FolderStore, private trackStore: TrackStore) {\n\t}\n\n\tasync buildIndexes(): Promise<void> {\n\t\tconst builder = new IndexTreeBuilder(this.indexConfig, this.artistStore, this.folderStore, this.trackStore);\n\t\tthis.cached = await builder.buildIndexes();\n\t}\n\n\tasync getIndexes(forceRebuild: boolean): Promise<Indexes> {\n\t\tif (forceRebuild || !this.cached) {\n\t\t\tawait this.buildIndexes();\n\t\t}\n\t\treturn <Indexes>this.cached;\n\t}\n\n\tasync getFolderIndex(forceRebuild: boolean): Promise<FolderIndex> {\n\t\tconst indexes = await this.getIndexes(forceRebuild);\n\t\treturn indexes.folderIndex;\n\t}\n\n\tasync getArtistIndex(forceRebuild: boolean): Promise<ArtistIndex> {\n\t\tconst indexes = await this.getIndexes(forceRebuild);\n\t\treturn indexes.artistIndex;\n\t}\n\n\tfilterFolderIndex(rootID: string | undefined, folderIndex: FolderIndex): FolderIndex {\n\t\tif (!rootID) {\n\t\t\treturn folderIndex;\n\t\t}\n\t\treturn {\n\t\t\tlastModified: folderIndex.lastModified,\n\t\t\tgroups: folderIndex.groups.map(group => {\n\t\t\t\treturn {\n\t\t\t\t\tname: group.name,\n\t\t\t\t\tentries: group.entries.filter(entry => entry.folder.rootID === rootID)\n\t\t\t\t};\n\t\t\t}).filter(group => group.entries.length > 0)\n\t\t};\n\t}\n\n\tfilterArtistIndex(rootID: string | undefined, artistIndex: ArtistIndex): ArtistIndex {\n\t\tif (!rootID) {\n\t\t\treturn artistIndex;\n\t\t}\n\t\treturn {\n\t\t\tlastModified: artistIndex.lastModified,\n\t\t\tgroups: artistIndex.groups.map(group => {\n\t\t\t\treturn {\n\t\t\t\t\tname: group.name,\n\t\t\t\t\tentries: group.entries.filter(entry => entry.artist.rootIDs.indexOf(rootID) >= 0)\n\t\t\t\t};\n\t\t\t}).filter(group => group.entries.length > 0)\n\t\t};\n\t}\n\n}\n","import {FolderType} from '../../types';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {shuffle} from '../../utils/random';\nimport Logger from '../../utils/logger';\nimport {MetaInfo, MetaInfoAlbum, MetaInfoArtist, MetaInfoArtistSimilarArtist, MetaInfoFolderSimilarArtist, MetaInfoSimilarArtist, MetaInfoTopSong, MetaInfoTrack, MetaInfoTrackSimilarSong} from '../../modules/audio/metadata.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {Artist} from '../../objects/artist/artist.model';\nimport {Album} from '../../objects/album/album.model';\nimport {Track} from '../../objects/track/track.model';\nimport {ArtistStore} from '../../objects/artist/artist.store';\nimport {AlbumStore} from '../../objects/album/album.store';\nimport {TrackStore} from '../../objects/track/track.store';\nimport {FolderStore} from '../../objects/folder/folder.store';\n\nconst log = Logger('MetaDataService');\n\nexport class MetaDataService {\n\n\tconstructor(private folderStore: FolderStore, private trackStore: TrackStore, private albumStore: AlbumStore, private artistStore: ArtistStore, private audioModule: AudioModule) {\n\t}\n\n\tprivate async getInfo(isArtist: boolean, artistId: string | undefined, artistName: string | undefined, albumId: string | undefined, albumName: string | undefined): Promise<MetaInfo> {\n\t\tconst audio = this.audioModule;\n\n\t\tasync function checkAlbumById(): Promise<MetaInfoAlbum | undefined> {\n\t\t\tif (albumId) {\n\t\t\t\treturn audio.mediaInfoAlbumInfoByAlbumID(albumId);\n\t\t\t}\n\t\t}\n\n\t\tasync function checkAlbumByNameAndArtist(): Promise<MetaInfoAlbum | undefined> {\n\t\t\tif (artistName && albumName) {\n\t\t\t\treturn audio.mediaInfoAlbumInfo(albumName, artistName);\n\t\t\t}\n\t\t}\n\n\t\tasync function checkAlbum(): Promise<MetaInfoAlbum | undefined> {\n\t\t\tconst data = await checkAlbumById();\n\t\t\tif (data) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\treturn checkAlbumByNameAndArtist();\n\t\t}\n\n\t\tasync function checkArtist(): Promise<MetaInfoArtist | undefined> {\n\t\t\tif (artistId) {\n\t\t\t\treturn audio.mediaInfoArtistInfoByArtistID(artistId);\n\t\t\t} else if (artistName) {\n\t\t\t\treturn audio.mediaInfoArtistInfo(artistName);\n\t\t\t}\n\t\t}\n\n\t\tasync function checkTopSongs(): Promise<Array<MetaInfoTopSong> | undefined> {\n\t\t\tif (artistId) {\n\t\t\t\treturn audio.mediaInfoTopSongsByArtistID(artistId);\n\t\t\t} else if (artistName) {\n\t\t\t\treturn audio.mediaInfoTopSongs(artistName);\n\t\t\t}\n\t\t}\n\n\n\t\tif (isArtist) {\n\t\t\tconst artist = await checkArtist();\n\t\t\tconst topSongs = await checkTopSongs();\n\t\t\treturn {\n\t\t\t\tartist: artist || {},\n\t\t\t\ttopSongs: topSongs || [],\n\t\t\t\talbum: {}\n\t\t\t};\n\t\t} else {\n\t\t\tconst album = await checkAlbum();\n\t\t\treturn {\n\t\t\t\tartist: {},\n\t\t\t\ttopSongs: [],\n\t\t\t\talbum: album || {}\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate async createFolderInfo(folder: Folder): Promise<MetaInfo | undefined> {\n\t\tif (!folder.tag) {\n\t\t\treturn {\n\t\t\t\tartist: {},\n\t\t\t\talbum: {},\n\t\t\t\ttopSongs: []\n\t\t\t};\n\t\t}\n\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\treturn this.getInfo(true, folder.tag.mbArtistID, folder.tag.artist, folder.tag.mbAlbumID, folder.tag.album);\n\t\t} else if ((folder.tag.type === FolderType.album) || (folder.tag.type === FolderType.multialbum)) {\n\t\t\treturn this.getInfo(false, folder.tag.mbArtistID, folder.tag.artist, folder.tag.mbAlbumID, folder.tag.album);\n\t\t}\n\t}\n\n\tprivate async createArtistInfo(artist: Artist): Promise<MetaInfo> {\n\t\treturn this.getInfo(true, artist.mbArtistID, artist.name, undefined, undefined);\n\t}\n\n\tprivate async createAlbumInfo(album: Album): Promise<MetaInfo> {\n\t\treturn this.getInfo(false, album.mbArtistID, album.artist, album.mbAlbumID, album.name);\n\t}\n\n\tprivate async createTrackInfo(track: Track): Promise<MetaInfoTrack> {\n\t\tif (!track.tag) {\n\t\t\treturn {similar: []};\n\t\t}\n\t\tif (track.tag.mbTrackID) {\n\t\t\tconst tracks = await this.audioModule.mediaInfoSimilarTrackByMBTrackID(track.tag.mbTrackID);\n\t\t\tif (tracks) {\n\t\t\t\treturn {similar: tracks};\n\t\t\t}\n\t\t} else if (track.tag.artist && track.tag.title) {\n\t\t\tconst tracks = await this.audioModule.mediaInfoSimilarTrack(track.tag.title, track.tag.artist);\n\t\t\tif (tracks) {\n\t\t\t\treturn {similar: tracks};\n\t\t\t}\n\t\t}\n\t\treturn {similar: []};\n\t}\n\n\tprivate async updateArtistInfo(artist: Artist): Promise<MetaInfo> {\n\t\tlet info: MetaInfo;\n\t\ttry {\n\t\t\tinfo = await this.createArtistInfo(artist);\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn {album: {}, artist: {}, topSongs: []};\n\t\t}\n\t\tinfo = info || {album: {}, artist: {}, topSongs: []};\n\t\tartist.info = info;\n\t\tawait this.artistStore.replace(artist);\n\t\treturn info;\n\t}\n\n\tprivate async updateAlbumInfo(album: Album): Promise<MetaInfo> {\n\t\tlet info: MetaInfo;\n\t\ttry {\n\t\t\tinfo = await this.createAlbumInfo(album);\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn {album: {}, artist: {}, topSongs: []};\n\t\t}\n\t\tinfo = info || {album: {}, artist: {}, topSongs: []};\n\t\talbum.info = info;\n\t\tawait this.albumStore.replace(album);\n\t\treturn info;\n\t}\n\n\tprivate async updateTrackInfo(track: Track): Promise<MetaInfoTrack> {\n\t\tlet info: MetaInfoTrack;\n\t\ttry {\n\t\t\tinfo = await this.createTrackInfo(track);\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn {similar: []};\n\t\t}\n\t\tinfo = info || {similar: []};\n\t\ttrack.info = info;\n\t\tawait this.trackStore.replace(track);\n\t\treturn info;\n\t}\n\n\tprivate async updateFolderInfo(folder: Folder): Promise<MetaInfo> {\n\t\tlet info: MetaInfo | undefined;\n\t\ttry {\n\t\t\tinfo = await this.createFolderInfo(folder);\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn {album: {}, artist: {}, topSongs: []};\n\t\t}\n\t\tinfo = info || {album: {}, artist: {}, topSongs: []};\n\t\tfolder.info = info;\n\t\tawait this.folderStore.replace(folder);\n\t\treturn info;\n\t}\n\n\tprivate async getSimilarSongs(similar: Array<MetaInfoSimilarArtist>): Promise<Array<MetaInfoTrackSimilarSong>> {\n\t\tconst audio = this.audioModule;\n\n\t\tasync function checkTopSongs(artist: MetaInfoSimilarArtist): Promise<Array<MetaInfoTopSong> | void> {\n\t\t\tif (artist.mbid) {\n\t\t\t\treturn audio.mediaInfoTopSongsByArtistID(artist.mbid);\n\t\t\t} else if (artist.name) {\n\t\t\t\treturn audio.mediaInfoTopSongs(artist.name);\n\t\t\t}\n\t\t}\n\n\t\tlet tracks: Array<MetaInfoTrackSimilarSong> = [];\n\t\tfor (const artist of similar) {\n\t\t\tconst songs = await checkTopSongs(artist);\n\t\t\tif (songs) {\n\t\t\t\ttracks = tracks.concat(songs.map(song => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: song.name,\n\t\t\t\t\t\tartist: song.artist,\n\t\t\t\t\t\tmbid: song.mbid,\n\t\t\t\t\t\turl: song.url,\n\t\t\t\t\t\timage: song.image\n\t\t\t\t\t};\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\treturn shuffle<MetaInfoTrackSimilarSong>(tracks);\n\t}\n\n\tprivate async getSimilarArtistTracks(similars: Array<MetaInfoSimilarArtist>): Promise<Array<Track>> {\n\t\tif (!similars || similars.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst similar = await this.getSimilarSongs(similars);\n\t\tconst ids: Array<MetaInfoTrackSimilarSong> = [];\n\t\tconst vals: Array<MetaInfoTrackSimilarSong> = [];\n\t\tconst result: Array<Track> = [];\n\t\tsimilar.forEach(sim => {\n\t\t\tif (sim.mbid) {\n\t\t\t\tids.push(sim);\n\t\t\t} else {\n\t\t\t\tvals.push(sim);\n\t\t\t}\n\t\t});\n\t\tconst mbTrackIDs = ids.map(track => track.mbid || '-').filter(id => id !== '-');\n\t\tconst tracks = await this.trackStore.search({mbTrackIDs});\n\t\tids.forEach(sim => {\n\t\t\tconst t = tracks.find(tr => tr.tag.mbTrackID === sim.mbid);\n\t\t\tif (!t) {\n\t\t\t\tvals.push(sim);\n\t\t\t} else {\n\t\t\t\tresult.push(t);\n\t\t\t}\n\t\t});\n\t\tfor (const sim of vals) {\n\t\t\tconst track = await this.trackStore.searchOne({title: sim.name, artist: sim.artist.name});\n\t\t\tif (track) {\n\t\t\t\tresult.push(track);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync getFolderSimilarArtists(info: MetaInfo, includeNotPresent: boolean): Promise<Array<MetaInfoFolderSimilarArtist>> {\n\t\tif (!info.artist.similar) {\n\t\t\treturn [];\n\t\t}\n\t\tconst names: Array<string> = [];\n\t\tconst artistsHash: {\n\t\t\t[name: string]: {\n\t\t\t\tinfo: MetaInfoSimilarArtist;\n\t\t\t\tfolder?: Folder;\n\t\t\t}\n\t\t} = {};\n\t\tinfo.artist.similar.forEach(a => {\n\t\t\tif (a.name) {\n\t\t\t\tnames.push(a.name);\n\t\t\t\tartistsHash[a.name] = {info: a};\n\t\t\t}\n\t\t});\n\t\tconst folders = await this.folderStore.search({types: [FolderType.artist], artists: names});\n\t\tfolders.forEach(f => {\n\t\t\tconst name = f.tag.artist || '';\n\t\t\tif (artistsHash[name]) {\n\t\t\t\tartistsHash[name].folder = f;\n\t\t\t} else {\n\t\t\t\tconsole.log('what? a child not in the name list?', f, artistsHash);\n\t\t\t}\n\t\t});\n\t\tconst artists: Array<MetaInfoFolderSimilarArtist> = [];\n\t\tObject.keys(artistsHash).forEach(key => {\n\t\t\tconst a = artistsHash[key];\n\t\t\tif (a.folder) {\n\t\t\t\tconst artist: MetaInfoFolderSimilarArtist = {\n\t\t\t\t\t// id: a.folder.id,\n\t\t\t\t\tname: key,\n\t\t\t\t\tfolder: a.folder\n\t\t\t\t};\n\t\t\t\tartists.push(artist);\n\t\t\t} else if (includeNotPresent) {\n\t\t\t\tconst artist: MetaInfoFolderSimilarArtist = {\n\t\t\t\t\tname: key\n\t\t\t\t};\n\t\t\t\tartists.push(artist);\n\t\t\t}\n\t\t});\n\t\treturn artists;\n\t}\n\n\tasync getSimilarArtists(info: MetaInfo, includeNotPresent: boolean): Promise<Array<MetaInfoArtistSimilarArtist>> {\n\t\tif (!info.artist.similar) {\n\t\t\treturn [];\n\t\t}\n\t\tconst names: Array<string> = [];\n\t\tconst artistsHash: {\n\t\t\t[name: string]: {\n\t\t\t\tinfo: MetaInfoSimilarArtist;\n\t\t\t\tartist?: Artist;\n\t\t\t}\n\t\t} = {};\n\t\tinfo.artist.similar.forEach(a => {\n\t\t\tif (a.name) {\n\t\t\t\tnames.push(a.name);\n\t\t\t\tartistsHash[a.name] = {info: a};\n\t\t\t}\n\t\t});\n\t\tconst artists = await this.artistStore.search({names});\n\t\tartists.forEach(a => {\n\t\t\tconst name = a.name || '';\n\t\t\tif (artistsHash[name]) {\n\t\t\t\tartistsHash[name].artist = a;\n\t\t\t} else {\n\t\t\t\tconsole.log('what? a child not in the name list?', a, artistsHash);\n\t\t\t}\n\t\t});\n\t\tconst result: Array<MetaInfoFolderSimilarArtist> = [];\n\t\tObject.keys(artistsHash).forEach(key => {\n\t\t\tconst a = artistsHash[key];\n\t\t\tif (a.artist) {\n\t\t\t\tconst artist: MetaInfoArtistSimilarArtist = {\n\t\t\t\t\t// id: a.folder.id,\n\t\t\t\t\tname: key,\n\t\t\t\t\tartist: a.artist\n\t\t\t\t};\n\t\t\t\tresult.push(artist);\n\t\t\t} else if (includeNotPresent) {\n\t\t\t\tconst artist: MetaInfoArtistSimilarArtist = {\n\t\t\t\t\tname: key\n\t\t\t\t};\n\t\t\t\tresult.push(artist);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tasync getFolderArtistInfo(folder: Folder, includeNotPresent: boolean, includeSimilar: boolean): Promise<{ similar?: Array<MetaInfoFolderSimilarArtist>, info: MetaInfo }> {\n\t\tlet info = folder.info;\n\t\tif (!info) {\n\t\t\tinfo = await this.updateFolderInfo(folder);\n\t\t}\n\t\tif (!includeSimilar || !info.artist.similar) {\n\t\t\treturn {info};\n\t\t}\n\t\tconst similar = await this.getFolderSimilarArtists(info, includeNotPresent);\n\t\treturn {similar, info};\n\t}\n\n\tasync getArtistInfos(artist: Artist, includeNotPresent: boolean, includeSimilar: boolean): Promise<{ similar?: Array<MetaInfoArtistSimilarArtist>, info: MetaInfo }> {\n\t\tlet info = artist.info;\n\t\tif (!info) {\n\t\t\tinfo = await this.updateArtistInfo(artist);\n\t\t}\n\t\tif (!includeSimilar || !info.artist.similar) {\n\t\t\treturn {info};\n\t\t}\n\t\tconst similar = await this.getSimilarArtists(info, includeNotPresent);\n\t\treturn {similar, info};\n\t}\n\n\tasync getFolderInfo(folder: Folder): Promise<MetaInfo> {\n\t\tif (folder.info) {\n\t\t\treturn folder.info;\n\t\t} else {\n\t\t\treturn this.updateFolderInfo(folder);\n\t\t}\n\t}\n\n\tasync getAlbumInfo(album: Album): Promise<MetaInfo> {\n\t\tif (album.info) {\n\t\t\treturn album.info;\n\t\t} else {\n\t\t\treturn this.updateAlbumInfo(album);\n\t\t}\n\t}\n\n\tasync getTrackInfo(track: Track): Promise<MetaInfoTrack | undefined> {\n\t\tif (track.info) {\n\t\t\treturn track.info;\n\t\t}\n\t}\n\n\tasync getTopTracks(artist: string, count: number): Promise<Array<Track>> {\n\t\tconst folder = await this.folderStore.searchOne({types: [FolderType.artist], artist});\n\t\tif (!folder) {\n\t\t\treturn [];\n\t\t}\n\t\tlet info = folder.info;\n\t\tif (!info) {\n\t\t\tinfo = await this.updateFolderInfo(folder);\n\t\t}\n\t\tif (info.topSongs && info.topSongs.length > 0) {\n\t\t\tconst ids: Array<MetaInfoTopSong> = [];\n\t\t\tconst vals: Array<MetaInfoTopSong> = [];\n\t\t\tconst result: Array<Track> = [];\n\t\t\tinfo.topSongs.forEach(top => {\n\t\t\t\tif (top.mbid) {\n\t\t\t\t\tids.push(top);\n\t\t\t\t} else {\n\t\t\t\t\tvals.push(top);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst mbTrackIDs = ids.map(track => track.mbid || '-').filter(i => i !== '-');\n\t\t\tconst tracks = await this.trackStore.search({mbTrackIDs});\n\t\t\tids.forEach(sim => {\n\t\t\t\tconst t = tracks.find(tr => tr.tag.mbTrackID === sim.mbid);\n\t\t\t\tif (!t) {\n\t\t\t\t\tvals.push(sim);\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfor (const top of vals) {\n\t\t\t\tconst track = await this.trackStore.searchOne({title: top.name, artist: top.artist.name});\n\t\t\t\tif (track) {\n\t\t\t\t\tresult.push(track);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn [];\n\t}\n\n\tasync getAlbumSimilarTracks(album: Album): Promise<Array<Track>> {\n\t\tconst info = await this.getAlbumInfo(album);\n\t\tif (!info || !info.artist.similar) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getSimilarArtistTracks(info.artist.similar);\n\t}\n\n\tasync getArtistSimilarTracks(artist: Artist): Promise<Array<Track>> {\n\t\tconst info = await this.getArtistInfos(artist, false, false);\n\t\tif (!info || !info.similar) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getSimilarArtistTracks(info.similar);\n\t}\n\n\tasync getFolderSimilarTracks(folder: Folder): Promise<Array<Track>> {\n\t\tconst info = await this.getFolderInfo(folder);\n\t\tif (!info || !info.artist.similar) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getSimilarArtistTracks(info.artist.similar);\n\t}\n\n\tasync getTrackSimilarTracks(track: Track): Promise<Array<Track>> {\n\t\tconst info = await this.getTrackInfo(track);\n\t\tif (!info || !info.similar || info.similar.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst ids: Array<MetaInfoTrackSimilarSong> = [];\n\t\tconst vals: Array<MetaInfoTrackSimilarSong> = [];\n\t\tconst result: Array<Track> = [];\n\t\tinfo.similar.forEach(sim => {\n\t\t\tif (sim.mbid) {\n\t\t\t\tids.push(sim);\n\t\t\t} else {\n\t\t\t\tvals.push(sim);\n\t\t\t}\n\t\t});\n\t\tconst mbTrackIDs = ids.map(t => t.mbid || '-').filter(i => i !== '-');\n\t\tconst tracks = await this.trackStore.search({mbTrackIDs});\n\t\tids.forEach(sim => {\n\t\t\tconst t = tracks.find(tr => tr.tag.mbTrackID === sim.mbid);\n\t\t\tif (!t) {\n\t\t\t\tvals.push(sim);\n\t\t\t} else {\n\t\t\t\tresult.push(t);\n\t\t\t}\n\t\t});\n\t\tfor (const sim of vals) {\n\t\t\tconst t = await this.trackStore.searchOne({title: sim.name, artist: sim.artist.name});\n\t\t\tif (t) {\n\t\t\t\tresult.push(t);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n","import {fileDeleteIfExists} from '../../utils/fs-utils';\nimport path from 'path';\nimport {User} from './user.model';\nimport {Md5} from 'md5-typescript';\nimport {SearchQueryUser, UserStore} from './user.store';\nimport {StateStore} from '../state/state.store';\nimport {PlaylistStore} from '../playlist/playlist.store';\nimport {PlayQueueStore} from '../playqueue/playqueue.store';\nimport {BookmarkStore} from '../bookmark/bookmark.store';\nimport {IApiBinaryResult} from '../../typings';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {BaseStoreService} from '../base/base.service';\n\nexport class UserService extends BaseStoreService<User, SearchQueryUser> {\n\tprivate cached: {\n\t\t[id: string]: User;\n\t} = {};\n\n\tconstructor(public userAvatarPath: string, public userStore: UserStore, private stateStore: StateStore, private playlistStore: PlaylistStore, private bookmarkStore: BookmarkStore,\n\t\t\t\tprivate playQueueStore: PlayQueueStore, private imageModule: ImageModule) {\n\t\tsuper(userStore);\n\t}\n\n\tasync getUserImage(user: User, size?: number, format?: string): Promise<IApiBinaryResult | undefined> {\n\t\tif (user.avatar) {\n\t\t\treturn this.imageModule.get(user.id, path.join(this.userAvatarPath, user.avatar), size, format);\n\t\t}\n\t}\n\n\tasync setUserImage(user: User, filename: string): Promise<void> {\n\t\tconst destFileName = 'avatar-' + user.id + '.png';\n\t\tconst destName = path.join(this.userAvatarPath, destFileName);\n\t\tawait fileDeleteIfExists(destName);\n\t\tawait this.imageModule.createAvatar(filename, destName);\n\t\tawait this.imageModule.clearImageCacheByID(user.id);\n\t\tuser.avatar = destFileName;\n\t\tuser.avatarLastChanged = Date.now();\n\t\tawait this.update(user);\n\t}\n\n\tasync create(user: User): Promise<string> {\n\t\tif (!user.name || user.name.trim().length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tif (!user.pass || user.pass.trim().length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Password'));\n\t\t}\n\t\tconst existingUser = await this.getByName(user.name);\n\t\tif (existingUser) {\n\t\t\treturn Promise.reject(Error('Username already exists'));\n\t\t}\n\t\treturn this.userStore.add(user);\n\t}\n\n\tasync update(user: User): Promise<void> {\n\t\tawait this.userStore.replace(user);\n\t\tdelete this.cached[user.id];\n\t}\n\n\tasync remove(user: User): Promise<void> {\n\t\tdelete this.cached[user.id];\n\t\tawait this.stateStore.removeByQuery({userID: user.id});\n\t\tawait this.playlistStore.removeByQuery({userID: user.id});\n\t\tawait this.bookmarkStore.removeByQuery({userID: user.id});\n\t\tawait this.playQueueStore.removeByQuery({userID: user.id});\n\t\tawait this.imageModule.clearImageCacheByID(user.id);\n\t\tawait this.userStore.remove(user.id);\n\t\t// TODO: remove user chat msg on user.delete\n\t\tif (user.avatar) {\n\t\t\tawait fileDeleteIfExists(path.join(this.userAvatarPath, user.avatar));\n\t\t}\n\t}\n\n\tasync getByName(name: string): Promise<User | undefined> {\n\t\tif (!name || name.trim().length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tconst ids = Object.keys(this.cached);\n\t\tfor (const id of ids) {\n\t\t\tif (this.cached[id].name === name) {\n\t\t\t\treturn this.cached[id];\n\t\t\t}\n\t\t}\n\t\tconst user = await this.userStore.searchOne({name});\n\t\tif (user) {\n\t\t\tthis.cached[user.id] = user;\n\t\t}\n\t\treturn user;\n\t}\n\n\tasync getByID(id: string): Promise<User | undefined> {\n\t\tlet user: User | undefined = this.cached[id];\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\t\tuser = await this.userStore.byId(id);\n\t\tif (user) {\n\t\t\tthis.cached[id] = user;\n\t\t}\n\t\treturn user;\n\t}\n\n\tasync auth(name: string, pass: string): Promise<User> {\n\t\tif ((!pass) || (!pass.length)) {\n\t\t\treturn Promise.reject(Error('Invalid Password'));\n\t\t}\n\t\tconst user = await this.getByName(name);\n\t\tif (!user) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tif (pass !== user.pass) {\n\t\t\treturn Promise.reject(Error('Invalid Password'));\n\t\t}\n\t\treturn user;\n\t}\n\n\tasync authToken(name: string, token: string, salt: string): Promise<User> {\n\t\tif (!name || name.trim().length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tif ((!token) || (!token.length)) {\n\t\t\treturn Promise.reject(Error('Invalid Token'));\n\t\t}\n\t\tconst user = await this.getByName(name);\n\t\tif (!user) {\n\t\t\treturn Promise.reject(Error('Invalid Username'));\n\t\t}\n\t\tconst t = Md5.init(user.pass + salt);\n\t\tif (token !== t) {\n\t\t\treturn Promise.reject(Error('Invalid Token'));\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic clearCache() {\n\t\tthis.cached = {};\n\t}\n}\n","module.exports = require(\"md5-typescript\");","import moment from 'moment';\nimport {ChatConfig} from '../../config';\nimport {ChatMessage} from './chat.model';\nimport {User} from '../../objects/user/user.model';\n\nexport class ChatService {\n\tprivate messages: Array<ChatMessage> = [];\n\tprivate duration: moment.Duration;\n\n\tconstructor(private chatConfig: ChatConfig) {\n\t\tthis.duration = moment.duration(this.chatConfig.maxAge.value, <moment.unitOfTime.Base>this.chatConfig.maxAge.unit);\n\t}\n\n\tasync cleanOld(): Promise<void> {\n\t\tconst d = moment().subtract(this.duration).valueOf();\n\t\tthis.messages = this.messages.filter(c => d < c.time);\n\t}\n\n\tasync find(time: number): Promise<ChatMessage | undefined> {\n\t\treturn this.messages.find(msg => msg.time === time);\n\t}\n\n\tasync remove(message: ChatMessage): Promise<void> {\n\t\tthis.messages = this.messages.filter(msg => msg.time !== message.time);\n\t}\n\n\tasync get(since?: number): Promise<Array<ChatMessage>> {\n\t\tawait this.cleanOld();\n\t\tlet list: Array<ChatMessage> = this.messages;\n\t\tif (since !== undefined && !isNaN(since)) {\n\t\t\tlist = list.filter(msg => msg.time > since);\n\t\t}\n\t\treturn list;\n\t}\n\n\tasync add(message: string, user: User): Promise<ChatMessage> {\n\t\tawait this.cleanOld();\n\t\tconst c = {\n\t\t\tmessage: message,\n\t\t\ttime: Date.now(),\n\t\t\tusername: user.name,\n\t\t\tuserID: user.id\n\t\t};\n\t\tthis.messages.push(c);\n\t\tif (this.messages.length > this.chatConfig.maxMsgs) {\n\t\t\tthis.messages.shift();\n\t\t}\n\t\treturn c;\n\t}\n\n}\n","import {Genre} from './genre.model';\nimport {TrackStore} from '../../objects/track/track.store';\n\nexport interface GenreInfo {\n\tname: string;\n\tsections: Array<{\n\t\trootID: string;\n\t\ttrackCount: number;\n\t\tartistCount: number;\n\t\talbumCount: number;\n\t}>;\n}\n\nexport class GenreService {\n\tprivate genres: Array<GenreInfo> = [];\n\n\tconstructor(private trackStore: TrackStore) {\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\t// logger.info('Build Genres');\n\t\tconst genreHash: {\n\t\t\t[name: string]: {\n\t\t\t\troots: {\n\t\t\t\t\t[id: string]: {\n\t\t\t\t\t\tcount: number;\n\t\t\t\t\t\tartists: { [name: string]: number };\n\t\t\t\t\t\talbums: { [name: string]: number };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} = {};\n\n\t\tawait this.trackStore.iterate(async (tracks) => {\n\t\t\tfor (const track of tracks) {\n\t\t\t\tconst genre = track.tag.genre || '[No genre]';\n\t\t\t\tconst data = genreHash[genre] || {roots: {}};\n\t\t\t\tconst section = data.roots[track.rootID] || {count: 0, artists: {}, albums: {}};\n\t\t\t\tsection.count++;\n\t\t\t\tif (track.artistID) {\n\t\t\t\t\tsection.artists[track.artistID] = (section.artists[track.artistID] || 0) + 1;\n\t\t\t\t}\n\t\t\t\tif (track.albumID) {\n\t\t\t\t\tsection.albums[track.albumID] = (section.albums[track.albumID] || 0) + 1;\n\t\t\t\t}\n\t\t\t\tdata.roots[track.rootID] = section;\n\t\t\t\tgenreHash[genre] = data;\n\t\t\t}\n\t\t});\n\n\t\tthis.genres = Object.keys(genreHash).map(key => {\n\t\t\tconst data = genreHash[key];\n\t\t\treturn {\n\t\t\t\tname: key,\n\t\t\t\tsections: Object.keys(data.roots).map(sec => {\n\t\t\t\t\tconst section = data.roots[sec];\n\t\t\t\t\treturn {\n\t\t\t\t\t\trootID: sec,\n\t\t\t\t\t\tartistCount: Object.keys(section.artists).length,\n\t\t\t\t\t\talbumCount: Object.keys(section.albums).length,\n\t\t\t\t\t\ttrackCount: section.count\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t}\n\n\tasync getGenres(rootID?: string): Promise<Array<Genre>> {\n\t\tif (this.genres.length === 0) {\n\t\t\tawait this.refresh();\n\t\t}\n\t\treturn this.genres.map(g => {\n\t\t\tconst genre = {\n\t\t\t\tname: g.name,\n\t\t\t\talbumCount: 0,\n\t\t\t\tartistCount: 0,\n\t\t\t\ttrackCount: 0\n\t\t\t};\n\t\t\tg.sections.forEach(section => {\n\t\t\t\tif (!rootID || section.rootID === rootID) {\n\t\t\t\t\tgenre.albumCount += section.albumCount;\n\t\t\t\t\tgenre.artistCount += section.artistCount;\n\t\t\t\t\tgenre.trackCount += section.trackCount;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn genre;\n\t\t}).filter(genre => genre.trackCount > 0);\n\t}\n\n}\n","import {Feed} from '../../utils/feed';\nimport Logger from '../../utils/logger';\nimport {DBObjectType, PodcastStatus} from '../../types';\nimport {Podcast} from './podcast.model';\nimport {Episode} from '../episode/episode.model';\nimport {PodcastStore, SearchQueryPodcast} from './podcast.store';\nimport {EpisodeService} from '../episode/episode.service';\nimport {DebouncePromises} from '../../utils/debounce-promises';\nimport {BaseStoreService} from '../base/base.service';\n\nconst log = Logger('PodcastService');\n\nexport class PodcastService extends BaseStoreService<Podcast, SearchQueryPodcast> {\n\tprivate podcastRefreshDebounce = new DebouncePromises<void>();\n\n\tconstructor(public podcastStore: PodcastStore, private episodeService: EpisodeService) {\n\t\tsuper(podcastStore);\n\t}\n\n\tisDownloading(podcastId: string): boolean {\n\t\treturn this.podcastRefreshDebounce.isPending(podcastId);\n\t}\n\n\tasync create(url: string): Promise<Podcast> {\n\t\tconst podcast: Podcast = {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.podcast,\n\t\t\tcreated: Date.now(),\n\t\t\tlastCheck: 0,\n\t\t\turl: url,\n\t\t\tstatus: PodcastStatus.new\n\t\t};\n\t\tpodcast.id = await this.podcastStore.add(podcast);\n\t\treturn podcast;\n\t}\n\n\tasync remove(podcast: Podcast): Promise<void> {\n\t\tawait this.podcastStore.remove(podcast.id);\n\t\tawait this.episodeService.removeEpisodes(podcast.id);\n\t}\n\n\tasync refresh(podcast: Podcast): Promise<void> {\n\t\tif (this.podcastRefreshDebounce.isPending(podcast.id)) {\n\t\t\treturn this.podcastRefreshDebounce.append(podcast.id);\n\t\t}\n\t\tthis.podcastRefreshDebounce.setPending(podcast.id);\n\t\ttry {\n\t\t\tlog.debug('Refreshing Podcast', podcast.url);\n\t\t\tconst feed = new Feed();\n\t\t\tlet episodes: Array<Episode> = [];\n\t\t\ttry {\n\t\t\t\tconst result = await feed.get(podcast);\n\t\t\t\tif (result) {\n\t\t\t\t\tpodcast.tag = result.tag;\n\t\t\t\t\tepisodes = result.episodes;\n\t\t\t\t}\n\t\t\t\tpodcast.status = PodcastStatus.completed;\n\t\t\t\tpodcast.errorMessage = undefined;\n\t\t\t} catch (e) {\n\t\t\t\tlog.info('Refreshing Podcast failed', e);\n\t\t\t\tpodcast.status = PodcastStatus.error;\n\t\t\t\tpodcast.errorMessage = (e || '').toString();\n\t\t\t}\n\t\t\tpodcast.lastCheck = Date.now();\n\t\t\tawait this.podcastStore.replace(podcast);\n\t\t\tconst newEpisodes = await this.episodeService.mergeEpisodes(podcast.id, episodes);\n\t\t\tlog.info(podcast.url + ': New Episodes: ' + newEpisodes.length);\n\t\t\tawait this.podcastRefreshDebounce.resolve(podcast.id, undefined);\n\t\t} catch (e) {\n\t\t\tawait this.podcastRefreshDebounce.resolve(podcast.id, undefined);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync refreshPodcasts(): Promise<void> {\n\t\tlog.info('Refreshing');\n\t\tconst podcasts = await this.podcastStore.all();\n\t\tfor (const podcast of podcasts) {\n\t\t\tawait this.refresh(podcast);\n\t\t}\n\t\tlog.info('Refreshed');\n\t}\n}\n","import {NodeError, NodeErrorCallback} from '../typings';\nimport zlib from 'zlib';\nimport stream from 'stream';\nimport request from 'request';\nimport FeedParser from 'feedparser';\nimport iconv from 'iconv-lite';\nimport {DBObjectType, PodcastStatus} from '../types';\nimport {Subsonic} from '../model/subsonic-rest-data';\nimport {PodcastTag} from '../objects/podcast/podcast.model';\nimport {Episode, PodcastEpisodeChapter} from '../objects/episode/episode.model';\n\nexport class Feed {\n\n\tconstructor() {\n\n\t}\n\n\tprivate getParams(str: string): { [key: string]: string } {\n\t\treturn str.split(';').reduce(\n\t\t\t(para: { [key: string]: string }, param: string) => {\n\t\t\t\tconst parts = param.split('=').map(function(part) {\n\t\t\t\t\treturn part.trim();\n\t\t\t\t});\n\t\t\t\tif (parts.length === 2) {\n\t\t\t\t\tpara[parts[0]] = parts[1];\n\t\t\t\t}\n\t\t\t\treturn para;\n\t\t\t}, {});\n\t}\n\n\tprivate maybeDecompress(res: stream.Readable, encoding: string, done: NodeErrorCallback): stream.Readable {\n\t\tlet decompress;\n\t\tif (encoding.match(/\\bdeflate\\b/)) {\n\t\t\tdecompress = zlib.createInflate();\n\t\t\tdecompress.on('error', done);\n\t\t} else if (encoding.match(/\\bgzip\\b/)) {\n\t\t\tdecompress = zlib.createGunzip();\n\t\t\tdecompress.on('error', done);\n\t\t}\n\t\treturn decompress ? res.pipe(decompress) : res;\n\t}\n\n\tprivate maybeTranslate(res: stream.Readable, charset: string, done: NodeErrorCallback): stream.Readable {\n\t\t// Use iconv if its not utf8 already.\n\t\tif (charset && !/utf-*8/i.test(charset)) {\n\t\t\ttry {\n\t\t\t\tconst iv = iconv.decodeStream(charset);\n\t\t\t\t// console.log('Converting from charset %s to utf-8', charset);\n\t\t\t\tiv.on('error', done);\n\t\t\t\t// If we're using iconv, stream will be the output of iconv\n\t\t\t\t// otherwise it will remain the output of request\n\t\t\t\tres = <any>res.pipe(iv); // TODO: iconv stream doesn't return a stream.Readable?\n\t\t\t} catch (err) {\n\t\t\t\tres.emit('error', err);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n\tprivate async fetch(url: string): Promise<{ feed: FeedParser.Node, posts: Array<FeedParser.Item> }> {\n\t\tconst posts: Array<FeedParser.Item> = [];\n\t\tlet feed: any;\n\t\tlet doneReported = false;\n\t\tconst req = request(url, {timeout: 10000, pool: false});\n\t\treq.setMaxListeners(50);\n\t\t// Some feeds do not respond without user-agent and accept headers.\n\t\treq.setHeader('user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36');\n\t\treq.setHeader('accept', 'text/html,application/xhtml+xml');\n\n\t\tconst feedparser = new FeedParser({});\n\n\t\tfeedparser.on('readable', function streamResponse() {\n\t\t\tconst response = feedparser; // this;\n\t\t\tfeed = response.meta;\n\t\t\tlet item = response.read();\n\t\t\twhile (item) {\n\t\t\t\tposts.push(item);\n\t\t\t\titem = response.read();\n\t\t\t}\n\t\t});\n\n\t\treturn new Promise<{ feed: FeedParser.Node, posts: Array<FeedParser.Item> }>((resolve, reject) => {\n\t\t\tconst done = (err: NodeError) => {\n\t\t\t\tif (doneReported) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdoneReported = true;\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve({feed, posts});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treq.on('error', done);\n\t\t\treq.on('response', (res: request.Response) => {\n\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\treq.abort();\n\t\t\t\t\treturn done(new Error('Bad status code ' + res.statusCode + (res.statusMessage ? ' ' + res.statusMessage : '')));\n\t\t\t\t}\n\t\t\t\tconst encoding = res.headers['content-encoding'] || 'identity';\n\t\t\t\tconst charset = this.getParams(res.headers['content-type'] || '').charset;\n\t\t\t\tlet pipestream = this.maybeDecompress(res, encoding, done);\n\t\t\t\tpipestream = this.maybeTranslate(pipestream, charset, done);\n\t\t\t\tpipestream.pipe(feedparser);\n\t\t\t});\n\n\t\t\tfeedparser.on('error', done);\n\t\t\tfeedparser.on('end', done);\n\n\t\t});\n\t}\n\n\tpublic async get(podcast: Subsonic.PodcastChannel): Promise<{ tag: PodcastTag, episodes: Array<Episode> }> {\n\t\tconst data = await this.fetch(podcast.url);\n\t\tconst tag: PodcastTag = {\n\t\t\ttitle: data.feed.title,\n\t\t\tdescription: data.feed.description,\n\t\t\tlink: data.feed.link,\n\t\t\tauthor: data.feed.author,\n\t\t\tgenerator: data.feed.generator,\n\t\t\timage: data.feed.image && data.feed.image.url ? data.feed.image.url : undefined,\n\t\t\tcategories: data.feed.categories\n\t\t};\n\t\tif (data.feed['itunes:summary'] && data.feed['itunes:summary']['#']) {\n\t\t\ttag.description = data.feed['itunes:summary']['#'];\n\t\t}\n\t\tconst episodes: Array<Episode> = data.posts.map(post => {\n\t\t\tlet chapters: Array<PodcastEpisodeChapter> = [];\n\n\t\t\tconst pscChaps: any = (<any>post)['psc:chapters'];\n\t\t\tif (pscChaps) {\n\t\t\t\tconst pscChap: Array<any> = pscChaps['psc:chapter'];\n\t\t\t\tif (pscChap) {\n\t\t\t\t\tchapters = pscChap.map(item => item['@']);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tid: '',\n\t\t\t\tpodcastID: podcast.id,\n\t\t\t\tstatus: PodcastStatus.new,\n\t\t\t\ttype: DBObjectType.episode,\n\t\t\t\tauthor: post.author,\n\t\t\t\tlink: post.link,\n\t\t\t\tguid: post.guid,\n\t\t\t\tsummary: post.summary,\n\t\t\t\tenclosures: <any>post.enclosures, // TODO: validate podcast enclosures (wrong interface description?)\n\t\t\t\tdate: post.date ? post.date.valueOf() : 0,\n\t\t\t\tname: post.title,\n\t\t\t\tchapters: chapters\n\t\t\t};\n\t\t});\n\t\treturn {tag, episodes};\n\t}\n\n}\n","module.exports = require(\"zlib\");","module.exports = require(\"feedparser\");","module.exports = require(\"iconv-lite\");","import {DBObjectType} from '../../types';\nimport {NowPlaying} from './nowplaying.model';\nimport {User} from '../../objects/user/user.model';\nimport {Episode} from '../../objects/episode/episode.model';\nimport {Track} from '../../objects/track/track.model';\nimport {StateService} from '../../objects/state/state.service';\n\nexport class NowPlayingService {\n\tplaying: Array<NowPlaying> = [];\n\n\tconstructor(private stateService: StateService) {\n\t}\n\n\tasync getNowPlaying(): Promise<Array<NowPlaying>> {\n\t\treturn this.playing;\n\t}\n\n\tclear() {\n\t\tthis.playing = [];\n\t}\n\n\tasync reportEpisode(episode: Episode, user: User): Promise<void> {\n\t\tthis.playing = this.playing.filter(np => (np.user.id !== user.id));\n\t\tthis.playing.push({\n\t\t\ttime: Date.now(),\n\t\t\tobj: episode,\n\t\t\tuser: user\n\t\t});\n\t\tawait this.stateService.reportPlaying(episode.id, DBObjectType.episode, user.id);\n\t\tawait this.stateService.reportPlaying(episode.podcastID, DBObjectType.podcast, user.id);\n\t}\n\n\tasync reportTrack(track: Track, user: User): Promise<void> {\n\t\tthis.playing = this.playing.filter(np => (np.user.id !== user.id));\n\t\tthis.playing.push({\n\t\t\ttime: Date.now(),\n\t\t\tobj: track,\n\t\t\tuser: user\n\t\t});\n\t\tawait this.stateService.reportPlaying(track.id, DBObjectType.track, user.id);\n\t\tawait this.stateService.reportPlaying(track.albumID, DBObjectType.album, user.id);\n\t\tawait this.stateService.reportPlaying(track.artistID, DBObjectType.artist, user.id);\n\t\tawait this.stateService.reportPlaying(track.parentID, DBObjectType.folder, user.id);\n\t}\n}\n","import {Root} from './root.model';\nimport {RootStore, SearchQueryRoot} from './root.store';\nimport {BaseStoreService} from '../base/base.service';\n\nexport class RootService extends BaseStoreService<Root, SearchQueryRoot> {\n\n\tconstructor(public rootStore: RootStore) {\n\t\tsuper(rootStore);\n\t}\n\n\tprivate async checkUsedPath(dir: string, roots: Array<Root>): Promise<void> {\n\t\tfor (const r of roots) {\n\t\t\tif (dir.indexOf(r.path) === 0 || r.path.indexOf(dir) === 0) {\n\t\t\t\treturn Promise.reject(Error('Root path already used'));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync create(root: Root): Promise<string> {\n\t\tconst roots = await this.rootStore.all();\n\t\tawait this.checkUsedPath(root.path, roots);\n\t\treturn this.rootStore.add(root);\n\t}\n\n\tasync update(root: Root): Promise<void> {\n\t\tconst roots = await this.rootStore.all();\n\t\tawait this.checkUsedPath(root.path, roots.filter(r => r.id !== root.id));\n\t\tawait this.rootStore.replace(root);\n\t}\n\n\tasync remove(root: Root): Promise<void> {\n\t\tawait this.rootStore.remove(root.id);\n\t}\n}\n","import {DBObjectType} from '../../types';\nimport {PlayQueue} from './playqueue.model';\nimport {PlayQueueStore, SearchQueryPlayQueue} from './playqueue.store';\nimport {BaseStoreService} from '../base/base.service';\n\nexport class PlayQueueService extends BaseStoreService<PlayQueue, SearchQueryPlayQueue> {\n\n\tconstructor(private playQueueStore: PlayQueueStore) {\n\t\tsuper(playQueueStore);\n\t}\n\n\tasync getQueueOrCreate(userID: string, client?: string): Promise<PlayQueue> {\n\t\tlet playQueue = await this.get(userID);\n\t\tif (!playQueue) {\n\t\t\tplayQueue = this.emptyPlaylist(userID, client);\n\t\t\tplayQueue.id = await this.playQueueStore.add(playQueue);\n\t\t}\n\t\treturn playQueue;\n\t}\n\n\temptyPlaylist(userID: string, client?: string): PlayQueue {\n\t\treturn {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.playqueue,\n\t\t\tuserID,\n\t\t\ttrackIDs: [],\n\t\t\tchanged: Date.now(),\n\t\t\tchangedBy: client || 'Unknown Client'\n\t\t};\n\t}\n\n\tasync get(userID: string): Promise<PlayQueue | undefined> {\n\t\treturn this.playQueueStore.searchOne({userID});\n\t}\n\n\tasync save(userID: string, trackIDs: Array<string>, currentID: string | undefined, position: number | undefined, client?: string): Promise<PlayQueue> {\n\t\tlet playQueue = await this.playQueueStore.searchOne({userID});\n\t\tif (!playQueue) {\n\t\t\tplayQueue = {\n\t\t\t\tid: '',\n\t\t\t\ttype: DBObjectType.playqueue,\n\t\t\t\tuserID,\n\t\t\t\ttrackIDs,\n\t\t\t\tcurrentID,\n\t\t\t\tposition,\n\t\t\t\tchanged: Date.now(),\n\t\t\t\tchangedBy: client || 'Unknown Client'\n\t\t\t};\n\t\t\tplayQueue.id = await this.playQueueStore.add(playQueue);\n\t\t} else {\n\t\t\tplayQueue.trackIDs = trackIDs;\n\t\t\tplayQueue.currentID = currentID;\n\t\t\tplayQueue.position = position;\n\t\t\tplayQueue.changed = Date.now();\n\t\t\tplayQueue.changedBy = client || 'Unknown Client';\n\t\t\tawait this.playQueueStore.replace(playQueue);\n\t\t}\n\t\treturn playQueue;\n\t}\n\n\tasync remove(userID: string): Promise<void> {\n\t\tconst playQueue = await this.get(userID);\n\t\tif (playQueue) {\n\t\t\tawait this.playQueueStore.remove(playQueue.id);\n\t\t}\n\t}\n\n}\n","import path from 'path';\nimport Logger from '../../utils/logger';\nimport {IApiBinaryResult} from '../../typings';\nimport {DebouncePromises} from '../../utils/debounce-promises';\nimport {WaveformGenerator} from '../../modules/audio/tools/ffmpeg-waveform';\nimport fse from 'fs-extra';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Track} from '../../objects/track/track.model';\nimport {Episode} from '../../objects/episode/episode.model';\nimport WaveformFormatType = JamParameters.WaveformFormatType;\n\nconst log = Logger('WaveformService');\n\nexport class WaveformService {\n\tprivate waveformCacheDebounce = new DebouncePromises<IApiBinaryResult>();\n\n\tconstructor(private waveformCachePath: string) {\n\t}\n\n\tprivate getCacheID(id: string, format: string): string {\n\t\treturn 'waveform-' + id + '.' + format;\n\t}\n\n\tprivate async generateWaveform(filename: string, format: WaveformFormatType): Promise<IApiBinaryResult> {\n\t\tconst wf = new WaveformGenerator();\n\t\tswitch (format) {\n\t\t\tcase 'svg':\n\t\t\t\treturn {buffer: {buffer: Buffer.from(await wf.svg(filename)), contentType: 'image/svg+xml'}};\n\t\t\tcase 'json':\n\t\t\t\treturn {json: await wf.json(filename)};\n\t\t\tcase 'dat':\n\t\t\t\treturn {buffer: {buffer: await wf.binary(filename), contentType: 'application/binary'}};\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Format for Waveform generation'));\n\t}\n\n\tasync clearWaveformCacheByIDs(ids: Array<string>): Promise<void> {\n\t\tconst searches = ids.filter(id => id.length > 0).map(id => this.getCacheID(id, ''));\n\t\tif (searches.length > 0) {\n\t\t\tlet list = await fse.readdir(this.waveformCachePath);\n\t\t\tlist = list.filter(name => {\n\t\t\t\treturn searches.findIndex(s => name.indexOf(s) === 0) >= 0;\n\t\t\t});\n\t\t\tfor (const filename of list) {\n\t\t\t\tawait fse.unlink(path.resolve(this.waveformCachePath, filename));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async get(id: string, filename: string, format: WaveformFormatType): Promise<IApiBinaryResult> {\n\t\tif (!filename || !(await fse.pathExists(filename))) {\n\t\t\treturn Promise.reject(Error('Invalid filename for waveform generation'));\n\t\t}\n\t\tconst cacheID = this.getCacheID(id, format);\n\t\tif (this.waveformCacheDebounce.isPending(cacheID)) {\n\t\t\treturn this.waveformCacheDebounce.append(cacheID);\n\t\t}\n\t\tthis.waveformCacheDebounce.setPending(cacheID);\n\t\ttry {\n\t\t\tlet result: IApiBinaryResult;\n\t\t\tconst cachefile = path.join(this.waveformCachePath, cacheID);\n\t\t\tconst exists = await fse.pathExists(cachefile);\n\t\t\tif (exists) {\n\t\t\t\tresult = {file: {filename: cachefile, name: cacheID}};\n\t\t\t} else {\n\t\t\t\tresult = await this.generateWaveform(filename, format);\n\t\t\t\tif (result.buffer) {\n\t\t\t\t\tlog.debug('Writing waveform cache file', cachefile);\n\t\t\t\t\tawait fse.writeFile(cachefile, result.buffer.buffer);\n\t\t\t\t} else if (result.json) {\n\t\t\t\t\tlog.debug('Writing waveform cache file', cachefile);\n\t\t\t\t\tawait fse.writeFile(cachefile, JSON.stringify(result.json));\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.waveformCacheDebounce.resolve(cacheID, result);\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tawait this.waveformCacheDebounce.reject(cacheID, e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync getTrackWaveform(track: Track, format: WaveformFormatType): Promise<IApiBinaryResult> {\n\t\treturn await this.get(track.id, path.join(track.path, track.name), format);\n\t}\n\n\tasync getEpisodeWaveform(episode: Episode, format: WaveformFormatType): Promise<IApiBinaryResult> {\n\t\tif (episode.path && episode.media) {\n\t\t\treturn await this.get(episode.id, episode.path, format);\n\t\t} else {\n\t\t\treturn Promise.reject(Error('Podcast episode not ready'));\n\t\t}\n\t}\n}\n","import SVGO from 'svgo';\nimport fs from 'fs';\nimport {PassThrough, Readable, Stream, Transform, TransformCallback} from 'stream';\nimport Logger from '../../../utils/logger';\nimport Ffmpeg from 'fluent-ffmpeg';\n\n// import WaveformData from 'waveform-data';\nconst WaveformData = require('waveform-data');\n\nconst log = Logger('Waveform');\n\nexport interface IWaveformData {\n\tversion: number;\n\tsample_rate: number;\n\tsamples_per_pixel: number;\n\tbits: number;\n\tlength: number;\n\tdata: Array<number>;\n}\n\n/**\n class WaveformStream & class Waveform\n\n based on https://github.com/StreamMachine/sm-waveform\n MIT: https://github.com/StreamMachine/sm-waveform/blob/master/LICENSE\n\n */\n\nclass WaveformStream extends Transform {\n\t_buf = new PassThrough;\n\t_out = new PassThrough;\n\t_ffmpeg: Ffmpeg.FfmpegCommand;\n\t_sampleRate: number;\n\t_samplesPerPixel: number;\n\t_started = false;\n\t_min: number | null = null;\n\t_max: number | null = null;\n\t_samples = 0;\n\t_total = 0;\n\n\tconstructor(_at__samplesPerPixel?: number, _at__sampleRate?: number) {\n\t\tsuper({writableObjectMode: false, readableObjectMode: true, highWaterMark: 1024});\n\t\tthis._samplesPerPixel = _at__samplesPerPixel != null ? _at__samplesPerPixel : 256;\n\t\tthis._sampleRate = _at__sampleRate != null ? _at__sampleRate : 44100;\n\t\tconst options: Ffmpeg.FfmpegCommandOptions = {\n\t\t\tsource: <Readable>this._buf\n\t\t};\n\t\tthis._ffmpeg = Ffmpeg(options).addOptions(['-f s16le', '-ac 1', '-acodec pcm_s16le', '-ar ' + this._sampleRate]);\n\t\tthis._ffmpeg.on('start', (cmd: string) => {\n\t\t\tlog.debug('ffmpeg started with ' + cmd);\n\t\t\tthis._started = true;\n\t\t\treturn this.emit('_started');\n\t\t});\n\t\tlet errored = false;\n\t\tthis._ffmpeg.on('error', (err: any) => {\n\t\t\tif (err.code === 'ENOENT') {\n\t\t\t\terrored = true;\n\t\t\t\tlog.debug('ffmpeg failed to start.');\n\t\t\t\treturn this.emit('done', 'ffmpeg failed to start');\n\t\t\t} else {\n\t\t\t\terrored = true;\n\t\t\t\tlog.debug('ffmpeg decoding error: ' + err);\n\t\t\t\treturn this.emit('done', 'ffmpeg decoding error: ' + err);\n\t\t\t}\n\t\t});\n\t\tthis._ffmpeg.on('end', () => {\n\t\t\tif (!errored) {\n\t\t\t\treturn this.emit('done');\n\t\t\t}\n\t\t});\n\t\tthis._ffmpeg.writeToStream(this._out);\n\t\tthis._out.on('readable', () => this.start());\n\t}\n\n\tstart() {\n\t\tlet oddByte: number | null = null;\n\t\tlet i: number;\n\t\tlet value: number;\n\t\tlet data: Buffer | undefined = this._out.read();\n\t\twhile (data && data.length > 0) {\n\t\t\ti = 0;\n\t\t\tif (oddByte != null) {\n\t\t\t\tvalue = ((data.readInt8(0, true) << 8) | oddByte);\n\t\t\t\toddByte = null;\n\t\t\t\ti = 1;\n\t\t\t} else {\n\t\t\t\tvalue = data.readInt16LE(0, true);\n\t\t\t\ti = 2;\n\t\t\t}\n\t\t\tthis.readResults(value, i, data);\n\t\t\tdata = this._out.read();\n\t\t}\n\t}\n\n\treadResults(value: number, pos: number, data: Buffer) {\n\t\tconst dataLen = data.length;\n\t\twhile (true) {\n\t\t\tthis._min = this._min === null ? value : Math.min(this._min, value);\n\t\t\tthis._max = this._max === null ? value : Math.max(this._max, value);\n\t\t\tthis._samples += 1;\n\t\t\tif (this._samples === this._samplesPerPixel) {\n\t\t\t\tthis.push([Math.round(this._min), Math.round(this._max)]);\n\t\t\t\tthis._min = null;\n\t\t\t\tthis._max = null;\n\t\t\t\tthis._samples = 0;\n\t\t\t}\n\t\t\tif (pos >= dataLen) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvalue = data.readInt16LE(pos, true);\n\t\t\tpos += 2;\n\t\t}\n\t}\n\n\t_transform(chunk: Buffer, encoding: string, cb: TransformCallback) {\n\t\tthis._total += chunk.length;\n\t\t// debug('_trans chunk: ' + chunk.length + '/' + this._total);\n\t\tif (this._started) {\n\t\t\treturn this._buf.write(chunk, encoding, <any>cb);\n\t\t} else {\n\t\t\treturn this.once('_started', () => {\n\t\t\t\treturn this._buf.write(chunk, encoding, <any>cb);\n\t\t\t});\n\t\t}\n\t}\n\n\t_flush(cb: TransformCallback) {\n\t\tthis._buf.end();\n\t\treturn this._out.once('end', () => {\n\t\t\tif (this._samples > 0) {\n\t\t\t\tthis.push([this._min, this._max]);\n\t\t\t}\n\t\t\treturn cb();\n\t\t});\n\t}\n\n}\n\ninterface WaveformOptions {\n\tsamplesPerPixel: number;\n\tsampleRate: number;\n}\n\nclass Waveform {\n\n\t_samples: Array<number> = [];\n\n\tconstructor(private stream: Stream, private opts: WaveformOptions) {\n\t\tthis.opts = Object.assign({\n\t\t\tsamplesPerPixel: 256,\n\t\t\tsampleRate: 44100\n\t\t}, opts || {});\n\t}\n\n\trun(cb: (err?: Error) => void) {\n\t\tconst ws = new WaveformStream(this.opts.samplesPerPixel, this.opts.sampleRate);\n\t\tws.on('readable', () => {\n\t\t\tlet px = ws.read();\n\t\t\twhile (px && px.length > 0) {\n\t\t\t\tthis._samples.push(px[0]);\n\t\t\t\tthis._samples.push(px[1]);\n\t\t\t\tpx = ws.read();\n\t\t\t}\n\t\t});\n\t\tws.on('done', (err) => {\n\t\t\tcb(err);\n\t\t});\n\t\tthis.stream.pipe(ws);\n\t}\n\n\tasBinary(): Buffer {\n\t\t// https://github.com/bbc/audiowaveform/blob/master/doc/DataFormat.md\n\t\tconst result = Buffer.alloc(20 + (this._samples.length * 2));\n\t\tresult.writeInt32LE(1, 0); // version\n\t\tresult.writeUInt32LE(0, 4); // flags 0 (lsb) \t0: 16-bit resolution, 1: 8-bit resolution 1-31 \tUnused\n\t\tresult.writeInt32LE(this.opts.sampleRate, 8); // Sample rate\n\t\tresult.writeInt32LE(this.opts.samplesPerPixel, 12); // Samples per pixel\n\t\tresult.writeInt32LE(this._samples.length / 2, 16); // Length of waveform data (number of minimum and maximum value pairs)\n\t\tlet pos = 20;\n\t\tthis._samples.forEach(num => {\n\t\t\tresult.writeInt16LE(num, pos);\n\t\t\tpos += 2;\n\t\t});\n\t\treturn result;\n\t}\n\n\tasJSON(): IWaveformData {\n\t\t// https://github.com/bbc/audiowaveform/blob/master/doc/DataFormat.md\n\t\treturn {\n\t\t\tversion: 1,\n\t\t\tsample_rate: this.opts.sampleRate,\n\t\t\tsamples_per_pixel: this.opts.samplesPerPixel,\n\t\t\tbits: 16,\n\t\t\tlength: this._samples.length / 2,\n\t\t\tdata: this._samples\n\t\t};\n\t}\n\n}\n\nexport class WaveformGenerator {\n\n\tasync binary(filename: string): Promise<Buffer> {\n\t\tconst wf: Waveform = await this.generateWaveform(filename);\n\t\treturn wf.asBinary();\n\t}\n\n\tasync json(filename: string): Promise<IWaveformData> {\n\t\tconst wf: Waveform = await this.generateWaveform(filename);\n\t\treturn wf.asJSON();\n\t}\n\n\tasync svg(filename: string): Promise<string> {\n\t\tconst data = await this.json(filename);\n\t\tconst svg = this.buildSvg(data);\n\t\tconst svgo = new SVGO();\n\t\tconst optimized = await svgo.optimize(svg);\n\t\treturn optimized.data;\n\t}\n\n\tprivate async generateWaveform(filename: string): Promise<Waveform> {\n\t\tconst stream = fs.createReadStream(filename);\n\t\treturn new Promise<Waveform>((resolve, reject) => {\n\t\t\tconst wf: Waveform = new Waveform(stream, {\n\t\t\t\tsamplesPerPixel: 256,\n\t\t\t\tsampleRate: 44100\n\t\t\t});\n\t\t\twf.run((err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(wf);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate buildSvg(data: IWaveformData): string {\n\t\tconst width = 4000;\n\t\tconst height = 256;\n\t\tif (data.data.length > 0) {\n\t\t\tlet wfd = WaveformData.create(data);\n\t\t\tconst samplesPerPixel = Math.floor(wfd.duration * wfd.adapter.sample_rate / (width * 2));\n\t\t\tif (samplesPerPixel < 256) {\n\t\t\t\twfd = wfd.resample({width: width * 2, scale: 256});\n\t\t\t} else {\n\t\t\t\twfd = wfd.resample({width: width * 2});\n\t\t\t}\n\t\t\twfd.adapter.data.data = wfd.adapter.data.data.slice(0, width * 2);\n\t\t\tdata = wfd.adapter.data;\n\t\t}\n\t\tconst totalPeaks = data.data.length;\n\t\tconst d: Array<string> = [];\n\t\tfor (let peakNumber = 0; peakNumber < totalPeaks; peakNumber++) {\n\t\t\tconst num = (data.data[peakNumber] / height) + (height / 2);\n\t\t\tif (peakNumber % 2 === 0) {\n\t\t\t\td.push(`M${~~(peakNumber / 2)}, ${num}`);\n\t\t\t} else {\n\t\t\t\td.push(`L${~~(peakNumber / 2)}, ${num}`);\n\t\t\t}\n\t\t}\n\t\tconst result = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\" version=\"1.1\" preserveAspectRatio=\"none\"\n     viewBox=\"0 0 ${width} ${height}\" style=\"fill-rule:evenodd;clip-rule:evenodd;\">\n\t\t<path stroke=\"green\" d=\"${d.join(' ')}\" />\n</svg>`;\n\t\treturn result;\n\t}\n\n}\n","module.exports = require(\"svgo\");","module.exports = require(\"stream\");","module.exports = require(\"waveform-data\");","import {IApiBinaryResult} from '../../typings';\nimport {PreTranscoder, Transcoder} from '../../modules/audio/transcoder';\nimport {fileSuffix} from '../../utils/fs-utils';\nimport path from 'path';\nimport fse from 'fs-extra';\nimport {GenericError} from '../../api/jam/error';\nimport {User} from '../../objects/user/user.model';\nimport {Track} from '../../objects/track/track.model';\nimport {Episode} from '../../objects/episode/episode.model';\n\nexport class StreamService {\n\n\tconstructor() {\n\n\t}\n\n\tasync streamFile(filename: string, id: string, sourceFormat?: string, destFormat?: string, maxBitRate?: number): Promise<IApiBinaryResult> {\n\t\tconst exists = await fse.pathExists(filename);\n\t\tif (!exists) {\n\t\t\treturn Promise.reject(Error('File not found'));\n\t\t}\n\t\tdestFormat = destFormat || 'mp3';\n\t\tif (destFormat[0] === '.') {\n\t\t\tdestFormat = destFormat.slice(1);\n\t\t}\n\t\tconst bitRate = maxBitRate || 0;\n\t\tif (destFormat !== 'raw' && Transcoder.needsTranscoding(sourceFormat || fileSuffix(filename), destFormat, bitRate)) {\n\t\t\tif (!Transcoder.validTranscoding(destFormat)) {\n\t\t\t\treturn Promise.reject(Error('Unsupported transcoding format'));\n\t\t\t}\n\t\t\treturn {pipe: new PreTranscoder(filename, destFormat, bitRate)};\n\t\t\t// return {pipe: new Transcoder(filename, f, bitRate, media.duration)};\n\t\t} else {\n\t\t\treturn {file: {filename, name: id + '.' + destFormat}};\n\t\t}\n\t}\n\n\tasync streamTrack(track: Track, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<IApiBinaryResult> {\n\t\treturn this.streamFile(path.join(track.path, track.name), track.id, track.media.format, format, maxBitRate);\n\t}\n\n\tasync streamEpisode(episode: Episode, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<IApiBinaryResult> {\n\t\tif (episode.path && episode.media) {\n\t\t\treturn this.streamFile(episode.path, episode.id, episode.media.format, format, maxBitRate);\n\t\t} else {\n\t\t\treturn Promise.reject(GenericError('Podcast episode not ready'));\n\t\t}\n\t}\n\n\n}\n","import ffmpeg from 'fluent-ffmpeg';\nimport express from 'express';\nimport tmp from 'tmp';\nimport {IStreamData} from '../../typings';\nimport Logger from '../../utils/logger';\nimport * as fs from 'fs';\nimport {SupportedTranscodeAudioFormat} from '../../utils/filetype';\n\nconst log = Logger('audio.transcoder');\n\nexport class Transcoder implements IStreamData {\n\tfilename: string;\n\tformat: string;\n\tmaxBitRate: number;\n\tduration?: number;\n\n\tconstructor(filename: string, format: string, maxBitRate: number, duration?: number) {\n\t\tthis.filename = filename;\n\t\tthis.format = format;\n\t\tthis.maxBitRate = maxBitRate;\n\t\tthis.duration = duration;\n\t\tif (maxBitRate <= 0) {\n\t\t\tthis.maxBitRate = 128;\n\t\t}\n\t}\n\n\tstatic needsTranscoding(mediaFormat: string, format: string, maxBitRate: number) {\n\t\treturn (format !== mediaFormat) || (maxBitRate > 0);\n\t}\n\n\tstatic validTranscoding(format: string) {\n\t\treturn SupportedTranscodeAudioFormat.indexOf(format) >= 0;\n\t}\n\n\tstatic async getAvailableFormats(): Promise<Array<{ format: string, name: string }>> {\n\t\treturn new Promise<Array<{ format: string, name: string }>>((resolve, reject) => {\n\t\t\tffmpeg().getAvailableFormats((err, formats) => {\n\t\t\t\tif (err || !formats) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tresolve(Object.keys(formats).filter(key => formats[key].canDemux).map(key => {\n\t\t\t\t\treturn {format: key, name: formats[key].description};\n\t\t\t\t}));\n\t\t\t});\n\t\t});\n\t}\n\n\t//\n\t// private getSize(cb: (length: number) => void) {\n\t// \tif (this.duration !== undefined && this.duration > 0) {\n\t// \t\tconst length = Math.round((this.maxBitRate * 1000 * this.duration) / 8);\n\t// \t\treturn cb(length);\n\t// \t}\n\t// \tffmpeg.ffprobe(this.filename, (err, metadata) => {\n\t// \t\tlet length = 0;\n\t// \t\tif (metadata && metadata.format && metadata.format.duration) {\n\t// \t\t\tconst duration = metadata.format ? parseInt(metadata.format.duration, 10) : 0;\n\t// \t\t\tlength = Math.round((this.maxBitRate * 1000 * duration) / 8);\n\t// \t\t}\n\t// \t\tcb(length);\n\t// \t});\n\t// }\n\n\tpipe(stream: express.Response) {\n\t\tlog.info('Start transcode streaming', this.format, this.maxBitRate);\n\t\tconst proc = ffmpeg(<ffmpeg.FfmpegCommandOptions>{source: this.filename, nolog: true});\n\t\tif (this.format === 'mp3') {\n\t\t\tproc.withAudioCodec('libmp3lame');\n\t\t}\n\t\tproc.withNoVideo()\n\t\t\t.toFormat(this.format)\n\t\t\t.withAudioBitrate(this.maxBitRate + 'k')\n\t\t\t.on('end', () => {\n\t\t\t\tlog.debug('file has been transcoded successfully');\n\t\t\t})\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\tlog.error('an error happened while transcoding: ' + err.message);\n\t\t\t});\n\t\tstream.contentType(this.format);\n\t\tproc.writeToStream(stream, {end: true});\n\t}\n\n}\n\nexport class PreTranscoder implements IStreamData {\n\tfilename: string;\n\tformat: string;\n\tmaxBitRate: number;\n\n\tconstructor(filename: string, format: string, maxBitRate: number) {\n\t\tthis.filename = filename;\n\t\tthis.format = format;\n\t\tthis.maxBitRate = maxBitRate;\n\t\tif (maxBitRate <= 0) {\n\t\t\tthis.maxBitRate = 128;\n\t\t}\n\t}\n\n\tpipe(stream: express.Response) {\n\t\tlog.info('Start transcode first and stream after', this.format, this.maxBitRate);\n\t\ttmp.file((err, filename, fd, cleanupCallback) => {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconst proc = ffmpeg(<ffmpeg.FfmpegCommandOptions>{source: this.filename, nolog: true});\n\t\t\tif (this.format === 'mp3') {\n\t\t\t\tproc.withAudioCodec('libmp3lame');\n\t\t\t}\n\t\t\tproc.withNoVideo()\n\t\t\t\t.toFormat(this.format)\n\t\t\t\t.withAudioBitrate(this.maxBitRate + 'k')\n\t\t\t\t.on('end', () => {\n\t\t\t\t\tlog.info('file has been transcoded successfully, sending it now');\n\t\t\t\t\tstream.contentType(this.format);\n\t\t\t\t\tstream.setHeader('Content-Length', fs.statSync(filename).size);\n\t\t\t\t\tconst rs = fs.createReadStream(filename, {autoClose: true});\n\t\t\t\t\trs.on('end', () => {\n\t\t\t\t\t\tcleanupCallback();\n\t\t\t\t\t});\n\t\t\t\t\trs.on('error', () => {\n\t\t\t\t\t\tcleanupCallback();\n\t\t\t\t\t});\n\t\t\t\t\trs.pipe(stream);\n\t\t\t\t})\n\t\t\t\t.on('error', (err2: Error) => {\n\t\t\t\t\tcleanupCallback();\n\t\t\t\t\tconst msg = 'an error happened while transcoding: ' + err2.message;\n\t\t\t\t\tstream.status(400).send(msg);\n\t\t\t\t\tlog.error(msg);\n\t\t\t\t});\n\t\t\tproc.save(filename);\n\t\t});\n\t}\n\n}\n","module.exports = require(\"tmp\");","import {DBObjectType} from '../../types';\nimport {BookmarkStore, SearchQueryBookmark} from './bookmark.store';\nimport {Bookmark} from './bookmark.model';\nimport {BaseStoreService} from '../base/base.service';\n\nexport class BookmarkService extends BaseStoreService<Bookmark, SearchQueryBookmark> {\n\n\tconstructor(public bookmarkStore: BookmarkStore) {\n\t\tsuper(bookmarkStore);\n\t}\n\n\tasync getAll(userID: string): Promise<Array<Bookmark>> {\n\t\treturn await this.bookmarkStore.search({userID});\n\t}\n\n\tasync get(trackID: string, userID: string): Promise<Bookmark | undefined> {\n\t\treturn await this.bookmarkStore.searchOne({userID, destID: trackID});\n\t}\n\n\tasync create(destID: string, userID: string, position: number, comment: string | undefined): Promise<Bookmark> {\n\t\tlet bookmark = await this.bookmarkStore.searchOne({destID, userID});\n\t\tif (!bookmark) {\n\t\t\tbookmark = {\n\t\t\t\tid: '',\n\t\t\t\ttype: DBObjectType.bookmark,\n\t\t\t\tdestID,\n\t\t\t\tuserID,\n\t\t\t\tposition,\n\t\t\t\tcomment,\n\t\t\t\tcreated: Date.now(),\n\t\t\t\tchanged: Date.now()\n\t\t\t};\n\t\t\tbookmark.id = await this.bookmarkStore.add(bookmark);\n\t\t} else {\n\t\t\tbookmark.comment = comment;\n\t\t\tbookmark.position = position;\n\t\t\tbookmark.changed = Date.now();\n\t\t\tawait this.bookmarkStore.replace(bookmark);\n\t\t}\n\t\treturn bookmark;\n\t}\n\n\tasync remove(trackID: string, userID: string): Promise<void> {\n\t\tawait this.bookmarkStore.removeByQuery({destID: trackID, userID});\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {SearchQueryState, StateStore} from './state.store';\nimport {State, States} from './state.model';\nimport {BaseStoreService} from '../base/base.service';\n\nexport class StateService extends BaseStoreService<State, SearchQueryState> {\n\n\tconstructor(public stateStore: StateStore) {\n\t\tsuper(stateStore);\n\t}\n\n\tprivate emptyState(destID: string, destType: DBObjectType, userID: string): State {\n\t\treturn {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.state,\n\t\t\tdestID,\n\t\t\tdestType,\n\t\t\tplayed: 0,\n\t\t\tlastplayed: 0,\n\t\t\tfaved: undefined,\n\t\t\trated: 0,\n\t\t\tuserID\n\t\t};\n\t}\n\n\tasync fav(id: string, type: DBObjectType, userID: string, remove: boolean): Promise<State> {\n\t\tconst state = await this.findOrCreate(id, userID, type);\n\t\tif (remove) {\n\t\t\tif (state.faved === undefined) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\tstate.faved = undefined;\n\t\t} else {\n\t\t\tif (state.faved !== undefined) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\tstate.faved = Date.now();\n\t\t}\n\t\tif (state.id.length === 0) {\n\t\t\tawait this.stateStore.add(state);\n\t\t} else {\n\t\t\tawait this.stateStore.replace(state);\n\t\t}\n\t\treturn state;\n\t}\n\n\tasync rate(id: string, type: DBObjectType, userID: string, rating: number): Promise<State> {\n\t\tconst state = await this.findOrCreate(id, userID, type);\n\t\tif (rating === 0) {\n\t\t\tstate.rated = undefined;\n\t\t} else {\n\t\t\tstate.rated = rating;\n\t\t}\n\t\tif (state.id.length === 0) {\n\t\t\tawait this.stateStore.add(state);\n\t\t} else {\n\t\t\tawait this.stateStore.replace(state);\n\t\t}\n\t\treturn state;\n\t}\n\n\tasync findOrCreate(destID: string, userID: string, type: DBObjectType): Promise<State> {\n\t\tconst state = await this.stateStore.searchOne({userID, destID, type});\n\t\treturn state || this.emptyState(destID, type, userID);\n\t}\n\n\tasync findOrCreateMany(destIDs: Array<string>, userID: string, type: DBObjectType): Promise<States> {\n\t\tif (!destIDs || destIDs.length === 0) {\n\t\t\treturn {};\n\t\t}\n\t\tconst list = await this.stateStore.search({userID, type, destIDs});\n\t\tconst result: { [id: string]: State } = {};\n\t\tlist.forEach((state) => {\n\t\t\tresult[state.destID] = state;\n\t\t});\n\t\tdestIDs.forEach((id) => {\n\t\t\tif (!result[id]) {\n\t\t\t\tresult[id] = this.emptyState(id, type, userID);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tasync getHighestRatedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, minRating: 1});\n\t\tconst ratings = states.filter(state => state.rated !== undefined).sort((a, b) => <number>b.rated - <number>a.rated);\n\t\treturn ratings.map(a => a.destID);\n\t}\n\n\tasync getAvgHighestDestIDs(type: DBObjectType): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({type});\n\t\tconst ratings: { [id: string]: Array<number> } = {};\n\t\tstates.forEach(state => {\n\t\t\tif (state.rated !== undefined) {\n\t\t\t\tratings[state.destID] = ratings[state.destID] || [];\n\t\t\t\tratings[state.destID].push(state.rated);\n\t\t\t}\n\t\t});\n\t\tconst list = Object.keys(ratings).map(key => {\n\t\t\treturn {\n\t\t\t\tid: key,\n\t\t\t\tavg: ratings[key].reduce((b, c) => (b + c), 0) / ratings[key].length\n\t\t\t};\n\t\t}).sort((a, b) => (b.avg - a.avg));\n\t\treturn list.map(a => a.id);\n\t}\n\n\tasync getFrequentlyPlayedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, isPlayed: true});\n\t\tstates.sort((a, b) => b.played - a.played);\n\t\treturn states.map(a => a.destID);\n\t}\n\n\tasync getFavedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, isFaved: true});\n\t\tstates.sort((a, b) => <number>b.faved - <number>a.faved);\n\t\treturn states.map(a => a.destID);\n\t}\n\n\tasync getRecentlyPlayedDestIDs(type: DBObjectType, userID: string): Promise<Array<string>> {\n\t\tconst states = await this.stateStore.search({userID, type, isPlayed: true});\n\t\tstates.sort((a, b) => b.lastplayed - a.lastplayed);\n\t\treturn states.map(a => a.destID);\n\t}\n\n\tasync reportPlaying(id: string, type: DBObjectType, userID: string): Promise<State> {\n\t\tconst state = await this.findOrCreate(id, userID, type);\n\t\tstate.played++;\n\t\tstate.lastplayed = Date.now();\n\t\tawait this.stateStore.upsert([state]);\n\t\treturn state;\n\t}\n\n}\n","import {IApiBinaryResult} from '../../typings';\nimport {DBObjectType, FolderType} from '../../types';\nimport path from 'path';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {Track} from '../../objects/track/track.model';\nimport {User} from '../../objects/user/user.model';\nimport {Album} from '../../objects/album/album.model';\nimport {Artist} from '../../objects/artist/artist.model';\nimport {DBObject} from '../../objects/base/base.model';\nimport {Episode} from '../../objects/episode/episode.model';\nimport {Playlist} from '../../objects/playlist/playlist.model';\nimport {Podcast} from '../../objects/podcast/podcast.model';\nimport {FolderService} from '../../objects/folder/folder.service';\nimport {TrackService} from '../../objects/track/track.service';\nimport {ArtistService} from '../../objects/artist/artist.service';\nimport {AlbumService} from '../../objects/album/album.service';\nimport {UserService} from '../../objects/user/user.service';\n\nexport class ImageService {\n\n\tconstructor(private imageModule: ImageModule, private trackService: TrackService,\n\t\t\t\tprivate folderService: FolderService, private artistService: ArtistService,\n\t\t\t\tprivate albumService: AlbumService, private userService: UserService) {\n\t}\n\n\tasync getObjImage(o: DBObject, size?: number, format?: string): Promise<IApiBinaryResult> {\n\t\tlet result: IApiBinaryResult | undefined;\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\tconst track = <Track>o;\n\t\t\t\tresult = await this.trackService.getTrackImage(track, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.folder:\n\t\t\t\tconst folder = <Folder>o;\n\t\t\t\tresult = await this.folderService.getFolderImage(folder, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.artist:\n\t\t\t\tconst artist = <Artist>o;\n\t\t\t\tresult = await this.artistService.getArtistImage(artist, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.album:\n\t\t\t\tconst album = <Album>o;\n\t\t\t\tresult = await this.albumService.getAlbumImage(album, size, format);\n\t\t\t\tbreak;\n\t\t\tcase DBObjectType.user:\n\t\t\t\tconst user = <User>o;\n\t\t\t\tresult = await this.userService.getUserImage(user, size, format);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tif (!result) {\n\t\t\treturn this.paintImage(o, size, format);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tasync paintImage(obj: DBObject, size?: number, format?: string): Promise<IApiBinaryResult> {\n\t\tconst getCoverArtText = (o: DBObject): string => {\n\t\t\tswitch (o.type) {\n\t\t\t\tcase DBObjectType.track:\n\t\t\t\t\tconst track = <Track>o;\n\t\t\t\t\treturn track.tag && track.tag.title ? track.tag.title : path.basename(track.path);\n\t\t\t\tcase DBObjectType.folder:\n\t\t\t\t\tconst folder = <Folder>o;\n\t\t\t\t\tlet result: string | undefined;\n\t\t\t\t\tif (folder.tag) {\n\t\t\t\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\t\t\t\tresult = folder.tag.artist;\n\t\t\t\t\t\t} else if ([FolderType.multialbum, FolderType.album].indexOf(folder.tag.type) >= 0) {\n\t\t\t\t\t\t\tresult = folder.tag.album;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!result || result.length === 0) {\n\t\t\t\t\t\tresult = path.basename(folder.path);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\tcase DBObjectType.episode:\n\t\t\t\t\tconst episode: Episode = <Episode>o;\n\t\t\t\t\tlet text: string | undefined = episode.tag ? episode.tag.title : undefined;\n\t\t\t\t\tif (!text && episode.path) {\n\t\t\t\t\t\ttext = path.basename(episode.path);\n\t\t\t\t\t}\n\t\t\t\t\tif (!text) {\n\t\t\t\t\t\ttext = 'podcast';\n\t\t\t\t\t}\n\t\t\t\t\treturn text;\n\t\t\t\tcase DBObjectType.playlist:\n\t\t\t\t\tconst playlist: Playlist = <Playlist>o;\n\t\t\t\t\treturn playlist.name;\n\t\t\t\tcase DBObjectType.podcast:\n\t\t\t\t\tconst podcast: Podcast = <Podcast>o;\n\t\t\t\t\treturn podcast.tag ? podcast.tag.title : podcast.url;\n\t\t\t\tcase DBObjectType.album:\n\t\t\t\t\tconst album: Album = <Album>o;\n\t\t\t\t\treturn album.name;\n\t\t\t\tcase DBObjectType.artist:\n\t\t\t\t\tconst artist: Artist = <Artist>o;\n\t\t\t\t\treturn artist.name;\n\t\t\t\tcase DBObjectType.user:\n\t\t\t\t\tconst user: User = <User>o;\n\t\t\t\t\treturn user.name;\n\t\t\t\tdefault:\n\t\t\t\t\treturn DBObjectType[o.type];\n\t\t\t}\n\t\t};\n\t\tconst s = getCoverArtText(obj);\n\t\treturn this.imageModule.paint(s, size || 128, format);\n\t}\n\n}\n","import {IApiBinaryResult} from '../../typings';\nimport path from 'path';\nimport {CompressFolderStream, CompressListStream} from '../../utils/compress-stream';\nimport {DBObjectType} from '../../types';\nimport {User} from '../../objects/user/user.model';\nimport {DBObject} from '../../objects/base/base.model';\nimport {Track} from '../../objects/track/track.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {Artist} from '../../objects/artist/artist.model';\nimport {Album} from '../../objects/album/album.model';\nimport {Playlist} from '../../objects/playlist/playlist.model';\nimport {TrackStore} from '../../objects/track/track.store';\nimport {Episode} from '../../objects/episode/episode.model';\n\nexport class DownloadService {\n\n\tconstructor(private trackStore: TrackStore) {\n\n\t}\n\n\tprivate async downloadEpisode(episode: Episode, format?: string): Promise<IApiBinaryResult> {\n\t\tif (!episode.path) {\n\t\t\treturn Promise.reject(Error('Podcast episode not ready'));\n\t\t}\n\t\treturn {pipe: new CompressListStream([episode.path], path.basename(episode.path), format)};\n\t}\n\n\tprivate async downloadTrack(track: Track, format?: string): Promise<IApiBinaryResult> {\n\t\treturn {pipe: new CompressListStream([path.join(track.path, track.name)], path.basename(track.name), format)};\n\t}\n\n\tprivate async downloadFolder(folder: Folder, format?: string): Promise<IApiBinaryResult> {\n\t\treturn {pipe: new CompressFolderStream(folder.path, path.basename(folder.path), format)};\n\t}\n\n\tprivate async downloadArtist(artist: Artist, format?: string): Promise<IApiBinaryResult> {\n\t\tconst tracks = await this.trackStore.byIds(artist.trackIDs);\n\t\tconst fileList = tracks.map(t => path.join(t.path, t.name));\n\t\treturn {pipe: new CompressListStream(fileList, artist.name, format)};\n\t}\n\n\tprivate async downloadAlbum(album: Album, format?: string): Promise<IApiBinaryResult> {\n\t\tconst tracks = await this.trackStore.byIds(album.trackIDs);\n\t\tconst fileList = tracks.map(t => path.join(t.path, t.name));\n\t\treturn {pipe: new CompressListStream(fileList, album.name, format)};\n\t}\n\n\tprivate async downloadPlaylist(playlist: Playlist, format: string | undefined, user: User): Promise<IApiBinaryResult> {\n\t\tif (playlist.userID !== user.id && !playlist.isPublic) {\n\t\t\treturn Promise.reject(Error('Unauthorized'));\n\t\t}\n\t\tconst tracks = await this.trackStore.byIds(playlist.trackIDs);\n\t\tconst fileList = tracks.map(t => path.join(t.path, t.name));\n\t\t// TODO: add playlist index file m3u/pls\n\t\treturn {pipe: new CompressListStream(fileList, playlist.name, format)};\n\t}\n\n\tasync getObjDownload(o: DBObject, format: string | undefined, user: User): Promise<IApiBinaryResult> {\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\treturn this.downloadTrack(<Track>o, format);\n\t\t\tcase DBObjectType.folder:\n\t\t\t\treturn this.downloadFolder(<Folder>o, format);\n\t\t\tcase DBObjectType.artist:\n\t\t\t\treturn this.downloadArtist(<Artist>o, format);\n\t\t\tcase DBObjectType.album:\n\t\t\t\treturn this.downloadAlbum(<Album>o, format);\n\t\t\tcase DBObjectType.episode:\n\t\t\t\treturn this.downloadEpisode(<Episode>o, format);\n\t\t\tcase DBObjectType.playlist:\n\t\t\t\treturn this.downloadPlaylist(<Playlist>o, format, user);\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Download Type'));\n\t}\n\n}\n","import archiver from 'archiver';\nimport express from 'express';\nimport {IStreamData} from '../typings';\nimport * as path from 'path';\nimport {replaceFileSystemChars} from './fs-utils';\n\nabstract class BaseCompressStream implements IStreamData {\n\tpublic filename: string;\n\tpublic streaming = true;\n\tpublic format: string;\n\n\tprotected constructor(filename: string, format?: string) {\n\t\tthis.filename = replaceFileSystemChars(filename, '_').replace(/ /g, '_');\n\t\tthis.format = format || 'zip';\n\t\tif (!CompressListStream.isSupportedFormat(this.format)) {\n\t\t\tthrow new Error('Unsupported Download Format');\n\t\t}\n\t}\n\n\tstatic isSupportedFormat(format: string): boolean {\n\t\treturn ['zip', 'tar'].indexOf(format) >= 0;\n\t}\n\n\tpipe(stream: express.Response) {\n\t\t// logger.verbose('Start streaming');\n\t\tconst format = 'zip';\n\t\tconst archive = archiver(<archiver.Format>this.format, {zlib: {level: 0}});\n\t\tarchive.on('error', (err) => {\n\t\t\t// logger.error('archiver err ' + err);\n\t\t\tthrow err;\n\t\t});\n\t\tstream.contentType('zip');\n\t\tstream.setHeader('Content-Disposition', 'attachment; filename=\"' + (this.filename || 'download') + '.' + format + '\"');\n\t\t// stream.setHeader('Content-Length', stat.size); do NOT report wrong size!\n\t\tstream.on('finish', () => {\n\t\t\t// logger.verbose('streamed ' + archive.pointer() + ' total bytes');\n\t\t\tthis.streaming = false;\n\t\t});\n\t\tarchive.pipe(stream);\n\t\tthis.run(archive);\n\t\tarchive.finalize();\n\t}\n\n\tprotected abstract run(archive: archiver.Archiver): void;\n}\n\n\nexport class CompressFolderStream extends BaseCompressStream {\n\n\tconstructor(public folder: string, filename: string, format?: string) {\n\t\tsuper(filename, format);\n\t}\n\n\tprotected run(archive: archiver.Archiver): void {\n\t\tarchive.directory(this.folder, false);\n\t}\n}\n\nexport class CompressListStream extends BaseCompressStream {\n\tpublic list: Array<string> = [];\n\n\tconstructor(list: Array<string>, filename: string, format?: string) {\n\t\tsuper(filename, format);\n\t\tthis.list = list;\n\t}\n\n\tprotected run(archive: archiver.Archiver): void {\n\t\tthis.list.forEach(file => {\n\t\t\tarchive.file(file, {name: path.basename(file)});\n\t\t});\n\t}\n\n}\n","module.exports = require(\"archiver\");","import {DBObjectType} from '../../types';\nimport {Radio} from './radio.model';\nimport {RadioStore, SearchQueryRadio} from './radio.store';\nimport {BaseStoreService} from '../base/base.service';\n\nexport class RadioService extends BaseStoreService<Radio, SearchQueryRadio> {\n\n\tconstructor(public radioStore: RadioStore) {\n\t\tsuper(radioStore);\n\t}\n\n\tasync create(name: string, url: string, homepageUrl?: string): Promise<Radio> {\n\t\tconst radio: Radio = {\n\t\t\tid: '',\n\t\t\ttype: DBObjectType.radio,\n\t\t\tname,\n\t\t\thomepage: homepageUrl,\n\t\t\turl,\n\t\t\tcreated: Date.now(),\n\t\t\tchanged: Date.now()\n\t\t};\n\t\tradio.id = await this.radioStore.add(radio);\n\t\treturn radio;\n\t}\n\n\tasync update(radio: Radio, name?: string, url?: string, homepageUrl?: string): Promise<void> {\n\t\tradio.homepage = homepageUrl || radio.homepage;\n\t\tradio.url = url || radio.url;\n\t\tradio.name = name || radio.name;\n\t\tradio.changed = Date.now();\n\t\tawait this.radioStore.replace(radio);\n\t}\n\n\tasync remove(radio: Radio): Promise<void> {\n\t\tawait this.radioStore.remove(radio.id);\n\t}\n}\n","import {Folder} from './folder.model';\nimport {FolderStore, SearchQueryFolder} from './folder.store';\nimport {cleanFolderSystemChars, fileDeleteIfExists} from '../../utils/fs-utils';\nimport {TrackStore} from '../track/track.store';\nimport path from 'path';\nimport fse from 'fs-extra';\nimport Logger from '../../utils/logger';\nimport {IApiBinaryResult} from '../../typings';\nimport {FolderTypeImageName} from '../../types';\nimport {ImageModule} from '../../modules/image/image.module';\nimport {BaseListService} from '../base/base.list.service';\nimport {StateService} from '../state/state.service';\n\nconst log = Logger('FolderService');\n\nexport class FolderService extends BaseListService<Folder, SearchQueryFolder> {\n\n\tconstructor(public folderStore: FolderStore, private trackStore: TrackStore, stateService: StateService, private imageModule: ImageModule) {\n\t\tsuper(folderStore, stateService);\n\t}\n\n\tasync renameFolder(folder: Folder, name: string): Promise<void> {\n\t\tname = cleanFolderSystemChars(name, '').trim();\n\t\tif (name.length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Name'));\n\t\t}\n\t\tconst p = path.dirname(folder.path);\n\t\tconst newPath = path.join(p, name);\n\t\tconst exists = await fse.pathExists(newPath);\n\t\tif (exists) {\n\t\t\treturn Promise.reject(Error('Directory already exists'));\n\t\t}\n\t\tawait fse.rename(folder.path, newPath);\n\t\tconst folders = await this.folderStore.search({inPath: folder.path});\n\t\tfor (const f of folders) {\n\t\t\tconst rest = f.path.slice(folder.path.length - 1);\n\t\t\tif (rest.length > 0 && rest[0] !== path.sep) {\n\t\t\t\tlog.error('WRONG inPath MATCH', rest, folder.path, f.path);\n\t\t\t} else {\n\t\t\t\tf.path = newPath + rest;\n\t\t\t\tawait this.folderStore.replace(f);\n\t\t\t}\n\t\t}\n\t\tconst tracks = await this.trackStore.search({inPath: folder.path});\n\t\tfor (const t of tracks) {\n\t\t\tt.path = t.path.replace(folder.path, newPath);\n\t\t\tawait this.trackStore.replace(t);\n\t\t}\n\t\tfolder.path = newPath;\n\t}\n\n\tasync collectFolderPath(folderId: string | undefined): Promise<Array<Folder>> {\n\t\tconst result: Array<Folder> = [];\n\t\tconst store = this.folderStore;\n\n\t\tasync function collect(id?: string): Promise<void> {\n\t\t\tif (!id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst folder = await store.byId(id);\n\t\t\tif (folder) {\n\t\t\t\tresult.unshift(folder);\n\t\t\t\tawait collect(folder.parentID);\n\t\t\t}\n\t\t}\n\n\t\tawait collect(folderId);\n\t\treturn result;\n\t}\n\n\tasync getFolderImage(folder: Folder, size?: number, format?: string): Promise<IApiBinaryResult | undefined> {\n\t\tif (!folder.tag.image) {\n\t\t\tif (folder.info && folder.info.album.image && folder.info.album.image.large) {\n\t\t\t\tawait this.downloadFolderImage(folder, folder.info.album.image.large);\n\t\t\t} else if (folder.info && folder.info.artist.image && folder.info.artist.image.large) {\n\t\t\t\tawait this.downloadFolderImage(folder, folder.info.artist.image.large);\n\t\t\t}\n\t\t\tif (!folder.tag.image) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\treturn await this.imageModule.get(folder.id, path.join(folder.path, folder.tag.image), size, format);\n\t}\n\n\tasync downloadFolderImage(folder: Folder, imageUrl: string): Promise<void> {\n\t\tfolder.tag.image = await this.imageModule.storeImage(folder.path, FolderTypeImageName[folder.tag.type], imageUrl);\n\t\tawait this.folderStore.replace(folder);\n\t}\n\n\tasync setFolderImage(folder: Folder, filename: string): Promise<void> {\n\t\tconst destFileName = FolderTypeImageName[folder.tag.type] + path.extname(filename);\n\t\tconst destName = path.join(folder.path, destFileName);\n\t\tawait fileDeleteIfExists(destName);\n\t\tawait fse.copy(filename, destName);\n\t\tfolder.tag.image = destFileName;\n\t\tawait this.folderStore.replace(folder);\n\t}\n\n\n}\n","import path from 'path';\nimport Logger from '../../utils/logger';\nimport {downloadFile} from '../../utils/download';\nimport {fileDeleteIfExists} from '../../utils/fs-utils';\nimport {IApiBinaryResult} from '../../typings';\nimport Jimp from 'jimp';\nimport mimeTypes from 'mime-types';\nimport {DebouncePromises} from '../../utils/debounce-promises';\nimport fse from 'fs-extra';\nimport {SupportedWriteImageFormat} from '../../utils/filetype';\n\ntype JimpFont = any;\n\nconst log = Logger('Images');\n\n/**\n * Handles image access/reading/writing/transforming\n */\n\nexport class ImageModule {\n\tprivate format = 'png';\n\tprivate font: JimpFont | undefined;\n\tprivate imageCacheDebounce = new DebouncePromises<IApiBinaryResult>();\n\n\tconstructor(private imageCachePath: string) {\n\t}\n\n\tasync storeImage(filepath: string, name: string, imageUrl: string): Promise<string> {\n\t\tlog.debug('Requesting image', imageUrl);\n\t\tconst imageext = path.extname(imageUrl).split('?')[0].trim().toLowerCase();\n\t\tif (imageext.length === 0) {\n\t\t\treturn Promise.reject(Error('Invalid Image Url'));\n\t\t}\n\t\tconst filename = name + imageext;\n\t\tawait downloadFile(imageUrl, path.join(filepath, filename));\n\t\tlog.info('image downloaded', filename);\n\t\treturn filename;\n\t}\n\n\tasync paint(text: string, size: number, format: string | undefined): Promise<IApiBinaryResult> {\n\t\tsize = size || 320;\n\t\tconst image = new Jimp(360, 360, '#282828');\n\t\tif (!this.font) {\n\t\t\tthis.font = await Jimp.loadFont(Jimp.FONT_SANS_32_WHITE);\n\t\t}\n\t\timage.print(this.font, 10, 10, {\n\t\t\ttext: text,\n\t\t\talignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n\t\t\talignmentY: Jimp.VERTICAL_ALIGN_MIDDLE\n\t\t}, 340, 340);\n\t\t// image.greyscale();\n\t\timage.resize(size, size);\n\t\tconst mime = mimeTypes.lookup(format ? format : this.format);\n\t\tif (!mime) {\n\t\t\treturn Promise.reject('Unknown Image Format Request');\n\t\t}\n\t\tconst buffer = await image.getBufferAsync(mime);\n\t\treturn {\n\t\t\tbuffer: {\n\t\t\t\tbuffer: buffer,\n\t\t\t\tcontentType: mime\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async getImage(filename: string, size: number | undefined, name: string): Promise<IApiBinaryResult> {\n\t\tlet fileFormat = path.extname(filename);\n\t\tif (fileFormat[0] === '.') {\n\t\t\tfileFormat = fileFormat.slice(1);\n\t\t}\n\t\treturn this.getImageAs(filename, fileFormat, size, name);\n\t}\n\n\tprivate async getImageAs(filename: string, format: string, size: number | undefined, name: string): Promise<IApiBinaryResult> {\n\t\tlet fileFormat = path.extname(filename);\n\t\tif (fileFormat[0] === '.') {\n\t\t\tfileFormat = fileFormat.slice(1);\n\t\t}\n\t\tconst exists = await fse.pathExists(filename);\n\t\tif (!exists) {\n\t\t\treturn Promise.reject(Error('File not found'));\n\t\t}\n\t\tif (size || (fileFormat !== format)) {\n\t\t\tconst image = await Jimp.read(filename);\n\t\t\tconst mime = mimeTypes.lookup(format);\n\t\t\tif (!mime) {\n\t\t\t\treturn Promise.reject('Unknown Image Format Request');\n\t\t\t}\n\t\t\tif (size) {\n\t\t\t\timage.crop(1, 1, image.getWidth() - 2, image.getHeight() - 2);\n\t\t\t\t// image.autocrop({cropOnlyFrames: false, tolerance: 0.0004, cropSymmetric: true});\n\t\t\t\timage.contain(size, size);\n\t\t\t}\n\t\t\tconst buffer = await image.getBufferAsync(mime);\n\t\t\treturn {\n\t\t\t\tbuffer: {\n\t\t\t\t\tbuffer: buffer,\n\t\t\t\t\tcontentType: mime\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\treturn {file: {filename, name}};\n\t\t}\n\t}\n\n\tasync get(id: string, filename: string, size: number | undefined, format?: string): Promise<IApiBinaryResult> {\n\t\tif (!filename) {\n\t\t\treturn Promise.reject(Error('Invalid Path'));\n\t\t}\n\t\tif (format && SupportedWriteImageFormat.indexOf(format) < 0) {\n\t\t\treturn Promise.reject(Error('Invalid Format'));\n\t\t}\n\t\tif (format || size) {\n\t\t\tconst cacheID = 'thumb-' + id + (size ? '-' + size : '') + '.' + (format || this.format);\n\t\t\tif (this.imageCacheDebounce.isPending(cacheID)) {\n\t\t\t\treturn this.imageCacheDebounce.append(cacheID);\n\t\t\t}\n\t\t\tthis.imageCacheDebounce.setPending(cacheID);\n\t\t\ttry {\n\t\t\t\tlet result: IApiBinaryResult;\n\t\t\t\tconst cachefile = path.join(this.imageCachePath, cacheID);\n\t\t\t\tconst exists = await fse.pathExists(cachefile);\n\t\t\t\tif (exists) {\n\t\t\t\t\tresult = {file: {filename: cachefile, name: cacheID}};\n\t\t\t\t} else {\n\t\t\t\t\tif (format) {\n\t\t\t\t\t\tresult = await this.getImageAs(filename, format, size, cacheID);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = await this.getImage(filename, size, cacheID);\n\t\t\t\t\t}\n\t\t\t\t\tif (result.buffer) {\n\t\t\t\t\t\tlog.debug('Writing image cache file', cachefile);\n\t\t\t\t\t\tawait fse.writeFile(cachefile, result.buffer.buffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait this.imageCacheDebounce.resolve(cacheID, result);\n\t\t\t\treturn result;\n\t\t\t} catch (e) {\n\t\t\t\tawait this.imageCacheDebounce.reject(cacheID, e);\n\t\t\t\treturn Promise.reject(e);\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.getImage(filename, size, id + '.' + (format || this.format));\n\t\t}\n\t}\n\n\tasync resizeImage(filename: string, destination: string, size: number): Promise<void> {\n\t\tconst image = await Jimp.read(filename);\n\t\timage.contain(size, size);\n\t\tawait image.writeAsync(destination);\n\t}\n\n\tasync clearImageCacheByIDs(ids: Array<string>): Promise<void> {\n\t\tconst searches = ids.filter(id => id.length > 0).map(id => 'thumb-' + id);\n\t\tif (searches.length > 0) {\n\t\t\tlet list = await fse.readdir(this.imageCachePath);\n\t\t\tlist = list.filter(name => {\n\t\t\t\treturn searches.findIndex(s => name.indexOf(s) === 0) >= 0;\n\t\t\t});\n\t\t\tfor (const filename of list) {\n\t\t\t\tawait fse.unlink(path.resolve(this.imageCachePath, filename));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync clearImageCacheByID(id: string): Promise<void> {\n\t\tif (id.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst search = 'thumb-' + id;\n\t\tlet list = await fse.readdir(this.imageCachePath);\n\t\tlist = list.filter(name => name.indexOf(search) === 0);\n\t\tfor (const filename of list) {\n\t\t\tawait fse.unlink(path.resolve(this.imageCachePath, filename));\n\t\t}\n\t}\n\n\tasync createAvatar(filename: string, destination: string): Promise<void> {\n\t\tif ((!filename)) {\n\t\t\treturn Promise.reject(Error('Invalid Path'));\n\t\t}\n\t\tconst exists = await fse.pathExists(filename);\n\t\tif (!exists) {\n\t\t\treturn Promise.reject(Error('File not found'));\n\t\t}\n\t\tawait this.resizeImage(filename, filename + '.new', 64);\n\t\tawait fileDeleteIfExists(destination);\n\t\tawait fse.rename(filename + '.new', destination);\n\t}\n\n}\n","module.exports = require(\"http\");","module.exports = require(\"jimp\");","module.exports = require(\"mime-types\");","import {Track} from './track.model';\nimport {IApiBinaryResult} from '../../typings';\nimport {SearchQueryTrack, TrackStore} from './track.store';\nimport {FolderService} from '../folder/folder.service';\nimport {Folder} from '../folder/folder.model';\nimport {BaseListService} from '../base/base.list.service';\nimport {StateService} from '../state/state.service';\n\nexport class TrackService extends BaseListService<Track, SearchQueryTrack> {\n\n\tconstructor(public trackStore: TrackStore, private folderService: FolderService, stateService: StateService) {\n\t\tsuper(trackStore, stateService);\n\t}\n\n\tasync getTrackFolder(track: Track): Promise<Folder | undefined> {\n\t\treturn await this.folderService.folderStore.byId(track.parentID);\n\t}\n\n\tasync getTrackImage(track: Track, size?: number, format?: string): Promise<IApiBinaryResult | undefined> {\n\t\tconst folder = await this.getTrackFolder(track);\n\t\tif (folder) {\n\t\t\treturn this.folderService.getFolderImage(folder, size, format);\n\t\t}\n\t}\n\n}\n","import {IApiBinaryResult} from '../../typings';\nimport {TrackStore} from '../track/track.store';\nimport {FolderService} from '../folder/folder.service';\nimport {Artist} from './artist.model';\nimport {FolderType} from '../../types';\nimport {ArtistStore, SearchQueryArtist} from './artist.store';\nimport {Folder} from '../folder/folder.model';\nimport {BaseListService} from '../base/base.list.service';\nimport {StateService} from '../state/state.service';\n\nexport class ArtistService extends BaseListService<Artist, SearchQueryArtist> {\n\n\n\tconstructor(public artistStore: ArtistStore, private trackStore: TrackStore, private folderService: FolderService, stateService: StateService) {\n\t\tsuper(artistStore, stateService);\n\t}\n\n\tasync getArtistFolder(artist: Artist): Promise<Folder | undefined> {\n\t\tif (artist.trackIDs.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst track = await this.trackStore.byId(artist.trackIDs[0]);\n\t\tif (!track) {\n\t\t\treturn;\n\t\t}\n\t\tconst folders = await this.folderService.collectFolderPath(track.parentID);\n\t\tif (folders.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet folder = folders.find(f => f.tag.type === FolderType.artist);\n\t\tif (!folder) {\n\t\t\tfolder = folders[folders.length - 1];\n\t\t}\n\t\treturn folder;\n\t}\n\n\tasync getArtistImage(artist: Artist, size?: number, format?: string): Promise<IApiBinaryResult | undefined> {\n\t\tconst folder = await this.getArtistFolder(artist);\n\t\tif (folder) {\n\t\t\treturn this.folderService.getFolderImage(folder, size, format);\n\t\t}\n\t}\n\n}\n","import {Album} from './album.model';\nimport {IApiBinaryResult} from '../../typings';\nimport {TrackStore} from '../track/track.store';\nimport {AlbumStore, SearchQueryAlbum} from './album.store';\nimport {FolderService} from '../folder/folder.service';\nimport {FolderTypesAlbum} from '../../types';\nimport {Folder} from '../folder/folder.model';\nimport {BaseListService} from '../base/base.list.service';\nimport {StateService} from '../state/state.service';\n\nexport class AlbumService extends BaseListService<Album, SearchQueryAlbum> {\n\n\tconstructor(public albumStore: AlbumStore, private trackStore: TrackStore, private folderService: FolderService, stateService: StateService) {\n\t\tsuper(albumStore, stateService);\n\t}\n\n\tasync getAlbumImage(album: Album, size?: number, format?: string): Promise<IApiBinaryResult | undefined> {\n\t\tconst folder = await this.getAlbumFolder(album);\n\t\tif (folder) {\n\t\t\treturn this.folderService.getFolderImage(folder, size, format);\n\t\t}\n\t}\n\n\tasync getAlbumFolder(album: Album): Promise<Folder | undefined> {\n\t\tif (album.trackIDs.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst track = await this.trackStore.byId(album.trackIDs[0]);\n\t\tif (!track) {\n\t\t\treturn;\n\t\t}\n\t\tlet folders = await this.folderService.collectFolderPath(track.parentID);\n\t\tif (folders.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfolders = folders.sort((a, b) => b.tag.level - a.tag.level);\n\t\tlet folder = folders[0];\n\t\tfor (const f of folders) {\n\t\t\tif (FolderTypesAlbum.indexOf(f.tag.type) >= 0) {\n\t\t\t\tfolder = f;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn folder;\n\t}\n\n}\n","import {fileDeleteIfExists, fileSuffix, pathDeleteIfExists} from '../../utils/fs-utils';\nimport {SupportedAudioFormat} from '../../utils/filetype';\nimport path from 'path';\nimport Logger from '../../utils/logger';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {downloadFile} from '../../utils/download';\nimport fse from 'fs-extra';\nimport {EpisodeStore, SearchQueryEpisode} from './episode.store';\nimport {Episode} from './episode.model';\nimport {PodcastStatus} from '../../types';\nimport {DebouncePromises} from '../../utils/debounce-promises';\nimport {BaseStoreService} from '../base/base.service';\n\nconst log = Logger('EpisodeService');\n\nexport class EpisodeService extends BaseStoreService<Episode, SearchQueryEpisode> {\n\tprivate episodeDownloadDebounce = new DebouncePromises<void>();\n\n\tconstructor(private podcastsPath: string, public episodeStore: EpisodeStore, private audioModule: AudioModule) {\n\t\tsuper(episodeStore);\n\t}\n\n\tisDownloading(podcastEpisodeId: string): boolean {\n\t\treturn this.episodeDownloadDebounce.isPending(podcastEpisodeId);\n\t}\n\n\tprivate async downloadEpisodeFile(episode: Episode): Promise<string> {\n\t\tlet url = '';\n\t\tif (episode.enclosures && episode.enclosures.length > 0) {\n\t\t\turl = episode.enclosures[0].url;\n\t\t} else {\n\t\t\tthrow new Error('No podcast episode url found');\n\t\t}\n\t\tconst ext = fileSuffix(url);\n\t\tif (SupportedAudioFormat.indexOf(ext) < 0) {\n\t\t\tthrow new Error('Unsupported Podcast audio format');\n\t\t}\n\t\tconst p = path.resolve(this.podcastsPath, episode.podcastID);\n\t\tawait fse.ensureDir(p);\n\t\tconst filename = path.join(p, episode.id + '.' + ext);\n\t\tlog.info('retrieving file', url);\n\t\tawait downloadFile(url, filename);\n\t\treturn filename;\n\t}\n\n\tasync downloadEpisode(episode: Episode): Promise<void> {\n\t\tif (this.episodeDownloadDebounce.isPending(episode.id)) {\n\t\t\treturn this.episodeDownloadDebounce.append(episode.id);\n\t\t}\n\t\tthis.episodeDownloadDebounce.setPending(episode.id);\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tconst filename = await this.downloadEpisodeFile(episode);\n\t\t\t\tconst stat = await fse.stat(filename);\n\t\t\t\tconst result = await this.audioModule.read(filename);\n\t\t\t\tepisode.status = PodcastStatus.completed;\n\t\t\t\tepisode.tag = result.tag;\n\t\t\t\tepisode.media = result.media;\n\t\t\t\tepisode.stat = {\n\t\t\t\t\tcreated: stat.ctime.valueOf(),\n\t\t\t\t\tmodified: stat.mtime.valueOf(),\n\t\t\t\t\tsize: stat.size\n\t\t\t\t};\n\t\t\t\tepisode.path = filename;\n\t\t\t} catch (e) {\n\t\t\t\tepisode.status = PodcastStatus.error;\n\t\t\t\tepisode.error = (e || '').toString();\n\t\t\t}\n\t\t\tawait this.episodeStore.replace(episode);\n\t\t\tawait this.episodeDownloadDebounce.resolve(episode.id, undefined);\n\t\t} catch (e) {\n\t\t\tawait this.episodeDownloadDebounce.resolve(episode.id, undefined);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync removeEpisodes(podcastID: string): Promise<void> {\n\t\tconst removeEpisodes = await this.episodeStore.search({podcastID});\n\t\tconst ids = removeEpisodes.map(episode => episode.id);\n\t\tawait this.episodeStore.remove(ids);\n\t\tfor (const episode of removeEpisodes) {\n\t\t\tif (episode.path) {\n\t\t\t\tawait fileDeleteIfExists(episode.path);\n\t\t\t}\n\t\t}\n\t\tconst p = path.resolve(this.podcastsPath, podcastID);\n\t\tawait pathDeleteIfExists(p);\n\t}\n\n\tasync deleteEpisode(episode: Episode): Promise<void> {\n\t\tif (!episode.path) {\n\t\t\treturn;\n\t\t}\n\t\tawait fileDeleteIfExists(episode.path);\n\t\tepisode.path = undefined;\n\t\tepisode.stat = undefined;\n\t\tepisode.media = undefined;\n\t\tepisode.status = PodcastStatus.skipped;\n\t\tawait this.episodeStore.replace(episode);\n\t}\n\n\tasync mergeEpisodes(podcastID: string, episodes: Array<Episode>): Promise<Array<Episode>> {\n\t\tif ((!episodes) || (!episodes.length)) {\n\t\t\treturn [];\n\t\t}\n\t\tconst epi = await this.episodeStore.search({podcastID});\n\t\tconst links = epi.map(e => e.link);\n\t\tepisodes = episodes.filter(e => links.indexOf(e.link) < 0);\n\t\tawait this.episodeStore.upsert(episodes);\n\t\treturn episodes;\n\t}\n\n}\n","/*\n\tThird Party Web Services\n */\n\nimport {JAMSERVE_VERSION} from '../version';\n\nexport interface ThirdpartyToolsConfig {\n\tacoustid: {\n\t\tapiKey: string;\n\t\tuserAgent: string;\n\t};\n\tlastfm: {\n\t\tapiKey: string;\n\t\tuserAgent: string;\n\t};\n\tmusicbrainz: {\n\t\tuserAgent: string;\n\t};\n\tchartlyrics: {\n\t\tuserAgent: string;\n\t};\n}\n\nexport const userAgent = 'JamServe/' + JAMSERVE_VERSION;\n\nexport const ThirdPartyConfig: ThirdpartyToolsConfig = {\n\t/*\n\t\tAcoustid\n\t\thttps://acoustid.org/\n\t\taudio identification via fingerprinting\n\t */\n\tacoustid: {apiKey: 'xuwbosoqd4', userAgent},\n\t/*\n\t\tLastFM\n\t\thttps://www.last.fm/api\n\t\tmusic database\n\t */\n\tlastfm: {apiKey: 'ead198fb293eefea29e8a5b8f0908e55', userAgent},\n\t/*\n\t\tMusicBrainz\n\t\thttps://musicbrainz.org/\n\t\topen music encyclopedia\n\t */\n\tmusicbrainz: {userAgent: userAgent + ' ( jamserve@protonmail.com )'},\n\t/*\n\t\tChart Lyrics\n\t\thttp://www.chartlyrics.com/\n\t\tlyrics database\n\t */\n\tchartlyrics: {userAgent}\n};\n","import express from 'express';\nimport {Engine} from '../engine/engine';\nimport bodyParser from 'body-parser';\nimport {initJamRouter} from './jam/router';\nimport {initSubsonicRouter} from './subsonic/router';\nimport path from 'path';\nimport * as http from 'http';\nimport Logger from '../utils/logger';\nimport helmet from 'helmet';\n\nconst log = Logger('Server');\n\nexport interface EngineRequest extends express.Request {\n\tengine: Engine;\n}\n\nexport class Server {\n\tapp: express.Application;\n\tengine: Engine;\n\tserver: http.Server | undefined;\n\n\tconstructor(engine: Engine) {\n\t\tthis.engine = engine;\n\t\tconst app: express.Application = express();\n\t\tapp.use(bodyParser.urlencoded({extended: true, limit: '10mb'}));\n\t\tapp.use(bodyParser.json({}));\n\t\tapp.use(bodyParser.json({type: 'application/vnd.api+json'}));\n\n\t\tapp.use(helmet());\n\n\t\tfunction EngineMiddleWare(req: express.Request, res: express.Response, next: express.NextFunction) {\n\t\t\t(<EngineRequest>req).engine = engine;\n\t\t\tnext();\n\t\t}\n\n\t\tapp.use(EngineMiddleWare);\n\t\tapp.use('/api/v1', initJamRouter(engine));\n\t\tapp.use('/rest', initSubsonicRouter(engine));\n\n\t\t// frontend (jamberry config file)\n\t\tapp.get('/assets/config/config.js', (req, res) => {\n\t\t\tres.sendFile(path.resolve('./config/jamberry.config.js'));\n\t\t});\n\t\t// frontend (any)\n\t\tapp.get('/*', express.static(path.resolve(engine.config.paths.frontend)));\n\t\tapp.get('/*', (req: express.Request, res: express.Response) => {\n\t\t\tres.sendFile(path.join(path.resolve(engine.config.paths.frontend), 'index.html'));\n\t\t});\n\n\t\tthis.app = app;\n\t}\n\n\tgetURL(): string {\n\t\treturn 'http://' + (this.engine.config.server.listen === '127.0.0.1' ? 'localhost' : this.engine.config.server.listen) + ':' + this.engine.config.server.port;\n\t}\n\n\tasync start(): Promise<void> {\n\t\tthis.server = this.app.listen(this.engine.config.server.port, this.engine.config.server.listen);\n\t\tlog.info('Listening ' + this.getURL());\n\t}\n\n\tasync stop(): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tif (this.server) {\n\t\t\t\t\tthis.server.close(resolve);\n\t\t\t\t\t// this.server.unref();\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n}\n\n","module.exports = require(\"body-parser\");","import express from 'express';\nimport {CheckAuthMiddleWare, UserRequest} from './login';\nimport {ApiResponder} from './response';\nimport multer from 'multer';\nimport path from 'path';\nimport Logger from '../../utils/logger';\nimport {JamController} from './api';\nimport {Engine} from '../../engine/engine';\nimport {Jam} from '../../model/jam-rest-data';\nimport cors, {CorsOptions} from 'cors';\nimport {SessionJSONFileStore} from '../../utils/session-storage';\nimport session from 'express-session';\nimport passport from 'passport';\nimport passportJWT from 'passport-jwt';\nimport passportLocal from 'passport-local';\nimport jwt from 'jsonwebtoken';\nimport {NotFoundError, UnauthError} from './error';\nimport {Register, registerAdminApi, RegisterCallback, registerPublicApi, registerUserApi} from './routes';\nimport {apiCheck} from './check';\nimport {getMaxAge} from '../../utils/max-age';\nimport {formatUser} from '../../objects/user/user.format';\nimport {User} from '../../objects/user/user.model';\nimport {JAMAPI_VERSION} from '../../version';\n\nconst autoUploadTempReap = require('multer-autoreap'); // TODO: multer-autoreap types\nconst rateLimit = require('express-rate-limit');\n\nconst LoginLimiter = rateLimit({\n\twindowMs: 60 * 60 * 1000, // 1 hour window\n\tmax: 5, // start blocking after 5 requests\n\tmessage: 'Too many login requests from this IP, please try again after an hour'\n});\n\nconst log = Logger('Jam.Api');\n\ninterface JWTPayload {\n\tid: string;\n\texp?: number;\n\tclient: string;\n}\n\nfunction CallSessionLoginHandler(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\tpassport.authenticate('local', (err, user, info) => {\n\t\tif (err || !user) {\n\t\t\treturn next();\n\t\t}\n\t\treq.login(user, (err2) => {\n\t\t\tif (err2) {\n\t\t\t\tlog.error(err2);\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\tconst client = req.body.client || 'Unknown Client';\n\t\t\treq.client = client;\n\t\t\tconst maxAge = getMaxAge(req.engine.config.server.jwt.maxAge);\n\t\t\tconst tokenData: JWTPayload = {\n\t\t\t\tid: user.id,\n\t\t\t\texp: maxAge > 0 ? Math.floor((Date.now() + maxAge) / 1000) : undefined,\n\t\t\t\tclient\n\t\t\t};\n\t\t\tconst token = jwt.sign(tokenData, req.engine.config.server.jwt.secret);\n\t\t\tconst result: Jam.Session = {version: JAMAPI_VERSION, allowedCookieDomains: req.engine.config.server.session.allowedCookieDomains, jwt: token, user: formatUser(req.user)};\n\t\t\tApiResponder.data(res, result);\n\t\t});\n\t})(req, res, next);\n}\n\nfunction CallSessionLogoutHandler(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\treq.logout();\n\tApiResponder.ok(res);\n}\n\nfunction AdminMiddleWare(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\tif (!req.user || !req.user.roles.adminRole) {\n\t\tApiResponder.error(res, UnauthError());\n\t} else {\n\t\tnext();\n\t}\n}\n\nexport function initJamRouter(engine: Engine): express.Router {\n\tconst api = new JamController(engine);\n\n\tconst UPLOAD_PATH = engine.config.getDataPath(['cache', 'uploads']);\n\tconst upload = multer({dest: `${UPLOAD_PATH}/`}); // multer configuration\n\n\tconst router = express.Router();\n\n\t// if (router.get('env') === 'production') {\n\t// \trouter.set('trust proxy', 1) // trust first proxy\n\t// \tsess.cookie.secure = true // serve secure cookies\n\t// }\n\tconst maxAge = getMaxAge(engine.config.server.session.cookie.maxAge);\n\trouter.use(session({\n\t\tname: engine.config.server.session.cookie.name,\n\t\tsecret: engine.config.server.session.secret,\n\t\tstore: new SessionJSONFileStore(engine.config.getDataPath(['session', 'sessions.json'])),\n\t\tresave: false,\n\t\tsaveUninitialized: false,\n\t\tcookie: {\n\t\t\tsecure: engine.config.server.session.cookie.secure,\n\t\t\tmaxAge: maxAge > 0 ? maxAge : undefined\n\t\t}\n\t}));\n\trouter.use(passport.initialize());\n\trouter.use(passport.session());\n\tpassport.serializeUser((user: User, done) => {\n\t\tdone(null, user.id);\n\t});\n\tpassport.deserializeUser((id: string, done) => {\n\t\tengine.userService.getByID(id).then(user => done(null, user ? user : false)).catch(done);\n\t});\n\n\tpassport.use('local', new passportLocal.Strategy(\n\t\t{usernameField: 'username', passwordField: 'password'},\n\t\t(username, password, done) => {\n\t\t\tengine.userService.auth(username, password).then(user => done(null, user ? user : false)).catch(done);\n\t\t}\n\t));\n\tpassport.use('jwt-header', new passportJWT.Strategy(\n\t\t{\n\t\t\tjwtFromRequest: passportJWT.ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tsecretOrKey: engine.config.server.jwt.secret\n\t\t},\n\t\t(jwt_payload, done) => {\n\t\t\tengine.userService.getByID(jwt_payload.id).then(user => done(null, user ? user : false, jwt_payload)).catch(done);\n\t\t}\n\t));\n\tpassport.use('jwt-parameter', new passportJWT.Strategy(\n\t\t{\n\t\t\tjwtFromRequest: passportJWT.ExtractJwt.fromUrlQueryParameter('bearer'),\n\t\t\tsecretOrKey: engine.config.server.jwt.secret\n\t\t},\n\t\t(jwt_payload, done) => {\n\t\t\tengine.userService.getByID(jwt_payload.id).then(user => done(null, user ? user : false, jwt_payload)).catch(done);\n\t\t}\n\t));\n\n\tfunction jwtParameterAuthMiddleware(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\t\tif (req.user) {\n\t\t\treturn next();\n\t\t}\n\t\tpassport.authenticate('jwt-parameter', {session: false}, (err, user, info: JWTPayload) => {\n\t\t\tif (err) {\n\t\t\t\tlog.error(err);\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\treq.jwt = !!user;\n\t\t\treq.client = info.client;\n\t\t\treq.user = user;\n\t\t\tnext();\n\t\t})(req, res, next);\n\t}\n\n\tfunction jwtHeaderAuthMiddleware(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\t\tif (req.user) {\n\t\t\treturn next();\n\t\t}\n\t\tpassport.authenticate('jwt-header', {session: false}, (err, user, info: JWTPayload) => {\n\t\t\tif (err) {\n\t\t\t\tlog.error(err);\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\treq.jwt = !!user;\n\t\t\treq.client = info.client;\n\t\t\treq.user = user;\n\t\t\tnext();\n\t\t})(req, res, next);\n\t}\n\n\trouter.use((req, res, next) => {\n\t\tlog.info(req.originalUrl);\n\t\tnext();\n\t});\n\n\trouter.use(<express.RequestHandler>jwtHeaderAuthMiddleware);\n\trouter.use(<express.RequestHandler>jwtParameterAuthMiddleware);\n\n\n\trouter.use(cors({\n\t\tpreflightContinue: false,\n\t\tcredentials: true,\n\t\tallowedHeaders: ['Content-Type', 'Authorization'],\n\t\torigin: true,\n\t\tmethods: ['GET', 'POST']\n\t}));\n\n\tconst register: Register = {\n\t\tget: (name: string, execute: RegisterCallback, apiCheckName?: string) => {\n\t\t\trouter.get(name, apiCheck(apiCheckName || name), async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait execute(req, res);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tawait ApiResponder.error(res, e);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tpost: (name: string, execute: RegisterCallback, apiCheckName?: string) => {\n\t\t\trouter.post(name, apiCheck(apiCheckName || name), async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait execute(req, res);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tawait ApiResponder.error(res, e);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tupload: (name: string, field: string, execute: RegisterCallback, apiCheckName?: string) => {\n\t\t\trouter.post(name, apiCheck(apiCheckName || name), upload.single(field), autoUploadTempReap, async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait execute(req, res);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tawait ApiResponder.error(res, e);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tregisterPublicApi(register, api);\n\trouter.post('/login', LoginLimiter, apiCheck('/login'), <express.RequestHandler>CallSessionLoginHandler);\n\n\tconst corsOptionsDelegate = function(req: express.Request, callback: (err: Error | null, options: CorsOptions) => void) {\n\t\tconst origins = engine.config.server.session.allowedCookieDomains || [];\n\t\tconst corsOptions: CorsOptions = {\n\t\t\tpreflightContinue: false,\n\t\t\tcredentials: true,\n\t\t\tallowedHeaders: ['Content-Type', 'Authorization'],\n\t\t\torigin: function(origin, cb) {\n\t\t\t\tif (origins.indexOf(origin) !== -1 || !origin) {\n\t\t\t\t\tcb(null, true);\n\t\t\t\t} else {\n\t\t\t\t\tif (req.method === 'OPTIONS' || req.jwt) {\n\t\t\t\t\t\tcb(null, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb(new Error('Not allowed by CORS'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tmethods: ['GET', 'POST']\n\t\t};\n\t\tcallback(null, corsOptions); // callback expects two parameters: error and options\n\t};\n\trouter.use(cors(corsOptionsDelegate));\n\n\trouter.post('/logout', <express.RequestHandler>CallSessionLogoutHandler);\n\trouter.use('/docs', express.static(path.resolve('./dist/docs/api/')));\n\n\trouter.use(<express.RequestHandler>CheckAuthMiddleWare); // ensure req.user exists for all requests after this\n\n\tregisterUserApi(register, api);\n\n\trouter.use(<express.RequestHandler>AdminMiddleWare); // ensure req.user is an admin for all requests after this\n\n\tregisterAdminApi(register, api);\n\n\trouter.use((req, res, next) => {\n\t\tApiResponder.error(res, NotFoundError('jam api cmd not found'));\n\t});\n\n\treturn router;\n}\n","import express from 'express';\nimport {EngineRequest} from '../server';\nimport {User} from '../../objects/user/user.model';\n\n/**\n * Fill user into req.user express requests\n */\nexport interface UserRequest extends EngineRequest {\n\tuser: User;\n\tclient: string;\n\tjwt: boolean;\n}\n\nexport function CheckAuthMiddleWare(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\tif (!req.client && req.session && req.session.client) {\n\t\treq.client = req.session.client;\n\t}\n\tif (req.user) {\n\t\treturn next();\n\t}\n\treturn res.status(401).json({error: 'Unauthorized'});\n}\n","module.exports = require(\"multer\");","import {Engine} from '../../engine/engine';\nimport {Jam} from '../../model/jam-rest-data';\nimport {EpisodeController} from '../../objects/episode/episode.controller';\nimport {PodcastController} from '../../objects/podcast/podcast.controller';\nimport {AlbumController} from '../../objects/album/album.controller';\nimport {ArtistController} from '../../objects/artist/artist.controller';\nimport {PlaylistController} from '../../objects/playlist/playlist.controller';\nimport {TrackController} from '../../objects/track/track.controller';\nimport {FolderController} from '../../objects/folder/folder.controller';\nimport {RootController} from '../../objects/root/root.controller';\nimport {UserController} from '../../objects/user/user.controller';\nimport {ChatController} from '../../engine/chat/chat.controller';\nimport {MetadataController} from '../../engine/metadata/metadata.controller';\nimport {StreamController} from '../../engine/stream/stream.controller';\nimport {formatUser} from '../../objects/user/user.format';\nimport {GenreController} from '../../engine/genre/genre.controller';\nimport {NowPlayingController} from '../../engine/nowplaying/nowplaying.controller';\nimport {ImageController} from '../../engine/image/image.controller';\nimport {DownloadController} from '../../engine/download/download.controller';\nimport {User} from '../../objects/user/user.model';\nimport {WaveformController} from '../../engine/waveform/waveform.controller';\nimport {AutocompleteController} from '../../engine/autocomplete/autocomplete.controller';\nimport {BookmarkController} from '../../objects/bookmark/bookmark.controller';\nimport {PlayQueueController} from '../../objects/playqueue/playqueue.controller';\nimport {RadioController} from '../../objects/radio/radio.controller';\nimport {JAMAPI_VERSION} from '../../version';\n\nexport interface JamRequest<T> {\n\tquery: T;\n\tuser: User;\n\tclient?: string;\n\tfile?: string;\n}\n\nexport class JamController {\n\talbumController: AlbumController;\n\tartistController: ArtistController;\n\tautocompleteController: AutocompleteController;\n\tbookmarkController: BookmarkController;\n\tchatController: ChatController;\n\tdownloadController: DownloadController;\n\tepisodeController: EpisodeController;\n\tfolderController: FolderController;\n\tgenreController: GenreController;\n\timageController: ImageController;\n\tmetadataController: MetadataController;\n\tnowPlayingController: NowPlayingController;\n\tplaylistController: PlaylistController;\n\tplayqueueController: PlayQueueController;\n\tpodcastController: PodcastController;\n\tradioController: RadioController;\n\trootController: RootController;\n\tstreamController: StreamController;\n\ttrackController: TrackController;\n\tuserController: UserController;\n\twaveformController: WaveformController;\n\n\tconstructor(private engine: Engine) {\n\t\tthis.streamController = new StreamController(this.engine.streamService, this.engine.nowPlayingService, this.engine.store);\n\t\tthis.chatController = new ChatController(this.engine.chatService);\n\t\tthis.genreController = new GenreController(engine.genreService);\n\t\tthis.nowPlayingController = new NowPlayingController(engine.nowPlayingService);\n\t\tthis.imageController = new ImageController(this.engine.store, this.engine.imageService);\n\t\tthis.downloadController = new DownloadController(this.engine.store, this.engine.downloadService);\n\t\tthis.waveformController = new WaveformController(this.engine.store, this.engine.waveformService);\n\t\tthis.autocompleteController = new AutocompleteController(this.engine.store);\n\t\tthis.radioController = new RadioController(this.engine.radioService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.rootController = new RootController(this.engine.rootService, this.engine.ioService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.trackController = new TrackController(this.engine.trackService, this.engine.audioModule, this.engine.bookmarkService, this.engine.metaDataService, this.streamController, this.engine.ioService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.episodeController = new EpisodeController(this.engine.episodeService, this.streamController,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.podcastController = new PodcastController(this.engine.podcastService, this.episodeController,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.albumController = new AlbumController(this.engine.albumService, this.trackController, this.engine.metaDataService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.artistController = new ArtistController(this.engine.artistService, this.trackController, this.albumController, this.engine.metaDataService, this.engine.indexService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.folderController = new FolderController(this.engine.folderService, this.trackController, this.engine.metaDataService, this.engine.indexService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.userController = new UserController(this.engine.userService,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.playlistController = new PlaylistController(this.engine.playlistService, this.trackController,\n\t\t\tthis.engine.stateService, this.engine.imageService, this.engine.downloadService);\n\t\tthis.bookmarkController = new BookmarkController(this.engine.bookmarkService, this.trackController);\n\t\tthis.playqueueController = new PlayQueueController(this.engine.playQueueService, this.trackController);\n\t\tthis.metadataController = new MetadataController(this.engine.audioModule, this.trackController);\n\t}\n\n\tasync ping(req: JamRequest<{}>): Promise<Jam.Ping> {\n\t\treturn {version: JAMAPI_VERSION};\n\t}\n\n\tasync session(req: JamRequest<{}>): Promise<Jam.Session> {\n\t\tif (req.user) {\n\t\t\treturn {version: JAMAPI_VERSION, allowedCookieDomains: this.engine.config.server.session.allowedCookieDomains, user: formatUser(req.user)};\n\t\t} else {\n\t\t\treturn {version: JAMAPI_VERSION, allowedCookieDomains: this.engine.config.server.session.allowedCookieDomains};\n\t\t}\n\t}\n\n\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType, PodcastStatus} from '../../types';\nimport {IApiBinaryResult} from '../../typings';\nimport {JamRequest} from '../../api/jam/api';\nimport {BaseController} from '../base/base.controller';\nimport {formatEpisode} from './episode.format';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {SearchQueryEpisode} from './episode.store';\nimport {Episode} from './episode.model';\nimport {User} from '../user/user.model';\nimport {EpisodeService} from './episode.service';\nimport {StreamController} from '../../engine/stream/stream.controller';\n\nexport class EpisodeController extends BaseController<JamParameters.Episode, JamParameters.Episodes, JamParameters.IncludesEpisode, SearchQueryEpisode, JamParameters.EpisodeSearch, Episode, Jam.PodcastEpisode> {\n\n\tconstructor(\n\t\tprivate episodeService: EpisodeService,\n\t\tprivate streamController: StreamController,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(episodeService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<Episode>): Array<Episode> {\n\t\treturn items.sort((a, b) => {\n\t\t\t\tif (!a.tag) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (!b.tag) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (a.tag.track !== undefined && b.tag.track !== undefined) {\n\t\t\t\t\tconst res = a.tag.track - b.tag.track;\n\t\t\t\t\tif (res !== 0) {\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn a.name.localeCompare(b.name);\n\t\t\t}\n\t\t);\n\t}\n\n\tasync prepare(episode: Episode, includes: JamParameters.IncludesEpisode, user: User): Promise<Jam.PodcastEpisode> {\n\t\tconst result = formatEpisode(episode, includes,\n\t\t\tthis.episodeService.isDownloading(episode.id) ? PodcastStatus.downloading : episode.status\n\t\t);\n\t\tif (includes.trackState) {\n\t\t\tconst state = await this.stateService.findOrCreate(episode.id, user.id, DBObjectType.episode);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.EpisodeSearch, user: User): SearchQueryEpisode {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tname: query.name,\n\t\t\tpodcastID: query.podcastID,\n\t\t\tstatus: query.status,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync retrieve(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst episode = await this.byID(req.query.id);\n\t\tif (!episode.path) {\n\t\t\tthis.episodeService.downloadEpisode(episode); // do not wait\n\t\t}\n\t}\n\n\tasync stream(req: JamRequest<JamParameters.Stream>): Promise<IApiBinaryResult> {\n\t\tconst episode = await this.byID(req.query.id);\n\t\treturn await this.streamController.streamEpisode(episode, req.query.format, req.query.maxBitRate, req.user);\n\t}\n\n\tasync status(req: JamRequest<JamParameters.ID>): Promise<Jam.PodcastEpisodeStatus> {\n\t\tconst episode = await this.byID(req.query.id);\n\t\treturn {\n\t\t\tstatus: this.episodeService.isDownloading(episode.id) ? PodcastStatus.downloading : episode.status\n\t\t};\n\t}\n\n}\n","import {BaseController} from '../base/base.controller';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType, PodcastStatus} from '../../types';\nimport {JamRequest} from '../../api/jam/api';\nimport {EpisodeController} from '../episode/episode.controller';\nimport {formatPodcast} from './podcast.format';\nimport {PodcastService} from './podcast.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {SearchQueryPodcast} from './podcast.store';\nimport {Podcast} from './podcast.model';\nimport {User} from '../user/user.model';\n\nexport class PodcastController extends BaseController<JamParameters.Podcast, JamParameters.Podcasts, JamParameters.IncludesPodcast, SearchQueryPodcast, JamParameters.PodcastSearch, Podcast, Jam.Podcast> {\n\n\tconstructor(\n\t\tprivate podcastService: PodcastService,\n\t\tprivate episodeController: EpisodeController,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(podcastService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<Podcast>): Array<Podcast> {\n\t\treturn items.sort((a, b) => (a.tag && a.tag.title ? a.tag.title : a.url).localeCompare((b.tag && b.tag.title ? b.tag.title : b.url)));\n\t}\n\n\tasync prepare(podcast: Podcast, includes: JamParameters.IncludesPodcast, user: User): Promise<Jam.Podcast> {\n\t\tconst result = formatPodcast(podcast, this.podcastService.isDownloading(podcast.id) ? PodcastStatus.downloading : podcast.status);\n\t\tif (includes.podcastState) {\n\t\t\tconst state = await this.stateService.findOrCreate(podcast.id, user.id, DBObjectType.podcast);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.podcastEpisodes) {\n\t\t\tresult.episodes = await this.episodeController.prepareByQuery({podcastID: podcast.id}, includes, user);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.PodcastSearch, user: User): SearchQueryPodcast {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\turl: query.url,\n\t\t\ttitle: query.title,\n\t\t\tstatus: query.status,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.Tracks>): Promise<Array<Jam.PodcastEpisode>> {\n\t\treturn this.episodeController.prepareByQuery({podcastIDs: req.query.ids}, req.query, req.user);\n\t}\n\n\tasync refreshAll(req: JamRequest<{}>): Promise<void> {\n\t\tthis.podcastService.refreshPodcasts(); // do not wait\n\t}\n\n\tasync refresh(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst podcast = await this.byID(req.query.id);\n\t\tthis.podcastService.refresh(podcast); // do not wait\n\t}\n\n\tasync create(req: JamRequest<JamParameters.PodcastNew>): Promise<Jam.Podcast> {\n\t\tconst podcast = await this.podcastService.create(req.query.url);\n\t\treturn this.prepare(podcast, {}, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst podcast = await this.byID(req.query.id);\n\t\tawait this.podcastService.remove(podcast);\n\t}\n\n\tasync status(req: JamRequest<JamParameters.ID>): Promise<Jam.PodcastStatus> {\n\t\tconst podcast = await this.byID(req.query.id);\n\t\treturn {\n\t\t\tlastCheck: podcast.lastCheck,\n\t\t\tstatus: this.podcastService.isDownloading(podcast.id) ? PodcastStatus[PodcastStatus.downloading] : PodcastStatus[podcast.status]\n\t\t};\n\t}\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Podcast} from './podcast.model';\n\nexport function formatPodcast(podcast: Podcast, status: string ): Jam.Podcast {\n\treturn {\n\t\tid: podcast.id,\n\t\turl: podcast.url,\n\t\tcreated: podcast.created,\n\t\tlastCheck: podcast.lastCheck > 0 ? podcast.lastCheck : undefined,\n\t\tstatus: status,\n\t\terrorMessage: podcast.errorMessage,\n\t\tname: podcast.tag ? podcast.tag.title : podcast.url,\n\t\tdescription: podcast.tag ? podcast.tag.description : undefined\n\t};\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType} from '../../types';\nimport {paginate} from '../../utils/paginate';\nimport {JamRequest} from '../../api/jam/api';\nimport {BaseListController} from '../base/base.list.controller';\nimport {TrackController} from '../track/track.controller';\nimport {formatAlbum, formatAlbumInfo} from './album.format';\nimport {SearchQueryAlbum} from './album.store';\nimport {MetaDataService} from '../../engine/metadata/metadata.service';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {Album} from './album.model';\nimport {User} from '../user/user.model';\nimport {AlbumService} from './album.service';\n\nexport class AlbumController extends BaseListController<JamParameters.Album, JamParameters.Albums, JamParameters.IncludesAlbum, SearchQueryAlbum, JamParameters.AlbumSearch, Album, Jam.Album> {\n\n\tconstructor(\n\t\tprivate albumService: AlbumService,\n\t\tprivate trackController: TrackController,\n\t\tprivate metaDataService: MetaDataService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(albumService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<Album>): Array<Album> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync prepare(album: Album, includes: JamParameters.IncludesAlbum, user: User): Promise<Jam.Album> {\n\t\tconst result = formatAlbum(album, includes);\n\t\tif (includes.albumState) {\n\t\t\tresult.state = await this.stateService.findOrCreate(album.id, user.id, DBObjectType.album);\n\t\t}\n\t\tif (includes.albumInfo) {\n\t\t\tconst info = await this.metaDataService.getAlbumInfo(album);\n\t\t\tresult.info = formatAlbumInfo(info);\n\t\t}\n\t\tif (includes.albumTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(album.trackIDs, includes, user);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.AlbumSearch, user: User): SearchQueryAlbum {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tname: query.name,\n\t\t\trootID: query.rootID,\n\t\t\tartist: query.artist,\n\t\t\tartistID: query.artistID,\n\t\t\ttrackID: query.trackID,\n\t\t\tmbAlbumID: query.mbAlbumID,\n\t\t\tmbArtistID: query.mbArtistID,\n\t\t\tgenre: query.genre,\n\t\t\tnewerThan: query.newerThan,\n\t\t\tfromYear: query.fromYear,\n\t\t\ttoYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync similarTracks(req: JamRequest<JamParameters.SimilarTracks>): Promise<Array<Jam.Track>> {\n\t\tconst album = await this.byID(req.query.id);\n\t\tconst tracks = await this.metaDataService.getAlbumSimilarTracks(album);\n\t\treturn this.trackController.prepareList(paginate(tracks, req.query.amount, req.query.offset), req.query, req.user);\n\t}\n\n\tasync list(req: JamRequest<JamParameters.AlbumList>): Promise<Array<Jam.Album>> {\n\t\treturn this.getList(req.query, req.query, req.query, req.user);\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.Tracks>): Promise<Array<Jam.Track>> {\n\t\tconst albums = await this.byIDs(req.query.ids);\n\t\tlet trackIDs: Array<string> = [];\n\t\talbums.forEach(album => {\n\t\t\ttrackIDs = trackIDs.concat(album.trackIDs);\n\t\t});\n\t\treturn this.trackController.prepareListByIDs(trackIDs, req.query, req.user);\n\t}\n\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {Album} from './album.model';\nimport {MetaInfo} from '../../modules/audio/metadata.model';\n\nexport function formatAlbumInfo(info: MetaInfo): Jam.AlbumInfo {\n\treturn {\n\t\tdescription: info.album.description,\n\t\tlastFmUrl: info.album.url,\n\t\treleases: info.album.releases,\n\t\tsmallImageUrl: info.album.image && info.album.image.small ? info.album.image.small : undefined,\n\t\tmediumImageUrl: info.album.image && info.album.image.medium ? info.album.image.medium : undefined,\n\t\tlargeImageUrl: info.album.image && info.album.image.large ? info.album.image.large : undefined\n\t};\n}\n\nexport function formatAlbum(album: Album, includes: JamParameters.IncludesAlbum): Jam.Album {\n\tlet mbz: any = {\n\t\tartistID: album.mbArtistID,\n\t\talbumID: album.mbAlbumID\n\t};\n\tif (!Object.keys(mbz).find(key => !!mbz[key])) {\n\t\tmbz = undefined;\n\t}\n\treturn {\n\t\tid: album.id,\n\t\tname: album.name,\n\t\tcreated: album.created,\n\t\tartist: album.artist,\n\t\tartistID: album.artistID,\n\t\ttrackCount: album.trackIDs.length,\n\t\ttag: {\n\t\t\tgenre: album.genre,\n\t\t\tyear: album.year,\n\t\t\tduration: album.duration,\n\t\t\tcreated: album.created,\n\t\t\tmusicbrainz: mbz\n\t\t},\n\t\ttrackIDs: includes.albumTrackIDs ? album.trackIDs : undefined,\n\t};\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType} from '../../types';\nimport {paginate} from '../../utils/paginate';\nimport {JamRequest} from '../../api/jam/api';\nimport {BaseListController} from '../base/base.list.controller';\nimport {TrackController} from '../track/track.controller';\nimport {AlbumController} from '../album/album.controller';\nimport {formatArtist, formatArtistInfo} from './artist.format';\nimport {formatState} from '../state/state.format';\nimport {formatArtistIndex} from '../../engine/index/index.format';\nimport {MetaDataService} from '../../engine/metadata/metadata.service';\nimport {SearchQueryArtist} from './artist.store';\nimport {IndexService} from '../../engine/index/index.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {StateService} from '../state/state.service';\nimport {Artist} from './artist.model';\nimport {User} from '../user/user.model';\nimport {ArtistService} from './artist.service';\n\nexport class ArtistController extends BaseListController<JamParameters.Artist, JamParameters.Artists, JamParameters.IncludesArtist, SearchQueryArtist, JamParameters.ArtistSearch, Artist, Jam.Artist> {\n\n\tconstructor(\n\t\tprivate artistService: ArtistService,\n\t\tprivate trackController: TrackController,\n\t\tprivate albumController: AlbumController,\n\t\tprivate metaDataService: MetaDataService,\n\t\tprivate indexService: IndexService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(artistService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<Artist>): Array<Artist> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync prepare(artist: Artist, includes: JamParameters.IncludesArtist, user: User): Promise<Jam.Artist> {\n\t\tconst result = formatArtist(artist, includes);\n\t\tif (includes.artistState) {\n\t\t\tconst state = await this.stateService.findOrCreate(artist.id, user.id, DBObjectType.artist);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.artistInfo) {\n\t\t\tconst infos = await this.metaDataService.getArtistInfos(artist, false, !!includes.artistInfoSimilar);\n\t\t\tresult.info = formatArtistInfo(infos.info);\n\t\t\tif (includes.artistInfoSimilar) {\n\t\t\t\tconst similar: Array<Jam.Artist> = [];\n\t\t\t\t(infos.similar || []).forEach(sim => {\n\t\t\t\t\tif (sim.artist) {\n\t\t\t\t\t\tsimilar.push(formatArtist(sim.artist, includes));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresult.info.similar = similar;\n\t\t\t}\n\t\t}\n\t\tif (includes.artistTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(artist.trackIDs, includes, user);\n\t\t}\n\t\tif (includes.artistAlbums) {\n\t\t\tresult.albums = await this.albumController.prepareListByIDs(artist.albumIDs, includes, user);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.ArtistSearch, user: User): SearchQueryArtist {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tname: query.name,\n\t\t\trootID: query.rootID,\n\t\t\talbumID: query.albumID,\n\t\t\tmbArtistID: query.mbArtistID,\n\t\t\t// genre: query.genre,\n\t\t\tnewerThan: query.newerThan,\n\t\t\t// fromYear: query.fromYear,\n\t\t\t// toYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync similar(req: JamRequest<JamParameters.Artist>): Promise<Array<Jam.Artist>> {\n\t\tconst artist = await this.byID(req.query.id);\n\t\tconst artistInfo = await this.metaDataService.getArtistInfos(artist, false, true);\n\t\tconst list = (artistInfo.similar || []).filter(s => !!s.artist).map(s => <Artist>s.artist);\n\t\treturn this.prepareList(list, req.query, req.user);\n\t}\n\n\tasync similarTracks(req: JamRequest<JamParameters.SimilarTracks>): Promise<Array<Jam.Track>> {\n\t\tconst artist = await this.byID(req.query.id);\n\t\tconst tracks = await this.metaDataService.getArtistSimilarTracks(artist);\n\t\treturn this.trackController.prepareList(paginate(tracks, req.query.amount, req.query.offset), req.query, req.user);\n\t}\n\n\tasync list(req: JamRequest<JamParameters.ArtistList>): Promise<Array<Jam.Artist>> {\n\t\treturn this.getList(req.query, req.query, req.query, req.user);\n\t}\n\n\tasync index(req: JamRequest<JamParameters.Index>): Promise<Jam.ArtistIndex> {\n\t\tconst artistIndex = await this.indexService.getArtistIndex(false);\n\t\treturn formatArtistIndex(this.indexService.filterArtistIndex(req.query.rootID, artistIndex));\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.Tracks>): Promise<Array<Jam.Track>> {\n\t\tconst artists = await this.byIDs(req.query.ids);\n\t\tlet trackIDs: Array<string> = [];\n\t\tartists.forEach(artist => {\n\t\t\ttrackIDs = trackIDs.concat(artist.trackIDs);\n\t\t});\n\t\treturn this.trackController.prepareListByIDs(trackIDs, req.query, req.user);\n\t}\n\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {MetaInfo} from '../../modules/audio/metadata.model';\nimport {Artist} from './artist.model';\n\nexport function formatArtistInfo(info: MetaInfo): Jam.ArtistInfo {\n\treturn {\n\t\tdescription: info.artist.description,\n\t\tlastFmUrl: info.album.url,\n\t\tsmallImageUrl: info.album.image && info.album.image.small ? info.album.image.small : undefined,\n\t\tmediumImageUrl: info.album.image && info.album.image.medium ? info.album.image.medium : undefined,\n\t\tlargeImageUrl: info.album.image && info.album.image.large ? info.album.image.large : undefined\n\t};\n}\n\nexport function formatArtist(artist: Artist, includes: JamParameters.IncludesArtist): Jam.Artist {\n\tlet mbz: any = {\n\t\tartistID: artist.mbArtistID\n\t};\n\tif (!Object.keys(mbz).find(key => !!mbz[key])) {\n\t\tmbz = undefined;\n\t}\n\treturn {\n\t\tid: artist.id,\n\t\tname: artist.name,\n\t\talbumCount: artist.albumIDs.length,\n\t\talbumIDs: includes.artistAlbumIDs ? artist.albumIDs : undefined,\n\t\ttrackIDs: includes.artistTracksIDs ? artist.trackIDs : undefined,\n\t\ttrackCount: artist.trackIDs.length,\n\t\tcreated: artist.created,\n\t\tmusicbrainz: mbz\n\t};\n}\n","import {BaseController} from '../base/base.controller';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType} from '../../types';\nimport {UnauthError} from '../../api/jam/error';\nimport {JamRequest} from '../../api/jam/api';\nimport {TrackController} from '../track/track.controller';\nimport {formatState} from '../state/state.format';\nimport {formatPlaylist} from './playlist.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {SearchQueryPlaylist} from './playlist.store';\nimport {PlaylistService} from './playlist.service';\nimport {Playlist} from './playlist.model';\nimport {User} from '../user/user.model';\n\nexport class PlaylistController extends BaseController<JamParameters.Playlist, JamParameters.Playlists, JamParameters.IncludesPlaylist, SearchQueryPlaylist, JamParameters.PlaylistSearch, Playlist, Jam.Playlist> {\n\n\tconstructor(\n\t\tprivate playlistService: PlaylistService,\n\t\tprivate trackController: TrackController,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(playlistService, stateService, imageService, downloadService);\n\t}\n\n\t// TODO: filter none public playlist in base api functions?\n\n\tdefaultSort(items: Array<Playlist>): Array<Playlist> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync prepare(playlist: Playlist, includes: JamParameters.IncludesPlaylist, user: User): Promise<Jam.Playlist> {\n\t\tconst result = formatPlaylist(playlist, includes);\n\t\tif (includes.playlistState) {\n\t\t\tconst state = await this.stateService.findOrCreate(playlist.id, user.id, DBObjectType.artist);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.playlistTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(playlist.trackIDs, includes, user);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.PlaylistSearch, user: User): SearchQueryPlaylist {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tname: query.name,\n\t\t\tuserID: user.id,\n\t\t\tisPublic: query.isPublic,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.PlaylistNew>): Promise<Jam.Playlist> {\n\t\tconst playlist = await this.playlistService.create(req.query.name, req.query.comment, req.query.isPublic === undefined ? false : req.query.isPublic, req.user.id, req.query.trackIDs || []);\n\t\treturn this.prepare(playlist, {playlistTracksIDs: true, playlistState: true}, req.user);\n\t}\n\n\tasync update(req: JamRequest<JamParameters.PlaylistUpdate>): Promise<void> {\n\t\tconst playlist = await this.byID(req.query.id);\n\t\tif (playlist.userID !== req.user.id) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tplaylist.name = req.query.name || playlist.name;\n\t\tplaylist.comment = req.query.comment || playlist.comment;\n\t\tplaylist.isPublic = req.query.isPublic === undefined ? playlist.isPublic : req.query.isPublic;\n\t\tplaylist.changed = Date.now();\n\t\tplaylist.trackIDs = req.query.trackIDs || [];\n\t\tawait this.playlistService.update(playlist);\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.Tracks>): Promise<Array<Jam.Track>> {\n\t\tlet playlists = await this.byIDs(req.query.ids);\n\t\tplaylists = playlists.filter(playlist => playlist.userID === req.user.id);\n\t\tlet trackIDs: Array<string> = [];\n\t\tplaylists.forEach(playlist => {\n\t\t\ttrackIDs = trackIDs.concat(playlist.trackIDs);\n\t\t});\n\t\treturn this.trackController.prepareListByIDs(trackIDs, req.query, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst playlist = await this.byID(req.query.id);\n\t\tif (playlist.userID !== req.user.id) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tawait this.playlistService.remove(playlist);\n\t}\n\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {Playlist} from './playlist.model';\n\nexport function formatPlaylist(playlist: Playlist, includes: JamParameters.IncludesPlaylist): Jam.Playlist {\n\treturn {\n\t\tid: playlist.id,\n\t\tname: playlist.name,\n\t\tuserID: playlist.userID,\n\t\tcomment: playlist.comment,\n\t\tisPublic: playlist.isPublic,\n\t\tduration: playlist.duration,\n\t\tcreated: playlist.created,\n\t\tchanged: playlist.changed,\n\t\ttrackCount: playlist.trackIDs.length,\n\t\ttrackIDs: includes.playlistTracksIDs ? playlist.trackIDs : undefined\n\t};\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType} from '../../types';\nimport path from 'path';\nimport {NotFoundError} from '../../api/jam/error';\nimport {IApiBinaryResult} from '../../typings';\nimport {paginate} from '../../utils/paginate';\nimport {JamRequest} from '../../api/jam/api';\nimport {BaseListController} from '../base/base.list.controller';\nimport {formatTrack} from './track.format';\nimport {SearchQueryTrack} from './track.store';\nimport {AudioModule} from '../../modules/audio/audio.module';\nimport {BookmarkService} from '../bookmark/bookmark.service';\nimport {MetaDataService} from '../../engine/metadata/metadata.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {Track} from './track.model';\nimport {User} from '../user/user.model';\nimport {IoService} from '../../engine/io/io.service';\nimport {StreamController} from '../../engine/stream/stream.controller';\nimport {TrackService} from './track.service';\n\nexport class TrackController extends BaseListController<JamParameters.Track, JamParameters.Tracks, JamParameters.IncludesTrack, SearchQueryTrack, JamParameters.TrackSearch, Track, Jam.Track> {\n\n\tconstructor(\n\t\tprivate trackService: TrackService,\n\t\tprivate audioModule: AudioModule,\n\t\tprivate bookmarkService: BookmarkService,\n\t\tprivate metaService: MetaDataService,\n\t\tprivate streamController: StreamController,\n\t\tprivate ioService: IoService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(trackService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(tracks: Array<Track>): Array<Track> {\n\t\treturn tracks.sort((a, b) => {\n\t\t\t\tif (a.tag.track !== undefined && b.tag.track !== undefined) {\n\t\t\t\t\tconst res = a.tag.track - b.tag.track;\n\t\t\t\t\tif (res !== 0) {\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn a.name.localeCompare(b.name);\n\t\t\t}\n\t\t);\n\t}\n\n\tasync prepare(track: Track, includes: JamParameters.IncludesTrack, user: User): Promise<Jam.Track> {\n\t\tconst result = formatTrack(track, includes);\n\t\tif (includes.trackID3) {\n\t\t\tresult.tagID3 = await this.audioModule.readID3v2(path.join(track.path, track.name));\n\t\t}\n\t\tif (includes.trackState) {\n\t\t\tconst state = await this.stateService.findOrCreate(track.id, user.id, DBObjectType.track);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.TrackSearch, user: User): SearchQueryTrack {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\trootID: query.rootID,\n\t\t\tparentID: query.parentID,\n\t\t\tartist: query.artist,\n\t\t\ttitle: query.title,\n\t\t\talbum: query.album,\n\t\t\tgenre: query.genre,\n\t\t\tnewerThan: query.newerThan,\n\t\t\tfromYear: query.fromYear,\n\t\t\ttoYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\t// more track api\n\n\tasync tagID3(req: JamRequest<JamParameters.ID>): Promise<Jam.ID3Tag> {\n\t\tconst track = await this.byID(req.query.id);\n\t\treturn this.audioModule.readID3v2(path.join(track.path, track.name));\n\t}\n\n\tasync tagID3s(req: JamRequest<JamParameters.IDs>): Promise<Jam.ID3Tags> {\n\t\tlet tracks = await this.byIDs(req.query.ids);\n\t\ttracks = this.defaultSort(tracks);\n\t\tconst result: Jam.ID3Tags = {};\n\t\tfor (const track of tracks) {\n\t\t\tresult[track.id] = await this.audioModule.readID3v2(path.join(track.path, track.name));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync tagID3Update(req: JamRequest<JamParameters.TagID3Update>): Promise<void> {\n\t\tconst track = await this.byID(req.query.id);\n\t\tawait this.audioModule.saveID3v2(path.join(track.path, track.name), req.query.tag);\n\t\tthis.ioService.refreshTracks([track]); // do not wait\n\t}\n\n\tasync tagID3sUpdate(req: JamRequest<JamParameters.TagID3sUpdate>): Promise<void> {\n\t\tconst tracks = await this.byIDs(req.query.tagID3s.map(tagID3 => tagID3.id));\n\t\tconst list: Array<{ track?: Track; tag: Jam.ID3Tag }> = req.query.tagID3s.map(tagID3 => {\n\t\t\treturn {track: tracks.find(t => t.id === tagID3.id), tag: tagID3.tag};\n\t\t});\n\t\tfor (const item of list) {\n\t\t\tif (!item.track) {\n\t\t\t\treturn Promise.reject(NotFoundError());\n\t\t\t}\n\t\t\tawait this.audioModule.saveID3v2(path.join(item.track.path, item.track.name), item.tag);\n\t\t}\n\t\tthis.ioService.refreshTracks(tracks); // do not wait\n\t}\n\n\tasync stream(req: JamRequest<JamParameters.Stream>): Promise<IApiBinaryResult> {\n\t\tconst track = await this.byID(req.query.id);\n\t\treturn await this.streamController.streamTrack(track, req.query.format, req.query.maxBitRate, req.user);\n\t}\n\n\tasync similar(req: JamRequest<JamParameters.SimilarTracks>): Promise<Array<Jam.Track>> {\n\t\tconst track = await this.byID(req.query.id);\n\t\tconst tracks = await this.metaService.getTrackSimilarTracks(track);\n\t\treturn this.prepareList(paginate(tracks, req.query.amount, req.query.offset), req.query, req.user);\n\t}\n\n\tasync list(req: JamRequest<JamParameters.TrackList>): Promise<Array<Jam.Track>> {\n\t\treturn this.getList(req.query, req.query, req.query, req.user);\n\t}\n\n}\n","import path from 'path';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType, FolderType} from '../../types';\nimport {getFolderProblems} from '../../engine/io/components/health';\nimport {InvalidParamError} from '../../api/jam/error';\nimport {paginate} from '../../utils/paginate';\nimport {JamRequest} from '../../api/jam/api';\nimport {BaseListController} from '../base/base.list.controller';\nimport {TrackController} from '../track/track.controller';\nimport {formatAlbumFolderInfo, formatArtistFolderInfo, formatFolder} from './folder.format';\nimport {formatState} from '../state/state.format';\nimport {formatFolderIndex} from '../../engine/index/index.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {SearchQueryFolder} from './folder.store';\nimport {SearchQueryTrack} from '../track/track.store';\nimport {MetaDataService} from '../../engine/metadata/metadata.service';\nimport {IndexService} from '../../engine/index/index.service';\nimport {Folder} from './folder.model';\nimport {User} from '../user/user.model';\nimport {FolderService} from './folder.service';\n\nexport class FolderController extends BaseListController<JamParameters.Folder, JamParameters.Folders, JamParameters.IncludesFolderChildren, SearchQueryFolder, JamParameters.FolderSearch, Folder, Jam.Folder> {\n\n\tconstructor(\n\t\tprotected folderService: FolderService,\n\t\tprivate trackController: TrackController,\n\t\tprivate metadataService: MetaDataService,\n\t\tprivate indexService: IndexService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(folderService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<Folder>): Array<Folder> {\n\t\treturn items.sort((a, b) => (a.tag && a.tag.title ? a.tag.title : path.basename(a.path)).localeCompare((b.tag && b.tag.title ? b.tag.title : path.basename(b.path))));\n\t}\n\n\tasync prepare(folder: Folder, includes: JamParameters.IncludesFolderChildren, user: User): Promise<Jam.Folder> {\n\t\tconst result = formatFolder(folder, includes);\n\t\tif (includes.folderChildren || includes.folderTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareByQuery({parentID: folder.id}, includes, user);\n\t\t}\n\t\tif (includes.folderChildren || includes.folderSubfolders) {\n\t\t\tconst folders = await this.folderService.folderStore.search({parentID: folder.id, sorts: [{field: 'name', descending: false}]});\n\t\t\t// TODO: introduce children includes?\n\t\t\tresult.folders = await this.prepareList(folders, {folderState: includes.folderState, folderHealth: includes.folderHealth, folderTag: includes.folderTag}, user);\n\t\t}\n\t\tif (includes.folderState) {\n\t\t\tconst state = await this.stateService.findOrCreate(folder.id, user.id, DBObjectType.folder);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\tif (includes.folderInfo) {\n\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\tconst infos = await this.metadataService.getFolderArtistInfo(folder, false, !!includes.folderInfoSimilar);\n\t\t\t\tresult.artistInfo = formatArtistFolderInfo(infos.info);\n\t\t\t\tif (includes.folderInfoSimilar) {\n\t\t\t\t\tconst similar: Array<Jam.Folder> = [];\n\t\t\t\t\t(infos.similar || []).forEach(sim => {\n\t\t\t\t\t\tif (sim.folder) {\n\t\t\t\t\t\t\tsimilar.push(formatFolder(sim.folder, includes));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresult.artistInfo.similar = similar;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst info = await this.metadataService.getFolderInfo(folder);\n\t\t\t\tresult.albumInfo = formatAlbumFolderInfo(info);\n\t\t\t}\n\t\t}\n\t\tif (includes.folderHealth) {\n\t\t\tconst problems = await getFolderProblems(folder);\n\t\t\tresult.health = {problems};\n\t\t}\n\t\tif (includes.folderParents) {\n\t\t\tconst parents = await this.folderService.collectFolderPath(folder.parentID);\n\t\t\tresult.parents = parents.map(parent => {\n\t\t\t\treturn {\n\t\t\t\t\tid: parent.id,\n\t\t\t\t\tname: path.basename(parent.path)\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.FolderSearch, user: User): SearchQueryFolder {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\trootID: query.rootID,\n\t\t\tparentID: query.parentID,\n\t\t\tartist: query.artist,\n\t\t\ttitle: query.title,\n\t\t\talbum: query.album,\n\t\t\tgenre: query.genre,\n\t\t\tnewerThan: query.newerThan,\n\t\t\tfromYear: query.fromYear,\n\t\t\ttoYear: query.toYear,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\ttypes: query.type ? [query.type] : undefined,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\t/* more folder api */\n\n\tasync subfolders(req: JamRequest<JamParameters.FolderSubFolders>): Promise<Array<Jam.Folder>> {\n\t\tconst list = await this.folderService.folderStore.search({parentID: req.query.id});\n\t\treturn this.prepareList(list, req.query, req.user);\n\t}\n\n\tasync tracks(req: JamRequest<JamParameters.FolderTracks>): Promise<Array<Jam.Track>> {\n\t\tconst folders = await this.byIDs(req.query.ids);\n\t\tconst trackQuery: SearchQueryTrack = req.query.recursive ? {inPaths: folders.map(folder => folder.path)} : {parentIDs: folders.map(folder => folder.id)};\n\t\treturn this.trackController.prepareByQuery(trackQuery, req.query, req.user);\n\t}\n\n\tasync children(req: JamRequest<JamParameters.FolderChildren>): Promise<Jam.FolderChildren> {\n\t\tconst folders = await this.folderService.folderStore.search({parentID: req.query.id});\n\t\tconst resultTracks = await this.trackController.prepareByQuery({parentID: req.query.id}, req.query, req.user);\n\t\tconst resultFolders = await this.prepareList(folders, req.query, req.user);\n\t\treturn {folders: resultFolders, tracks: resultTracks};\n\t}\n\n\tasync imageUrlUpdate(req: JamRequest<JamParameters.FolderEditImg>): Promise<void> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tawait this.folderService.downloadFolderImage(folder, req.query.url);\n\t}\n\n\tasync imageUploadUpdate(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tif (!req.file) {\n\t\t\treturn Promise.reject(InvalidParamError('Image upload failed'));\n\t\t}\n\t\tconst folder = await this.byID(req.query.id);\n\t\tawait this.folderService.setFolderImage(folder, req.file);\n\t}\n\n\tasync nameUpdate(req: JamRequest<JamParameters.FolderEditName>): Promise<void> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tawait this.folderService.renameFolder(folder, req.query.name);\n\t}\n\n\tasync artistInfo(req: JamRequest<JamParameters.ArtistInfo>): Promise<Jam.ArtistFolderInfo> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tconst artistInfo = await this.metadataService.getFolderArtistInfo(folder, false, req.query.similar);\n\t\tconst result = formatArtistFolderInfo(artistInfo.info);\n\t\tif (req.query.similar) {\n\t\t\tconst list = (artistInfo.similar || []).filter(s => !!s.folder).map(s => <Folder>s.folder);\n\t\t\tresult.similar = await this.prepareList(list, {}, req.user);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync artistSimilar(req: JamRequest<JamParameters.Folder>): Promise<Array<Jam.Folder>> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tconst artistInfo = await this.metadataService.getFolderArtistInfo(folder, false, true);\n\t\tconst list = (artistInfo.similar || []).filter(s => !!s.folder).map(s => <Folder>s.folder);\n\t\treturn this.prepareList(list, req.query, req.user);\n\t}\n\n\tasync albumInfo(req: JamRequest<JamParameters.AlbumInfo>): Promise<Jam.AlbumFolderInfo> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tconst info = await this.metadataService.getFolderInfo(folder);\n\t\treturn formatAlbumFolderInfo(info);\n\t}\n\n\tasync artistSimilarTracks(req: JamRequest<JamParameters.SimilarTracks>): Promise<Array<Jam.Track>> {\n\t\tconst folder = await this.byID(req.query.id);\n\t\tconst tracks = await this.metadataService.getFolderSimilarTracks(folder);\n\t\treturn this.trackController.prepareList(paginate(tracks, req.query.amount, req.query.offset), req.query, req.user);\n\t}\n\n\tasync list(req: JamRequest<JamParameters.FolderList>): Promise<Array<Jam.Folder>> {\n\t\treturn this.getList(req.query, req.query, req.query, req.user);\n\t}\n\n\tasync index(req: JamRequest<JamParameters.Index>): Promise<Jam.FolderIndex> {\n\t\tconst folderIndex = await this.indexService.getFolderIndex(false);\n\t\treturn formatFolderIndex(this.indexService.filterFolderIndex(req.query.rootID, folderIndex));\n\t}\n\n}\n","import path from 'path';\nimport {FolderType} from '../../../types';\nimport {Jam} from '../../../model/jam-rest-data';\nimport {replaceFileSystemChars} from '../../../utils/fs-utils';\nimport {Folder, FolderTag} from '../../../objects/folder/folder.model';\n\ninterface ProblemCheck {\n\tname: string;\n\tcheck: (folder: Folder) => Promise<boolean>;\n}\n\n\nfunction getNiceFolderName(tag: FolderTag): string {\n\tconst year = tag.year ? tag.year.toString() : '';\n\tconst s = (year.length > 0 ? '[' + year + '] ' : '') + replaceFileSystemChars(tag.album || '', '_');\n\treturn s.trim();\n}\n\nconst ProblemDefs: { [id: string]: ProblemCheck; } = {\n\tFOLDER_TAG_MISSING: {\n\t\tname: 'Missing TAG',\n\t\tcheck: async (folder) => {\n\t\t\treturn !folder.tag;\n\t\t}\n\t},\n\tFOLDER_TAG_VALUES_MISSING: {\n\t\tname: 'Missing Tag Values (album, artist, year)',\n\t\tcheck: async (folder) => {\n\t\t\treturn folder.tag &&\n\t\t\t\t(\n\t\t\t\t\t(folder.tag.type === FolderType.album) ||\n\t\t\t\t\t(folder.tag.type === FolderType.multialbum)\n\t\t\t\t) &&\n\t\t\t\t(\n\t\t\t\t\t(!folder.tag.album) || (!folder.tag.artist) || (!folder.tag.year)\n\t\t\t\t);\n\t\t}\n\t},\n\tALBUM_IMAGE_MISSING: {\n\t\tname: 'Missing album image',\n\t\tcheck: async (folder) => {\n\t\t\treturn !!folder.tag &&\n\t\t\t\t((folder.tag.type === FolderType.album) || (folder.tag.type === FolderType.multialbum))\n\t\t\t\t&& !folder.tag.image;\n\t\t}\n\t},\n\tALBUM_IMAGE_NAME_NONCONFORM: {\n\t\tname: 'Album Image Name is not cover.[ext]',\n\t\tcheck: async (folder) => {\n\t\t\treturn !!folder.tag &&\n\t\t\t\t(\n\t\t\t\t\t(folder.tag.type === FolderType.album) ||\n\t\t\t\t\t(folder.tag.type === FolderType.multialbum)\n\t\t\t\t)\n\t\t\t\t&& !!folder.tag.image &&\n\t\t\t\tfolder.tag.image.indexOf('cover.') !== 0;\n\t\t}\n\n\t},\n\tALBUM_NAME_NONCONFORM: {\n\t\tname: 'Album folder name is not \"[Year] Album-Name\"',\n\t\tcheck: async (folder) => {\n\t\t\tif (folder.tag && (folder.tag.type === FolderType.album) &&\n\t\t\t\t(folder.tag.album) && (folder.tag.year) && (folder.tag.year > 0)) {\n\t\t\t\tconst name = path.basename(folder.path).trim().replace(/[_:!?\\/ ]/g, '').toLowerCase();\n\t\t\t\tconst nicename = getNiceFolderName(folder.tag).replace(/[_:!?\\/ ]/g, '').toLowerCase();\n\t\t\t\treturn name.localeCompare(nicename) !== 0;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t},\n\tALBUM_GENRE_MISSING: {\n\t\tname: 'Album genre is missing',\n\t\tcheck: async (folder) => {\n\t\t\treturn (folder.tag && (!folder.tag.genre || folder.tag.genre.length === 0));\n\t\t}\n\n\t},\n\tALBUM_ID_MISSING: {\n\t\tname: 'Missing musicbrainz album id',\n\t\tcheck: async (folder) => {\n\t\t\treturn folder.tag && (\n\t\t\t\t(folder.tag.type === FolderType.album) ||\n\t\t\t\t(folder.tag.type === FolderType.multialbum)\n\t\t\t) && !folder.tag.mbAlbumID;\n\t\t}\n\t},\n\tARTIST_IMAGE_NAME_NONCONFORM: {\n\t\tname: 'Artist Image Name is not artist.[ext]',\n\t\tcheck: async (folder) => {\n\t\t\treturn (!!folder.tag) &&\n\t\t\t\t(\n\t\t\t\t\t(folder.tag.type === FolderType.artist) ||\n\t\t\t\t\t(folder.tag.type === FolderType.multiartist)\n\t\t\t\t) && (!!folder.tag.image) && folder.tag.image.indexOf('artist.') !== 0;\n\t\t}\n\n\t},\n\tARTIST_IMAGE_MISSING: {\n\t\tname: 'Missing artist image',\n\t\tcheck: async (folder) => {\n\t\t\treturn !!folder.tag && (\n\t\t\t\t\t(folder.tag.type === FolderType.artist) ||\n\t\t\t\t\t(folder.tag.type === FolderType.multiartist)\n\t\t\t\t)\n\t\t\t\t&& !folder.tag.image;\n\t\t}\n\t}\n};\n\nexport async function getFolderProblems(node: Folder): Promise<Array<Jam.FolderProblem>> {\n\tconst probs: Array<Jam.FolderProblem> = [];\n\tconst keys = Object.keys(ProblemDefs);\n\tfor (const key of keys) {\n\t\tif (ProblemDefs[key].check) {\n\t\t\tconst match = await ProblemDefs[key].check(node);\n\t\t\tif (match) {\n\t\t\t\tprobs.push({id: key, name: ProblemDefs[key].name});\n\t\t\t}\n\t\t}\n\t}\n\treturn probs;\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport path from 'path';\nimport {FolderType} from '../../types';\nimport {MetaInfo} from '../../modules/audio/metadata.model';\nimport {Folder} from './folder.model';\n\nexport function formatArtistFolderInfo(info: MetaInfo): Jam.ArtistFolderInfo {\n\treturn {\n\t\tdescription: info.artist.description,\n\t\tlastFmUrl: info.album.url,\n\t\tsmallImageUrl: info.album.image && info.album.image.small ? info.album.image.small : undefined,\n\t\tmediumImageUrl: info.album.image && info.album.image.medium ? info.album.image.medium : undefined,\n\t\tlargeImageUrl: info.album.image && info.album.image.large ? info.album.image.large : undefined\n\t};\n}\n\nexport function formatAlbumFolderInfo(info: MetaInfo): Jam.AlbumFolderInfo {\n\treturn {\n\t\tdescription: info.album.description,\n\t\tlastFmUrl: info.album.url,\n\t\treleases: info.album.releases,\n\t\tsmallImageUrl: info.album.image && info.album.image.small ? info.album.image.small : undefined,\n\t\tmediumImageUrl: info.album.image && info.album.image.medium ? info.album.image.medium : undefined,\n\t\tlargeImageUrl: info.album.image && info.album.image.large ? info.album.image.large : undefined\n\t};\n}\n\nfunction formatFolderTag(folder: Folder): Jam.FolderTag {\n\tlet mbz: any = {\n\t\tartistID: folder.tag.mbArtistID,\n\t\talbumID: folder.tag.mbAlbumID\n\t};\n\tif (!Object.keys(mbz).find(key => !!mbz[key])) {\n\t\tmbz = undefined;\n\t}\n\treturn {\n\t\tartist: folder.tag.artist,\n\t\talbum: folder.tag.album,\n\t\tgenre: folder.tag.genre,\n\t\tyear: folder.tag.year,\n\t\tmusicbrainz: mbz\n\t};\n}\n\nexport function formatFolder(folder: Folder, includes: JamParameters.IncludesFolder): Jam.Folder {\n\tincludes = includes || {};\n\treturn {\n\t\tid: folder.id,\n\t\tparentID: folder.parentID,\n\t\tname: path.basename(folder.path),\n\t\tcreated: folder.stat.created,\n\t\ttype: <Jam.FolderType>(folder.tag && (folder.tag.type !== undefined) ? (FolderType[folder.tag.type] || 'unknown') : 'unknown'),\n\t\ttag: includes.folderTag ? formatFolderTag(folder) : undefined\n\t};\n}\n","import {BaseController} from '../base/base.controller';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType} from '../../types';\nimport {JamRequest} from '../../api/jam/api';\nimport {SearchQueryRoot} from './root.store';\nimport {RootService} from './root.service';\nimport {formatRoot} from './root.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {Root} from './root.model';\nimport {User} from '../user/user.model';\nimport {IoService} from '../../engine/io/io.service';\n\nexport class RootController extends BaseController<JamParameters.ID, JamParameters.IDs, {}, SearchQueryRoot, JamParameters.RootSearch, Root, Jam.Root> {\n\n\tconstructor(\n\t\tprivate rootService: RootService,\n\t\tprivate ioService: IoService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(rootService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<Root>): Array<Root> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync prepare(root: Root, includes: {}, user: User): Promise<Jam.Root> {\n\t\treturn formatRoot(root, this.ioService.getRootStatus(root.id));\n\t}\n\n\ttranslateQuery(query: JamParameters.RootSearch, user: User): SearchQueryRoot {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.RootNew>): Promise<Jam.Root> {\n\t\tconst root: Root = {\n\t\t\tid: '',\n\t\t\tcreated: Date.now(),\n\t\t\ttype: DBObjectType.root,\n\t\t\tname: req.query.name,\n\t\t\tpath: req.query.path\n\t\t};\n\t\troot.id = await this.rootService.create(root);\n\t\treturn this.prepare(root, {}, req.user);\n\t}\n\n\tasync update(req: JamRequest<JamParameters.RootUpdate>): Promise<Jam.Root> {\n\t\tconst root = await this.byID(req.query.id);\n\t\troot.name = req.query.name;\n\t\troot.path = req.query.path;\n\t\tawait this.rootService.update(root);\n\t\treturn this.prepare(root, {}, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst root = await this.byID(req.query.id);\n\t\tawait this.rootService.remove(root);\n\t\tawait this.ioService.cleanStore();\n\t}\n\n\tasync scanAll(req: JamRequest<{}>): Promise<void> {\n\t\tthis.ioService.refresh(); // do not wait\n\t}\n\n\tasync scan(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst root = await this.byID(req.query.id);\n\t\tthis.ioService.refreshRoot(root); // do not wait\n\t}\n\n\tasync status(req: JamRequest<JamParameters.ID>): Promise<Jam.RootStatus> {\n\t\tconst root = await this.byID(req.query.id);\n\t\treturn this.ioService.getRootStatus(root.id);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Root, RootStatus} from './root.model';\n\nexport function formatRoot(root: Root, rootState: RootStatus): Jam.Root {\n\treturn {\n\t\tid: root.id,\n\t\tname: root.name,\n\t\tcreated: root.created,\n\t\tpath: root.path,\n\t\tstatus: rootState\n\t};\n}\n","import {BaseController} from '../base/base.controller';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType} from '../../types';\nimport {GenericError, InvalidParamError, UnauthError} from '../../api/jam/error';\nimport {JamRequest} from '../../api/jam/api';\nimport {formatUser} from './user.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {SearchQueryUser} from './user.store';\nimport {UserService} from './user.service';\nimport {User} from './user.model';\n\nexport class UserController extends BaseController<JamParameters.ID, JamParameters.IDs, {}, SearchQueryUser, JamParameters.UserSearch, User, Jam.User> {\n\n\tconstructor(\n\t\tprivate userService: UserService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(userService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<User>): Array<User> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync prepare(item: User, includes: {}, user: User): Promise<Jam.User> {\n\t\treturn formatUser(item);\n\t}\n\n\ttranslateQuery(query: JamParameters.UserSearch, user: User): SearchQueryUser {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tname: query.name,\n\t\t\tisAdmin: query.isAdmin,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.UserNew>): Promise<Jam.User> {\n\t\tconst u: User = {\n\t\t\tid: '',\n\t\t\tname: req.query.name || '',\n\t\t\tpass: '',\n\t\t\temail: '',\n\t\t\ttype: DBObjectType.user,\n\t\t\tcreated: Date.now(),\n\t\t\t// ldapAuthenticated: false,\n\t\t\tscrobblingEnabled: false,\n\t\t\troles: {\n\t\t\t\tadminRole: req.query.roleAdmin !== undefined ? req.query.roleAdmin : false,\n\t\t\t\tstreamRole: req.query.roleStream !== undefined ? req.query.roleStream : true,\n\t\t\t\tuploadRole: req.query.roleUpload !== undefined ? req.query.roleUpload : false,\n\t\t\t\tpodcastRole: req.query.rolePodcast !== undefined ? req.query.rolePodcast : false,\n\t\t\t\t// settingsRole: false,\n\t\t\t\t// jukeboxRole: false,\n\t\t\t\t// downloadRole: false,\n\t\t\t\t// playlistRole: false,\n\t\t\t\t// coverArtRole: false,\n\t\t\t\t// commentRole: false,\n\t\t\t\t// shareRole: false,\n\t\t\t\t// videoConversionRole: false\n\t\t\t}\n\t\t};\n\t\tu.id = await this.userService.create(u);\n\t\treturn this.prepare(u, {}, req.user);\n\t}\n\n\n\tasync update(req: JamRequest<JamParameters.UserUpdate>): Promise<Jam.User> {\n\t\tconst u = await this.byID(req.query.id);\n\t\tif (req.query.name) {\n\t\t\tif (req.query.name !== u.name) {\n\t\t\t\tconst u2 = await this.userService.getByName(req.query.name);\n\t\t\t\tif (u2) {\n\t\t\t\t\treturn Promise.reject(GenericError('Username already exists'));\n\t\t\t\t}\n\t\t\t}\n\t\t\tu.name = req.query.name.trim();\n\t\t}\n\t\tif (req.query.email) {\n\t\t\tu.email = req.query.email.trim();\n\t\t}\n\t\tif (req.query.roleAdmin !== undefined) {\n\t\t\tu.roles.adminRole = req.query.roleAdmin;\n\t\t}\n\t\tif (req.query.rolePodcast !== undefined) {\n\t\t\tu.roles.podcastRole = req.query.rolePodcast;\n\t\t}\n\t\tif (req.query.roleStream !== undefined) {\n\t\t\tu.roles.streamRole = req.query.roleStream;\n\t\t}\n\t\tif (req.query.roleUpload !== undefined) {\n\t\t\tu.roles.uploadRole = req.query.roleUpload;\n\t\t}\n\t\tawait this.userService.update(u);\n\t\treturn this.prepare(u, {}, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst u = await this.byID(req.query.id);\n\t\tawait this.userService.remove(u);\n\t}\n\n\tasync imageUploadUpdate(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tif (!req.file) {\n\t\t\treturn Promise.reject(InvalidParamError('Image upload failed'));\n\t\t}\n\t\tconst u = await this.byID(req.query.id);\n\t\tif (u.id !== req.user.id && !req.user.roles.adminRole) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tawait this.userService.setUserImage(u, req.file);\n\t}\n\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {NotFoundError, UnauthError} from '../../api/jam/error';\nimport {JamRequest} from '../../api/jam/api';\nimport {formatChatMessage} from './chat.format';\nimport {ChatService} from './chat.service';\n\nexport class ChatController {\n\n\tconstructor(private chatService: ChatService) {\n\t}\n\n\tasync list(req: JamRequest<JamParameters.Chat>): Promise<Array<Jam.ChatMessage>> {\n\t\tconst messages = await this.chatService.get(req.query.since);\n\t\treturn messages.map(msg => formatChatMessage(msg));\n\t}\n\n\tasync create(req: JamRequest<JamParameters.ChatNew>): Promise<void> {\n\t\tawait this.chatService.add(req.query.message, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ChatDelete>): Promise<void> {\n\t\tconst message = await this.chatService.find(req.query.time);\n\t\tif (!message) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\tif (message.userID !== req.user.id) {\n\t\t\treturn Promise.reject(UnauthError());\n\t\t}\n\t\tawait this.chatService.remove(message);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {ChatMessage} from './chat.model';\n\nexport function formatChatMessage(message: ChatMessage): Jam.ChatMessage {\n\treturn {\n\t\tusername: message.username,\n\t\tuserID: message.userID,\n\t\ttime: message.time,\n\t\tmessage: message.message\n\t};\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {MusicBrainz} from '../../model/musicbrainz-rest-data';\nimport {Acoustid} from '../../model/acoustid-rest-data';\nimport path from 'path';\nimport {LastFM} from '../../model/lastfm-rest-data';\nimport {JamRequest} from '../../api/jam/api';\nimport {TrackController} from '../../objects/track/track.controller';\nimport {AudioModule} from '../../modules/audio/audio.module';\n\nexport class MetadataController {\n\tprivate cache: { [key: string]: any } = {};\n\n\tconstructor(private audioModule: AudioModule, private trackController: TrackController) {\n\t}\n\n\tasync brainzSearch(req: JamRequest<JamParameters.BrainzSearch>): Promise<MusicBrainz.Response> {\n\t\tconst query = Object.assign({}, req.query);\n\t\tdelete query.type;\n\t\tconst key = 'search-' + req.query.type + JSON.stringify(query);\n\t\tif (this.cache[key]) {\n\t\t\tconsole.log('serving from cache search');\n\t\t\treturn this.cache[key];\n\t\t}\n\t\tconst brainz = await this.audioModule.musicbrainzSearch(req.query.type, query);\n\t\tthis.cache[key] = brainz;\n\t\treturn brainz;\n\t}\n\n\tasync acoustidLookup(req: JamRequest<JamParameters.AcoustidLookup>): Promise<Array<Acoustid.Result>> {\n\t\tconst key = 'acoustid-' + req.query.id + req.query.inc;\n\t\tif (this.cache[key]) {\n\t\t\tconsole.log('serving from cache acoustid');\n\t\t\treturn this.cache[key];\n\t\t}\n\t\tconst track = await this.trackController.byID(req.query.id);\n\t\tconst acoustid = await this.audioModule.acoustidLookup(path.join(track.path, track.name), req.query.inc);\n\t\tthis.cache[key] = acoustid;\n\t\treturn acoustid;\n\t}\n\n\tasync lastfmLookup(req: JamRequest<JamParameters.LastFMLookup>): Promise<LastFM.Result> {\n\t\tconst key = 'lastfm-' + req.query.type + req.query.id;\n\t\tif (this.cache[key]) {\n\t\t\tconsole.log('serving from cache lastfm');\n\t\t\treturn this.cache[key];\n\t\t}\n\t\tconst lastfm = await this.audioModule.lastFMLookup(req.query.type, req.query.id);\n\t\tthis.cache[key] = lastfm;\n\t\treturn lastfm;\n\t}\n\n\tasync brainzLookup(req: JamRequest<JamParameters.BrainzLookup>): Promise<MusicBrainz.Response> {\n\t\tconst key = 'lookup-' + req.query.type + req.query.id + req.query.inc;\n\t\tif (this.cache[key]) {\n\t\t\tconsole.log('serving from cache lookup');\n\t\t\treturn this.cache[key];\n\t\t}\n\t\tconst brainz = await this.audioModule.musicbrainzLookup(req.query.type, req.query.id, req.query.inc);\n\t\tthis.cache[key] = brainz;\n\t\treturn brainz;\n\t}\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {IApiBinaryResult} from '../../typings';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {JamRequest} from '../../api/jam/api';\nimport {StreamService} from './stream.service';\nimport {Store} from '../store/store';\nimport {NowPlayingService} from '../nowplaying/nowplaying.service';\nimport {DBObject} from '../../objects/base/base.model';\nimport {User} from '../../objects/user/user.model';\nimport {DBObjectType} from '../../types';\nimport {Track} from '../../objects/track/track.model';\nimport {Episode} from '../../objects/episode/episode.model';\n\nexport class StreamController {\n\n\tconstructor(private streamService: StreamService, private nowPlayingService: NowPlayingService, private store: Store) {\n\n\t}\n\n\tasync streamTrack(track: Track, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<IApiBinaryResult> {\n\t\tconst result = await this.streamService.streamTrack(track, format, maxBitRate, user);\n\t\tthis.nowPlayingService.reportTrack(track, user); // do not wait\n\t\treturn result;\n\t}\n\n\tasync streamEpisode(episode: Episode, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<IApiBinaryResult> {\n\t\tconst result = await this.streamService.streamEpisode(episode, format, maxBitRate, user);\n\t\tthis.nowPlayingService.reportEpisode(episode, user); // do not wait\n\t\treturn result;\n\t}\n\n\tprivate async streamDBObject(o: DBObject, format: string | undefined, maxBitRate: number | undefined, user: User): Promise<IApiBinaryResult> {\n\t\tswitch (o.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\treturn this.streamTrack(<Track>o, format, maxBitRate, user);\n\t\t\tcase DBObjectType.episode:\n\t\t\t\treturn this.streamEpisode(<Episode>o, format, maxBitRate, user);\n\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Object Type for Streaming'));\n\t}\n\n\tasync stream(req: JamRequest<JamParameters.PathStream>): Promise<IApiBinaryResult> {\n\t\tconst id = req.query.id;\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInAll(id);\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\tconst result = await this.streamDBObject(obj, req.query.format, undefined, req.user);\n\t\tif (!result) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn result;\n\t}\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamRequest} from '../../api/jam/api';\nimport {formatGenre} from './genre.format';\nimport {GenreService} from './genre.service';\n\nexport class GenreController {\n\n\tconstructor(private genreService: GenreService) {\n\n\t}\n\n\tasync list(req: JamRequest<JamParameters.Genres>): Promise<Array<Jam.Genre>> {\n\t\tconst genres = await this.genreService.getGenres(req.query.rootID);\n\t\treturn genres.map(genre => formatGenre(genre));\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Genre} from './genre.model';\n\nexport function formatGenre(genre: Genre): Jam.Genre {\n\treturn {\n\t\tname: genre.name,\n\t\ttrackCount: genre.trackCount,\n\t\talbumCount: genre.albumCount,\n\t\tartistCount: genre.artistCount\n\t};\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {JamRequest} from '../../api/jam/api';\nimport {NowPlayingService} from './nowplaying.service';\nimport {packNowPlaying} from './nowplaying.format';\n\nexport class NowPlayingController {\n\n\tconstructor(private nowplayingService: NowPlayingService) {\n\n\t}\n\n\tasync list(req: JamRequest<{}>): Promise<Array<Jam.NowPlaying>> {\n\t\tconst list = await this.nowplayingService.getNowPlaying();\n\t\treturn list.map(entry => packNowPlaying(entry));\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport moment from 'moment';\nimport {DBObjectType} from '../../types';\nimport {formatTrack} from '../../objects/track/track.format';\nimport {formatEpisode} from '../../objects/episode/episode.format';\nimport {NowPlaying} from './nowplaying.model';\nimport {Track} from '../../objects/track/track.model';\nimport {Episode} from '../../objects/episode/episode.model';\n\nexport function packNowPlaying(entry: NowPlaying): Jam.NowPlaying {\n\tconst playing: Jam.NowPlaying = {\n\t\tusername: entry.user.name,\n\t\tminutesAgo: Math.round(moment.duration(moment().diff(moment(entry.time))).asMinutes())\n\t};\n\tswitch (entry.obj.type) {\n\t\tcase DBObjectType.track:\n\t\t\tplaying.track = formatTrack(<Track>entry.obj, {});\n\t\t\tbreak;\n\t\tcase DBObjectType.episode:\n\t\t\tconst episode = <Episode>entry.obj;\n\t\t\tplaying.track = formatEpisode(episode, {}, episode.status);\n\t\t\tbreak;\n\t}\n\treturn playing;\n}\n\n","import {JamRequest} from '../../api/jam/api';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {IApiBinaryResult} from '../../typings';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {ImageService} from './image.service';\nimport {Store} from '../store/store';\n\nexport class ImageController {\n\tconstructor(\n\t\tprivate store: Store,\n\t\tprivate imageService: ImageService\n\t) {\n\t}\n\n\tasync image(req: JamRequest<JamParameters.Image>): Promise<IApiBinaryResult> {\n\t\tconst id = req.query.id;\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInAll(id);\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\tconst result = await this.imageService.getObjImage(obj, req.query.size, req.query.format);\n\t\tif (!result) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn result;\n\t}\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {IApiBinaryResult} from '../../typings';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {JamRequest} from '../../api/jam/api';\nimport {DownloadService} from './download.service';\nimport {Store} from '../store/store';\n\nexport class DownloadController {\n\n\tconstructor(\n\t\tprivate store: Store,\n\t\tprivate downloadService: DownloadService\n\t) {\n\t}\n\n\tasync download(req: JamRequest<JamParameters.Download>): Promise<IApiBinaryResult> {\n\t\tconst id = req.query.id;\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInAll(id);\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\tconst result = await this.downloadService.getObjDownload(obj, req.query.format, req.user);\n\t\tif (!result) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\treturn result;\n\t}\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {IApiBinaryResult} from '../../typings';\nimport {InvalidParamError, NotFoundError} from '../../api/jam/error';\nimport {JamRequest} from '../../api/jam/api';\nimport {Store} from '../store/store';\nimport {WaveformService} from './waveform.service';\nimport {DBObjectType} from '../../types';\nimport {Track} from '../../objects/track/track.model';\nimport {Episode} from '../../objects/episode/episode.model';\nimport WaveformFormatType = JamParameters.WaveformFormatType;\n\nexport class WaveformController {\n\tconstructor(private store: Store, private waveformService: WaveformService) {\n\n\t}\n\n\tasync waveform(req: JamRequest<JamParameters.Waveform>): Promise<IApiBinaryResult> {\n\t\tconst id = req.query.id;\n\t\tif (!id || id.length === 0) {\n\t\t\treturn Promise.reject(InvalidParamError());\n\t\t}\n\t\tconst obj = await this.store.findInAll(id);\n\t\tif (!obj) {\n\t\t\treturn Promise.reject(NotFoundError());\n\t\t}\n\t\tconst format = req.query.format || <WaveformFormatType>'svg';\n\t\tswitch (obj.type) {\n\t\t\tcase DBObjectType.track:\n\t\t\t\treturn await this.waveformService.getTrackWaveform(<Track>obj, format);\n\t\t\tcase DBObjectType.episode:\n\t\t\t\treturn await this.waveformService.getEpisodeWaveform(<Episode>obj, format);\n\t\t}\n\t\treturn Promise.reject(Error('Invalid Object Type for Waveform generation'));\n\t}\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {Store} from '../store/store';\nimport {JamRequest} from '../../api/jam/api';\n\nexport class AutocompleteController {\n\n\tconstructor(private store: Store) {\n\n\t}\n\n\tasync autocomplete(req: JamRequest<JamParameters.AutoComplete>): Promise<Jam.AutoComplete> {\n\t\treturn await this.autocompleteQuery(req.query);\n\t}\n\n\tasync autocompleteQuery(query: JamParameters.AutoComplete): Promise<Jam.AutoComplete> {\n\t\tconst result: Jam.AutoComplete = {};\n\t\tif (query.track !== undefined && query.track > 0) {\n\t\t\tconst list = await this.store.trackStore.search({query: query.query, amount: query.track});\n\t\t\tresult.tracks = list.map(o => {\n\t\t\t\treturn {id: o.id, name: o.tag.title || ''};\n\t\t\t});\n\t\t}\n\t\tif (query.album !== undefined && query.album > 0) {\n\t\t\tconst list = await this.store.albumStore.search({query: query.query, amount: query.album});\n\t\t\tresult.albums = list.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.artist !== undefined && query.artist > 0) {\n\t\t\tconst list = await this.store.artistStore.search({query: query.query, amount: query.artist});\n\t\t\tresult.artists = list.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.folder !== undefined && query.folder > 0) {\n\t\t\tconst list = await this.store.artistStore.search({query: query.query, amount: query.folder});\n\t\t\tresult.folders = list.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.playlist !== undefined && query.playlist > 0) {\n\t\t\tconst list = await this.store.playlistStore.search({query: query.query, amount: query.playlist});\n\t\t\tresult.playlists = list.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\tif (query.podcast !== undefined && query.podcast > 0) {\n\t\t\tconst list = await this.store.podcastStore.search({query: query.query, amount: query.podcast});\n\t\t\tresult.podcasts = list.map(o => {\n\t\t\t\treturn {id: o.id, name: o.tag ? o.tag.title : ''};\n\t\t\t});\n\t\t}\n\t\tif (query.episode !== undefined && query.episode > 0) {\n\t\t\tconst list = await this.store.episodeStore.search({query: query.query, amount: query.episode});\n\t\t\tresult.episodes = list.map(o => {\n\t\t\t\treturn {id: o.id, name: o.name};\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamRequest} from '../../api/jam/api';\nimport {User} from '../user/user.model';\nimport {Bookmark} from './bookmark.model';\nimport {SearchQueryBookmark} from './bookmark.store';\nimport {TrackController} from '../track/track.controller';\nimport {formatBookmark} from './bookmark.format';\nimport {BookmarkService} from './bookmark.service';\n\nexport class BookmarkController {\n\n\tconstructor(\n\t\tprivate bookmarkService: BookmarkService,\n\t\tprivate trackController: TrackController\n\t) {\n\t}\n\n\tdefaultSort(items: Array<Bookmark>): Array<Bookmark> {\n\t\treturn items.sort((a, b) => b.changed - a.changed);\n\t}\n\n\tasync prepare(bookmark: Bookmark, includes: JamParameters.IncludesBookmark, user: User): Promise<Jam.Bookmark> {\n\t\tconst result = formatBookmark(bookmark);\n\t\tif (includes.bookmarkTrack) {\n\t\t\tresult.track = await this.trackController.prepareByID(bookmark.id, includes, user);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.BookmarkSearch, user: User): SearchQueryBookmark {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\tuserID: query.userID,\n\t\t\tdestID: query.trackID,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.BookmarkCreate>): Promise<Jam.Bookmark> {\n\t\tconst track = await this.trackController.byID(req.query.trackID);\n\t\tconst bookmark = await this.bookmarkService.create(track.id, req.user.id, req.query.position || 0, req.query.comment);\n\t\treturn this.prepare(bookmark, {}, req.user);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tawait this.bookmarkService.remove(req.query.id, req.user.id);\n\t}\n\n\tasync list(req: JamRequest<JamParameters.BookmarkList>): Promise<Array<Jam.Bookmark>> {\n\t\tconst bookmarks = await this.bookmarkService.getAll(req.user.id);\n\t\tconst result = bookmarks.map(bookmark => formatBookmark(bookmark));\n\t\tif (req.query.bookmarkTrack) {\n\t\t\tconst tracks = await this.trackController.prepareListByIDs(bookmarks.map(b => b.destID), req.query, req.user);\n\t\t\tresult.forEach(bookmark => {\n\t\t\t\tbookmark.track = tracks.find(t => t.id === bookmark.trackID);\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Bookmark} from './bookmark.model';\n\nexport function formatBookmark(bookmark: Bookmark): Jam.Bookmark {\n\treturn {\n\t\tid: bookmark.id,\n\t\ttrackID: bookmark.destID,\n\t\tcomment: bookmark.comment,\n\t\tcreated: bookmark.created,\n\t\tchanged: bookmark.changed,\n\t\tposition: bookmark.position\n\t};\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {JamRequest} from '../../api/jam/api';\nimport {TrackController} from '../track/track.controller';\nimport {formatPlayQueue} from './playqueue.format';\nimport {PlayQueueService} from './playqueue.service';\n\nexport class PlayQueueController {\n\n\tconstructor(\n\t\tprivate playqueueService: PlayQueueService,\n\t\tprivate trackController: TrackController\n\t) {\n\t}\n\n\tasync get(req: JamRequest<JamParameters.PlayQueue>): Promise<Jam.PlayQueue> {\n\t\tconst playQueue = await this.playqueueService.getQueueOrCreate(req.user.id, req.client);\n\t\tconst result = formatPlayQueue(playQueue, req.query);\n\t\tif (req.query.playQueueTracks) {\n\t\t\tresult.tracks = await this.trackController.prepareListByIDs(playQueue.trackIDs, req.query, req.user);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync update(req: JamRequest<JamParameters.PlayQueueSet>): Promise<Jam.PlayQueue> {\n\t\treturn await this.playqueueService.save(req.user.id, req.query.trackIDs, req.query.currentID, req.query.position, req.client);\n\t}\n\n\tasync delete(req: JamRequest<{}>): Promise<void> {\n\t\tawait this.playqueueService.remove(req.user.id);\n\t}\n\n\n}\n","import {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {PlayQueue} from './playqueue.model';\n\nexport function formatPlayQueue(playQueue: PlayQueue, includes: JamParameters.IncludesPlayQueue): Jam.PlayQueue {\n\treturn {\n\t\tchanged: playQueue.changed,\n\t\tchangedBy: playQueue.changedBy,\n\t\tcurrentID: playQueue.currentID,\n\t\tposition: playQueue.position,\n\t\ttrackIDs: includes.playQueueTrackIDs ? playQueue.trackIDs : undefined\n\t};\n}\n","import {BaseController} from '../base/base.controller';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {Jam} from '../../model/jam-rest-data';\nimport {DBObjectType} from '../../types';\nimport {JamRequest} from '../../api/jam/api';\nimport {formatRadio} from './radio.format';\nimport {RadioService} from './radio.service';\nimport {formatState} from '../state/state.format';\nimport {StateService} from '../state/state.service';\nimport {ImageService} from '../../engine/image/image.service';\nimport {DownloadService} from '../../engine/download/download.service';\nimport {SearchQueryRadio} from './radio.store';\nimport {Radio} from './radio.model';\nimport {User} from '../user/user.model';\n\nexport class RadioController extends BaseController<JamParameters.Radio, JamParameters.Radios, JamParameters.IncludesRadio, SearchQueryRadio, JamParameters.RadioSearch, Radio, Jam.Radio> {\n\n\tconstructor(\n\t\tprivate radioService: RadioService,\n\t\tprotected stateService: StateService,\n\t\tprotected imageService: ImageService,\n\t\tprotected downloadService: DownloadService\n\t) {\n\t\tsuper(radioService, stateService, imageService, downloadService);\n\t}\n\n\tdefaultSort(items: Array<Radio>): Array<Radio> {\n\t\treturn items.sort((a, b) => a.name.localeCompare(b.name));\n\t}\n\n\tasync prepare(radio: Radio, includes: JamParameters.IncludesRadio, user: User): Promise<Jam.Radio> {\n\t\tconst result = formatRadio(radio);\n\t\tif (includes.radioState) {\n\t\t\tconst state = await this.stateService.findOrCreate(radio.id, user.id, DBObjectType.radio);\n\t\t\tresult.state = formatState(state);\n\t\t}\n\t\treturn result;\n\t}\n\n\ttranslateQuery(query: JamParameters.RadioSearch, user: User): SearchQueryRadio {\n\t\treturn {\n\t\t\tquery: query.query,\n\t\t\turl: query.url,\n\t\t\tname: query.name,\n\t\t\thomepage: query.homepage,\n\t\t\toffset: query.offset,\n\t\t\tamount: query.amount,\n\t\t\tsorts: query.sortField ? [{field: query.sortField, descending: !!query.sortDescending}] : undefined\n\t\t};\n\t}\n\n\tasync create(req: JamRequest<JamParameters.RadioNew>): Promise<Jam.Radio> {\n\t\tconst radio = await this.radioService.create(req.query.name, req.query.url, req.query.homepage);\n\t\treturn this.prepare(radio, {radioState: true}, req.user);\n\t}\n\n\tasync update(req: JamRequest<JamParameters.RadioUpdate>): Promise<void> {\n\t\tconst radio = await this.byID(req.query.id);\n\t\tawait this.radioService.update(radio, req.query.name, req.query.url, req.query.homepage);\n\t}\n\n\tasync delete(req: JamRequest<JamParameters.ID>): Promise<void> {\n\t\tconst radio = await this.byID(req.query.id);\n\t\tawait this.radioService.remove(radio);\n\t}\n\n}\n","import {Jam} from '../../model/jam-rest-data';\nimport {Radio} from './radio.model';\n\nexport function formatRadio(radio: Radio): Jam.Radio {\n\treturn {\n\t\tid: radio.id,\n\t\turl: radio.url,\n\t\tcreated: radio.created,\n\t\tchanged: radio.changed,\n\t\tname: radio.name,\n\t\thomepage: radio.homepage,\n\t};\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport {Store} from 'express-session';\nimport {Express} from 'express';\n\nexport interface Sessions {\n\t[key: string]: Express.SessionData;\n}\n\nexport class SessionJSONFileStore extends Store {\n\tfilename: string;\n\tcache: Sessions = {};\n\n\tconstructor(filename: string) {\n\t\tsuper();\n\t\tthis.filename = path.resolve(filename || 'sessions.json');\n\t\tthis.init().catch(e => {\n\t\t\tconsole.log('SessionJSONFileStore', e);\n\t\t});\n\t}\n\n\tasync init() {\n\t\tawait fse.ensureDir(path.dirname(this.filename));\n\t\tconst exists = await fse.pathExists(this.filename);\n\t\tif (exists) {\n\t\t\tconst archive = await fse.readJson(this.filename);\n\t\t\tObject.keys(archive).forEach(key => {\n\t\t\t\tconst sessionData = archive[key];\n\t\t\t\tif (sessionData.cookie.expires !== undefined && typeof sessionData.cookie.expires !== 'boolean') {\n\t\t\t\t\tsessionData.cookie.expires = new Date(sessionData.cookie.expires);\n\t\t\t\t}\n\t\t\t\tif (!this.expired(sessionData)) {\n\t\t\t\t\tthis.cache[key] = sessionData;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate expired(data: Express.SessionData): boolean {\n\t\tif (data.cookie && data.cookie.expires instanceof Date) {\n\t\t\treturn data.cookie.expires.valueOf() < Date.now();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate savejson(callback?: (err?: Error) => void): void {\n\t\tfse.writeFile(this.filename, JSON.stringify(this.cache), (err) => {\n\t\t\tif (callback) {\n\t\t\t\tcallback(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tget: (sid: string, callback: (err: any, data?: Express.SessionData | null) => void) => void = (sid, callback) => {\n\t\tconst sessionData = this.cache[sid];\n\t\tif (sessionData && this.expired(sessionData)) {\n\t\t\treturn this.destroy(sid, (err) => {\n\t\t\t\tcallback(err);\n\t\t\t});\n\t\t}\n\t\tcallback(null, sessionData);\n\t}\n\n\tset: (sid: string, data: Express.SessionData, callback?: (err?: any) => void) => void = (sid, data, callback) => {\n\t\tthis.cache[sid] = data;\n\t\tthis.savejson(callback);\n\t}\n\n\tdestroy: (sid: string, callback?: (err?: any) => void) => void = (sid, callback) => {\n\t\tdelete this.cache[sid];\n\t\tthis.savejson(callback);\n\t}\n\n\tall: (callback: (err: any, obj?: { [sid: string]: Express.SessionData; } | null) => void) => void = (callback) => {\n\t\tcallback(null, this.cache);\n\t}\n\n\tlength: (callback: (err: any, length?: number | null) => void) => void = (callback) => {\n\t\tcallback(null, Object.keys(this.cache).length);\n\t}\n\n\tclear: (callback?: (err?: any) => void) => void = (callback) => {\n\t\tthis.cache = {};\n\t\tthis.savejson(callback);\n\t}\n\n\t// touch: (sid: string, session: Express.Session, callback?: (err?: any) => void) => void = (sid, session, callback) => {\n\t// \tthis.set(sid, session, callback);\n\t// };\n\n}\n\n","module.exports = require(\"passport\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"jsonwebtoken\");","// THIS FILE IS GENERATED, DO NOT EDIT MANUALLY\n\nimport {Jam} from '../../model/jam-rest-data';\nimport {MusicBrainz} from '../../model/musicbrainz-rest-data';\nimport {Acoustid} from '../../model/acoustid-rest-data';\nimport {LastFM} from '../../model/lastfm-rest-data';\nimport {JamParameters} from '../../model/jam-rest-params';\nimport {JamController, JamRequest} from './api';\nimport {ApiResponder} from './response';\nimport express from 'express';\nimport {IApiBinaryResult} from '../../typings';\n\nexport type RegisterCallback = (req: express.Request, res: express.Response) => Promise<void>;\nexport interface Register {\n\tget: (name: string, execute: RegisterCallback, apiCheckName?: string) => void;\n\tpost: (name: string, execute: RegisterCallback, apiCheckName?: string) => void;\n\tupload: (name: string, field: string, execute: RegisterCallback, apiCheckName?: string) => void;\n}\n\nexport function registerPublicApi(register: Register, api: JamController): void {\n\tregister.get('/ping', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Ping = await api.ping(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/session', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Session = await api.session(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n}\n\nexport function registerUserApi(register: Register, api: JamController): void {\n\tregister.get('/lastfm/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.LastFMLookup> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: LastFM.Result = await api.metadataController.lastfmLookup(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/acoustid/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AcoustidLookup> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Acoustid.Result> = await api.metadataController.acoustidLookup(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/brainz/lookup', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BrainzLookup> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: MusicBrainz.Response = await api.metadataController.brainzLookup(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/brainz/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BrainzSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: MusicBrainz.Response = await api.metadataController.brainzSearch(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/autocomplete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AutoComplete> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.AutoComplete = await api.autocompleteController.autocomplete(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/genre/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Genres> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Genre> = await api.genreController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/nowPlaying/list', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.NowPlaying> = await api.nowPlayingController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/chat/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Chat> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.ChatMessage> = await api.chatController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/index', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Index> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.FolderIndex = await api.folderController.index(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Folder> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Folder = await api.folderController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Folders> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Folder> = await api.folderController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/children', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderChildren> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.FolderChildren = await api.folderController.children(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderTracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.folderController.tracks(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/subfolders', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderSubFolders> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Folder> = await api.folderController.subfolders(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/artist/similar', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Folder> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Folder> = await api.folderController.artistSimilar(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/artist/info', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistInfo> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.ArtistFolderInfo = await api.folderController.artistInfo(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/album/info', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AlbumInfo> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.AlbumFolderInfo = await api.folderController.albumInfo(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderList> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Folder> = await api.folderController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Folder> = await api.folderController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.folderController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.folderController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/artist/similar/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.folderController.artistSimilarTracks(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Track> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Track = await api.trackController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Tracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.trackController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/tagID3', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.ID3Tag = await api.trackController.tagID3(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/tagID3s', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.ID3Tags = await api.trackController.tagID3s(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.trackController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.trackController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.trackController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TrackList> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.trackController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/track/similar', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.trackController.similar(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/episode/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Episode> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastEpisode = await api.episodeController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/episode/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Episodes> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.PodcastEpisode> = await api.episodeController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/episode/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.EpisodeSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.PodcastEpisode> = await api.episodeController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/episode/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.episodeController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/episode/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.episodeController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/episode/status', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastEpisodeStatus = await api.episodeController.status(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/podcast/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Podcast> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Podcast = await api.podcastController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/podcast/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Podcasts> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Podcast> = await api.podcastController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/podcast/status', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.PodcastStatus = await api.podcastController.status(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/podcast/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PodcastSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Podcast> = await api.podcastController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/podcast/refreshAll', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query, user: req.user, client: req.client};\n\t\tawait api.podcastController.refreshAll(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.get('/podcast/refresh', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tawait api.podcastController.refresh(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.get('/podcast/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.podcastController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/podcast/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.podcastController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/radio/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Radio> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Radio = await api.radioController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/radio/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Radios> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Radio> = await api.radioController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/radio/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Radios> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Radio> = await api.radioController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/radio/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.radioController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/radio/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.radioController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Artist> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Artist = await api.artistController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Artists> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Artist> = await api.artistController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Artist> = await api.artistController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.artistController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.artistController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ArtistList> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Artist> = await api.artistController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/similar/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.artistController.similarTracks(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/similar', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Artist> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Artist> = await api.artistController.similar(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/index', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Index> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.ArtistIndex = await api.artistController.index(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/artist/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Tracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.artistController.tracks(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Album> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Album = await api.albumController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Albums> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Album> = await api.albumController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AlbumList> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Album> = await api.albumController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.AlbumSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Album> = await api.albumController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.albumController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.albumController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/similar/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.SimilarTracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.albumController.similarTracks(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/album/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Tracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.albumController.tracks(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playlist/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Playlist> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Playlist = await api.playlistController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playlist/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Playlists> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Playlist> = await api.playlistController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playlist/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Playlist> = await api.playlistController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playlist/state', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.State = await api.playlistController.state(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playlist/states', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.States = await api.playlistController.states(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playlist/tracks', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Tracks> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Track> = await api.playlistController.tracks(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playqueue/get', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlayQueue> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.PlayQueue = await api.playqueueController.get(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/root/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Root> = await api.rootController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/root/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.Root = await api.rootController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/root/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Root> = await api.rootController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/root/status', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.RootStatus = await api.rootController.status(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/folder/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.folderController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/folder/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.folderController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/track/stream', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Stream> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.trackController.stream(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/track/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.trackController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/track/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.trackController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/episode/stream', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Stream> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.episodeController.stream(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/episode/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.episodeController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/episode/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.episodeController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/podcast/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.podcastController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/podcast/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.podcastController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/artist/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.artistController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/artist/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.artistController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/album/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.albumController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/album/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.albumController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/bookmark/list', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BookmarkList> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.Bookmark> = await api.bookmarkController.list(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/playlist/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.playlistController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/playlist/download', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.playlistController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/user/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.userController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/root/image', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.rootController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t});\n\n\tregister.get('/image/:id-:size.:format', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Image> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.imageController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/image/{id}-{size}.{format}');\n\n\tregister.get('/image/:id-:size', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PathImageSize> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.imageController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/image/{id}-{size}');\n\n\tregister.get('/image/:id.:format', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PathImageFormat> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.imageController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/image/{id}.{format}');\n\n\tregister.get('/image/:id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.imageController.image(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/image/{id}');\n\n\tregister.get('/stream/:id.:format', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PathStream> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.streamController.stream(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/stream/{id}.{format}');\n\n\tregister.get('/stream/:id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.streamController.stream(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/stream/{id}');\n\n\tregister.get('/waveform/:id.:format', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Waveform> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.waveformController.waveform(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/waveform/{id}.{format}');\n\n\tregister.get('/download/:id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.downloadController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/download/{id}');\n\n\tregister.get('/download/:id.:format', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Download> = {query: req.params, user: req.user, client: req.client};\n\t\tconst result: IApiBinaryResult = await api.downloadController.download(options);\n\t\tawait ApiResponder.binary(res, result);\n\t}, '/download/{id}.{format}');\n\n\tregister.post('/bookmark/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.bookmarkController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/chat/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ChatDelete> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.chatController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/playlist/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.playlistController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/chat/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ChatNew> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.chatController.create(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/track/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.trackController.favUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/track/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.trackController.rateUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/folder/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.folderController.favUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/folder/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.folderController.rateUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/album/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.albumController.favUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/album/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.albumController.rateUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/artist/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.artistController.favUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/artist/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.artistController.rateUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/episode/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.episodeController.favUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/episode/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.episodeController.rateUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/bookmark/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.BookmarkCreate> = {query: req.body, user: req.user, client: req.client};\n\t\tconst result: Jam.Bookmark = await api.bookmarkController.create(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.post('/podcast/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.podcastController.favUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/podcast/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.podcastController.rateUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/playlist/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistNew> = {query: req.body, user: req.user, client: req.client};\n\t\tconst result: Jam.Playlist = await api.playlistController.create(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.post('/playlist/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlaylistUpdate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.playlistController.update(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/playlist/fav/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Fav> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.playlistController.favUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/playlist/rate/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.Rate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.playlistController.rateUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/playqueue/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PlayQueueSet> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.playqueueController.update(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/playqueue/delete', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.playqueueController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.upload('/user/imageUpload/update', 'image' , async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client, file: req.file ? req.file.path : undefined};\n\t\tawait api.userController.imageUploadUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n}\n\nexport function registerAdminApi(register: Register, api: JamController): void {\n\tregister.get('/episode/retrieve', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tawait api.episodeController.retrieve(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.get('/user/search', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserSearch> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.User> = await api.userController.search(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/user/id', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Jam.User = await api.userController.id(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/user/ids', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.IDs> = {query: req.query, user: req.user, client: req.client};\n\t\tconst result: Array<Jam.User> = await api.userController.ids(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.get('/root/scan', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\tawait api.rootController.scan(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.get('/root/scanAll', async (req, res) => {\n\t\tconst options: JamRequest<{}> = {query: req.query, user: req.user, client: req.client};\n\t\tawait api.rootController.scanAll(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/podcast/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.podcastController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/user/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.userController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/root/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.rootController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/radio/delete', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.radioController.delete(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/track/tagID3/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TagID3Update> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.trackController.tagID3Update(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/track/tagID3s/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.TagID3sUpdate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.trackController.tagID3sUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/radio/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RadioUpdate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.radioController.update(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.upload('/folder/imageUpload/update', 'image' , async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.ID> = {query: req.body, user: req.user, client: req.client, file: req.file ? req.file.path : undefined};\n\t\tawait api.folderController.imageUploadUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/folder/imageUrl/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderEditImg> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.folderController.imageUrlUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/folder/name/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.FolderEditName> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.folderController.nameUpdate(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/radio/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RadioNew> = {query: req.body, user: req.user, client: req.client};\n\t\tconst result: Jam.Radio = await api.radioController.create(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.post('/podcast/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.PodcastNew> = {query: req.body, user: req.user, client: req.client};\n\t\tconst result: Jam.Podcast = await api.podcastController.create(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.post('/user/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserNew> = {query: req.body, user: req.user, client: req.client};\n\t\tconst result: Jam.User = await api.userController.create(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.post('/user/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.UserUpdate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.userController.update(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n\n\tregister.post('/root/create', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootNew> = {query: req.body, user: req.user, client: req.client};\n\t\tconst result: Jam.Root = await api.rootController.create(options);\n\t\tawait ApiResponder.data(res, result);\n\t});\n\n\tregister.post('/root/update', async (req, res) => {\n\t\tconst options: JamRequest<JamParameters.RootUpdate> = {query: req.body, user: req.user, client: req.client};\n\t\tawait api.rootController.update(options);\n\t\tawait ApiResponder.ok(res);\n\t});\n}\n","import {OpenAPIObject} from '../../model/openapi-spec';\nimport express from 'express';\nimport {checkOpenApiParameters} from '../../utils/openapi-parameters-check';\nimport {ApiResponder} from './response';\n\nconst openapi: OpenAPIObject = require('../../model/jam-openapi.json');\nconst JamApiSchema = require('../../model/jam-rest-api.schema.json');\n\nexport function apiCheck(name: string): express.RequestHandler {\n\tfunction CheckApiParametersHandler(req: express.Request, res: express.Response, next: express.NextFunction) {\n\t\tcheckOpenApiParameters(name, req, openapi, JamApiSchema).then(() => {\n\t\t\tnext();\n\t\t}).catch((e) => {\n\t\t\tApiResponder.error(res, e);\n\t\t});\n\t}\n\treturn CheckApiParametersHandler;\n}\n","const Ajv = require('ajv');\nconst ajv = new Ajv(); // options can be passed, e.g. {allErrors: true}\n\nexport async function validate(data: any, schema: any): Promise<{ errors: Array<Error> }> {\n\tconst validator = ajv.compile(schema);\n\tconst valid = validator(data);\n\tif (valid) {\n\t\treturn {errors: []};\n\t} else {\n\t\treturn {errors: validator.errors};\n\t}\n}\n","module.exports = require(\"ajv\");","import moment from 'moment';\n\nexport function getMaxAge(maxAgeSpec: { value: number; unit: string }): number {\n\tlet maxAge = 0;\n\tif (maxAgeSpec.value > 0) {\n\t\tmaxAge = moment.duration(maxAgeSpec.value, <moment.unitOfTime.Base>maxAgeSpec.unit).asMilliseconds();\n\t}\n\treturn maxAge;\n}\n","module.exports = require(\"multer-autoreap\");","module.exports = require(\"express-rate-limit\");","import express from 'express';\nimport {CheckAuthMiddleWare, SubsonicLoginMiddleWare} from './login';\nimport {SubsonicParameterMiddleWare, SubsonicParameterRequest} from './parameters';\nimport Logger from '../../utils/logger';\nimport {FORMAT} from './format';\nimport {SubsonicApi} from './api';\nimport {Engine} from '../../engine/engine';\nimport {Subsonic} from '../../model/subsonic-rest-data';\nimport cors from 'cors';\nimport {registerApi, SubsonicRolesHandler} from './routes';\nimport {ApiResponder} from './response';\n\nconst log = Logger('Subsonic.Api');\n\nexport function AdminMiddleWare(req: SubsonicParameterRequest, res: express.Response, next: express.NextFunction) {\n\tif (!req.user || !req.user.roles.adminRole) {\n\t\tApiResponder.error(req, res, {fail: FORMAT.FAIL.UNAUTH});\n\t}\n\tnext();\n}\n\nexport function PodcastAdminMiddleWare(req: SubsonicParameterRequest, res: express.Response, next: express.NextFunction) {\n\tif (!req.user || !req.user.roles.podcastRole) {\n\t\tApiResponder.error(req, res, {fail: FORMAT.FAIL.UNAUTH});\n\t}\n\tnext();\n}\n\nexport function ShareMiddleWare(req: SubsonicParameterRequest, res: express.Response, next: express.NextFunction) {\n\tif (!req.user || !req.user.roles.shareRole) {\n\t\tApiResponder.error(req, res, {fail: FORMAT.FAIL.UNAUTH});\n\t}\n\tnext();\n}\n\nexport function JukeboxMiddleWare(req: SubsonicParameterRequest, res: express.Response, next: express.NextFunction) {\n\tif (!req.user || !req.user.roles.jukeboxRole) {\n\t\tApiResponder.error(req, res, {fail: FORMAT.FAIL.UNAUTH});\n\t}\n\tnext();\n}\n\nexport function initSubsonicRouter(engine: Engine): express.Router {\n\tconst api = new SubsonicApi(engine);\n\tconst roles: SubsonicRolesHandler = {\n\t\tadmin: <express.RequestHandler>AdminMiddleWare,\n\t\tpodcast: <express.RequestHandler>PodcastAdminMiddleWare,\n\t\tshare: <express.RequestHandler>ShareMiddleWare,\n\t\tjukebox: <express.RequestHandler>JukeboxMiddleWare\n\t};\n\n\tconst router = express.Router();\n\trouter.options('*', cors());\n\trouter.use((req, res, next) => {\n\t\tlog.info(req.method, req.originalUrl);\n\t\tnext();\n\t});\n\n\trouter.use(SubsonicParameterMiddleWare);\n\trouter.use(<express.RequestHandler>SubsonicLoginMiddleWare);\n\trouter.use(<express.RequestHandler>CheckAuthMiddleWare);\n\tregisterApi(router, api, roles);\n\n\trouter.use((req, res, next) => {\n\t\tres.status(404).send('subsonic api cmd not found');\n\t});\n\n\treturn router;\n}\n","/*\n\nAuthentication\n\nIf your targeting API version 1.12.0 or earlier, authentication is performed by sending the password as clear text or hex-encoded. Examples:\n\nhttp://your-server/rest/ping.view?u=joe&p=sesame&v=1.12.0&c=myapp\nhttp://your-server/rest/ping.view?u=joe&p=enc:736573616d65&v=1.12.0&c=myapp\n\nStarting with API version 1.13.0, the recommended authentication scheme is to send an authentication token, calculated as a one-way salted hash of the password.\n\nThis involves two steps:\n\n    For each REST call, generate a random string called the salt. Send this as parameter s.\n    Use a salt length of at least six characters.\n    Calculate the authentication token as follows: token = md5(password + salt). The md5() function takes a string and returns the 32-byte ASCII hexadecimal representation of the MD5 hash, using lower case characters for the hex values. The '+' operator represents concatenation of the two strings. Treat the strings as UTF-8 encoded when calculating the hash. Send the result as parameter t.\n\nFor example: if the password is sesame and the random salt is c19b2d, then token = md5(\"sesamec19b2d\") = 26719a1196d2a940705a59634eb18eab. The corresponding request URL then becomes:\n\nhttp://your-server/rest/ping.view?u=joe&t=26719a1196d2a940705a59634eb18eab&s=c19b2d&v=1.12.0&c=myapp\n\n */\n\nimport express from 'express';\nimport {SubsonicParameterRequest} from './parameters';\nimport {ApiResponder} from './response';\nimport {FORMAT} from './format';\nimport {User} from '../../objects/user/user.model';\nimport {hexDecode} from '../../utils/hex';\n\n/**\n * Fill user into req.user express requests\n */\nexport interface UserRequest extends SubsonicParameterRequest {\n\tuser: User;\n\tclient: string;\n}\n\nasync function validateCredentials(req: SubsonicParameterRequest): Promise<User> {\n\tif (req.user) {\n\t\treturn <User>req.user;\n\t}\n\tif (req.parameters.password) {\n\t\tlet pass = req.parameters.password;\n\t\tif (pass.indexOf('enc:') === 0) {\n\t\t\tpass = hexDecode(pass.slice(4)).trim();\n\t\t}\n\t\treturn req.engine.userService.auth(req.parameters.username, pass);\n\t} else if (req.parameters.token && req.parameters.salt) {\n\t\treturn req.engine.userService.authToken(req.parameters.username, req.parameters.token, req.parameters.salt);\n\t} else {\n\t\treturn Promise.reject('Invalid Login Type');\n\t}\n}\n\nexport function SubsonicLoginMiddleWare(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\tif (req.user) {\n\t\treturn next();\n\t}\n\tif (!req.parameters) {\n\t\treturn next();\n\t}\n\treq.client = req.parameters.client;\n\tvalidateCredentials(req)\n\t\t.then(user => {\n\t\t\treq.user = user;\n\t\t\tnext();\n\t\t})\n\t\t.catch(e => {\n\t\t\tnext();\n\t\t});\n}\n\nexport function CheckAuthMiddleWare(req: UserRequest, res: express.Response, next: express.NextFunction) {\n\tif (req.user) {\n\t\treturn next();\n\t}\n\treturn ApiResponder.error(req, res, {fail: FORMAT.FAIL.UNAUTH});\n}\n","import util from 'util';\n\nexport function toXML(obj: any): string {\n\n\tconst xmls = (s: any): string => s.toString().replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&apos;');\n\n\tconst xmli = (o: any) => {\n\t\tlet s = '';\n\t\tObject.keys(o).forEach(key => {\n\t\t\tif ((key !== 'content')) {\n\t\t\t\tconst sub = o[key];\n\t\t\t\tif (!util.isArray(sub) && (typeof sub !== 'object')) {\n\t\t\t\t\tconst val = JSON.stringify(sub);\n\t\t\t\t\tif (val !== undefined) {\n\t\t\t\t\t\ts += ' ' + key + '=\"' + xmls(sub) + '\"';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn s;\n\t};\n\n\tconst xmlc = (o: any): string => {\n\t\tfor (const key in o) {\n\t\t\tif (key === 'content' && o.hasOwnProperty(key)) {\n\t\t\t\treturn o[key];\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t};\n\n\tconst xmlo = (o: any): string => {\n\t\tlet s = '';\n\t\tObject.keys(o).forEach(key => {\n\t\t\tconst sub = o[key];\n\t\t\tif (util.isArray(sub)) {\n\t\t\t\tsub.forEach((entry) => {\n\t\t\t\t\tconst val = xmlc(entry) + xmlo(entry);\n\t\t\t\t\ts += '<' + key + xmli(entry);\n\t\t\t\t\tif (val.length > 0) {\n\t\t\t\t\t\ts += '>' + val + '</' + key + '>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts += ' />';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (typeof sub === 'object') {\n\t\t\t\tconst val = xmlo(sub);\n\t\t\t\ts += '<' + key + xmli(sub);\n\t\t\t\tif (val.length > 0) {\n\t\t\t\t\ts += '>' + val + '</' + key + '>';\n\t\t\t\t} else {\n\t\t\t\t\ts += ' />';\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn s;\n\t};\n\n\tconst xml = (o: any): string => {\n\t\tlet s = '';\n\t\tObject.keys(o).forEach(key => {\n\t\t\tconst val = xmlo(o[key]);\n\t\t\ts += '<' + key + xmli(o[key]);\n\t\t\tif (val.length > 0) {\n\t\t\t\ts += '>' + val + '</' + key + '>';\n\t\t\t} else {\n\t\t\t\ts += ' />';\n\t\t\t}\n\t\t});\n\t\treturn '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + s;\n\t};\n\n\treturn xml(obj);\n}\n","module.exports = require(\"util\");","import express from 'express';\nimport {EngineRequest} from '../server';\n\nexport interface SubsonicBaseParams {\n\tusername: string;\n\tpassword?: string;\n\ttoken?: string;\n\tsalt?: string;\n\tformat: string;\n\tclient: string;\n\tversion: string;\n\tcallback?: string;\n}\n\nfunction processParams(req: express.Request): SubsonicBaseParams {\n\t/*\n\tParameter \tRequired \tDefault \tComment\n\tu \tYes \t\tThe username.\n\tp \tYes* \t\tThe password, either in clear text or hex-encoded with a \"enc:\" prefix. Since 1.13.0 this should only be used for testing purposes.\n\tt \tYes* \t\t(Since 1.13.0) The authentication token computed as md5(password + salt). See below for details.\n\ts \tYes* \t\t(Since 1.13.0) A random string (\"salt\") used as input for computing the password hash. See below for details.\n\tv \tYes \t\tThe protocol version implemented by the client, i.e., the version of the subsonic-rest-api.xsd schema used (see below).\n\tc \tYes \t\tA unique string identifying the client application.\n\tf \tNo \txml \tRequest data to be returned in this format. Supported values are \"xml\", \"json\" (since 1.4.0) and \"jsonp\" (since 1.6.0). If using jsonp, specify name of javascript callback function using a callback parameter.\n\t */\n\tconst params: SubsonicBaseParams = {\n\t\tusername: req.query.u,\n\t\tpassword: req.query.p,\n\t\tformat: req.query.f,\n\t\tversion: req.query.v,\n\t\ttoken: req.query.t,\n\t\tsalt: req.query.s,\n\t\tclient: req.query.c,\n\t\tcallback: req.query.callback\n\t};\n\tdelete req.query.t;\n\tdelete req.query.u;\n\tdelete req.query.p;\n\tdelete req.query.f;\n\tdelete req.query.v;\n\tdelete req.query.c;\n\tdelete req.query.s;\n\tdelete req.query.callback;\n\treturn params;\n}\n\nexport interface SubsonicParameterRequest extends EngineRequest {\n\tparameters: SubsonicBaseParams;\n}\n\nexport function SubsonicParameterMiddleWare(req: express.Request, res: express.Response, next: express.NextFunction) {\n\t(<SubsonicParameterRequest>req).parameters = processParams(req);\n\tnext();\n}\n","import {IApiBinaryResult} from '../../typings';\nimport {Engine} from '../../engine/engine';\nimport {DBObjectType, FolderType, FolderTypesAlbum, PodcastStatus} from '../../types';\nimport {randomItems} from '../../utils/random';\nimport {paginate} from '../../utils/paginate';\nimport {FORMAT} from './format';\nimport {Subsonic} from '../../model/subsonic-rest-data';\nimport {SubsonicParameters} from '../../model/subsonic-rest-params';\nimport {BaseStore, SearchQuery} from '../../objects/base/base.store';\nimport {User} from '../../objects/user/user.model';\nimport {DBObject} from '../../objects/base/base.model';\nimport {Album} from '../../objects/album/album.model';\nimport {Artist} from '../../objects/artist/artist.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {Track} from '../../objects/track/track.model';\nimport {Playlist} from '../../objects/playlist/playlist.model';\nimport {Episode} from '../../objects/episode/episode.model';\nimport {State} from '../../objects/state/state.model';\nimport {Podcast} from '../../objects/podcast/podcast.model';\nimport {Bookmark} from '../../objects/bookmark/bookmark.model';\nimport {SearchQueryTrack} from '../../objects/track/track.store';\nimport {hexDecode} from '../../utils/hex';\n\n/*\n\thttp://www.subsonic.org/pages/api.jsp\n */\n\nexport interface ApiOptions<T> {\n\tquery: T;\n\tuser: User;\n\tclient?: string;\n}\n\nexport class SubsonicApi {\n\n\tconstructor(public engine: Engine) {\n\t}\n\n\t/* helper functions */\n\n\tprivate async prepareList<T extends DBObject, R>(type: DBObjectType, objs: Array<T>, pack: (o: T, state: State) => R, user: User): Promise<Array<R>> {\n\t\tconst states = await this.engine.stateService.findOrCreateMany(objs.map(o => o.id), user.id, type);\n\t\treturn objs.map(o => {\n\t\t\treturn pack(o, states[o.id]);\n\t\t});\n\t}\n\n\tprivate async prepareObj<T extends DBObject, R>(type: DBObjectType, obj: T, pack: (o: T, state: State) => R, user: User): Promise<R> {\n\t\tconst state = await this.engine.stateService.findOrCreate(obj.id, user.id, type);\n\t\treturn pack(obj, state);\n\t}\n\n\tprivate async prepareAlbums(albums: Array<Album>, user: User): Promise<Array<Subsonic.AlbumID3>> {\n\t\treturn this.prepareList<Album, Subsonic.AlbumID3>(DBObjectType.album, albums, FORMAT.packAlbum, user);\n\t}\n\n\tprivate async prepareArtists(artists: Array<Artist>, user: User): Promise<Array<Subsonic.ArtistID3>> {\n\t\treturn this.prepareList<Artist, Subsonic.ArtistID3>(DBObjectType.artist, artists, FORMAT.packArtist, user);\n\t}\n\n\tprivate async prepareFolders(folders: Array<Folder>, user: User): Promise<Array<Subsonic.Child>> {\n\t\treturn this.prepareList<Folder, Subsonic.Child>(DBObjectType.folder, folders, FORMAT.packFolder, user);\n\t}\n\n\tprivate async prepareFolderArtists(folders: Array<Folder>, user: User): Promise<Array<Subsonic.Artist>> {\n\t\treturn this.prepareList<Folder, Subsonic.Artist>(DBObjectType.folder, folders, FORMAT.packFolderArtist, user);\n\t}\n\n\tprivate async prepareTrack(track: Track, user: User): Promise<Subsonic.Child> {\n\t\treturn this.prepareObj<Track, Subsonic.Child>(DBObjectType.track, track, FORMAT.packTrack, user);\n\t}\n\n\tprivate async prepareTracks(tracks: Array<Track>, user: User): Promise<Array<Subsonic.Child>> {\n\t\treturn this.prepareList<Track, Subsonic.Child>(DBObjectType.track, tracks, FORMAT.packTrack, user);\n\t}\n\n\tprivate async prepareBookmarks(bookmarks: Array<Bookmark>, user: User): Promise<Array<Subsonic.Bookmark>> {\n\n\t\tconst removeDups = (list: Array<string>): Array<string> => {\n\t\t\treturn list.filter(function(item, pos) {\n\t\t\t\treturn list.indexOf(item) === pos;\n\t\t\t});\n\t\t};\n\n\t\tconst trackIDs = removeDups(bookmarks.map(bookmark => bookmark.destID));\n\t\tconst userIds = removeDups(bookmarks.map(bookmark => bookmark.userID));\n\t\tconst tracks = await this.engine.store.trackStore.byIds(trackIDs);\n\t\tconst childs = await this.prepareTracks(tracks, user);\n\t\tconst users = await this.engine.store.userStore.byIds(userIds);\n\t\tconst result: Array<Subsonic.Bookmark> = [];\n\t\tbookmarks.forEach(bookmark => {\n\t\t\tconst entry = childs.find(child => child.id === bookmark.destID);\n\t\t\tconst bookmarkuser = users.find(u => u.id === bookmark.userID);\n\t\t\tif (entry && bookmarkuser) {\n\t\t\t\tresult.push(FORMAT.packBookmark(bookmark, bookmarkuser ? bookmarkuser.name : '', entry));\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate async preparePlaylist(playlist: Playlist, user: User): Promise<Subsonic.PlaylistWithSongs> {\n\t\tconst tracks = await this.engine.store.trackStore.byIds(playlist.trackIDs);\n\t\tconst states = await this.engine.stateService.findOrCreateMany(playlist.trackIDs || [], user.id, DBObjectType.track);\n\t\treturn FORMAT.packPlaylistWithSongs(playlist, tracks, states);\n\t}\n\n\tprivate async prepareEpisodes(episodes: Array<Episode>, user: User): Promise<Array<Subsonic.PodcastEpisode>> {\n\t\tconst states = await this.engine.stateService.findOrCreateMany(episodes.map(episode => episode.id), user.id, DBObjectType.episode);\n\t\treturn episodes.map(episode => {\n\t\t\treturn FORMAT.packPodcastEpisode(episode, states[episode.id], (this.engine.episodeService.isDownloading(episode.id) ? PodcastStatus.downloading : episode.status));\n\t\t});\n\t}\n\n\tprivate async collectStateChangeObjects(req: ApiOptions<SubsonicParameters.State>): Promise<{ [type: string]: Array<DBObject> }> {\n\t\tconst typesObjs: { [type: string]: Array<DBObject> } = {};\n\t\tif (req.query.id) {\n\t\t\tconst ids = Array.isArray(req.query.id) ? req.query.id : [req.query.id];\n\t\t\tconst list = await this.engine.store.findMultiInAll(ids);\n\t\t\tlist.forEach(item => {\n\t\t\t\ttypesObjs[item.type] = typesObjs[item.type] || [];\n\t\t\t\ttypesObjs[item.type].push(item);\n\t\t\t});\n\t\t}\n\t\tif (req.query.albumId) {\n\t\t\tconst ids = Array.isArray(req.query.albumId) ? req.query.albumId : [req.query.albumId];\n\t\t\tconst list = await this.engine.store.albumStore.byIds(ids);\n\t\t\ttypesObjs[DBObjectType.album] = (typesObjs[DBObjectType.album] || []).concat(list);\n\t\t}\n\t\tif (req.query.artistId) {\n\t\t\tconst ids = Array.isArray(req.query.artistId) ? req.query.artistId : [req.query.artistId];\n\t\t\tconst list = await this.engine.store.artistStore.byIds(ids);\n\t\t\ttypesObjs[DBObjectType.artist] = (typesObjs[DBObjectType.artist] || []).concat(list);\n\t\t}\n\t\treturn typesObjs;\n\t}\n\n\t/* api functions */\n\n\tasync ping(req: ApiOptions<{}>): Promise<void> {\n\t\t/*\n\t\t ping\n\n\t\t http://your-server/rest/ping.view\n\t\t Since 1.0.0\n\n\t\t Used to test connectivity with the server. Takes no extra parameters.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\treturn;\n\t}\n\n\tasync getLicense(req: ApiOptions<{}>): Promise<{ license: Subsonic.License }> {\n\t\t/*\n\t\t getLicense\n\n\t\t http://your-server/rest/getLicense.view\n\t\t Since 1.0.0\n\n\t\t Get details about the software license. Takes no extra parameters. Please note that access to the REST API requires that the server has a valid license (after a 30-day trial period). To get a license key you must upgrade to Subsonic Premium.\n\n\t\t Returns a <subsonic-response> element with a nested <license> element on success.\n\t\t */\n\t\treturn {license: {valid: true, email: 'dummy', licenseExpires: '', trialExpires: ''}};\n\t}\n\n\tasync getMusicDirectory(req: ApiOptions<SubsonicParameters.ID>): Promise<{ directory: Subsonic.Directory }> {\n\t\t/*\n\t\t getMusicDirectory\n\n\t\t http://your-server/rest/getMusicDirectory.view\n\t\t Since 1.0.0\n\n\t\t Returns a listing of all files in a music directory. Typically used to get list of albums for an artist, or list of songs for an album.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tA string which uniquely identifies the music folder. Obtained by calls to getIndexes or getMusicDirectory.\n\n\t\t Returns a <subsonic-response> element with a nested <directory> element on success.\n\t\t */\n\t\tconst folder = await this.byID<Folder>(req.query.id, this.engine.store.folderStore);\n\t\tconst tracks = await this.engine.store.trackStore.search({path: folder.path});\n\t\ttracks.sort((a, b) => {\n\t\t\tconst a1 = (a.tag ? a.tag.track : '') || '';\n\t\t\tconst b1 = (b.tag ? b.tag.track : '') || '';\n\t\t\tif (a1 < b1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a1 > b1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t\tconst folders = await this.engine.store.folderStore.search({parentID: folder.id});\n\t\tfolders.sort((a, b) => {\n\t\t\tconst a1 = (a.tag ? a.tag.album : '') || '';\n\t\t\tconst b1 = (b.tag ? b.tag.album : '') || '';\n\t\t\tif (a1 < b1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a1 > b1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\n\t\tlet childs: Array<Subsonic.Child> = [];\n\t\tlet list = await this.prepareFolders(folders, req.user);\n\t\tchilds = childs.concat(list);\n\t\tlist = await this.prepareTracks(tracks, req.user);\n\t\tchilds = childs.concat(list);\n\t\tconst state = await this.engine.stateService.findOrCreate(folder.id, req.user.id, DBObjectType.folder);\n\t\tconst directory = FORMAT.packDirectory(folder, state);\n\t\tdirectory.child = childs;\n\t\treturn {directory};\n\t}\n\n\tasync getIndexes(req: ApiOptions<SubsonicParameters.Indexes>): Promise<{ indexes: Subsonic.Indexes }> {\n\t\t/*\n\t\t getIndexes\n\n\t\t http://your-server/rest/getIndexes.view\n\t\t Since 1.0.0\n\n\t\t Returns an indexed structure of all artists.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t musicFolderId \tNo \t\tIf specified, only return artists in the music folder with the given ID. See getMusicFolders.\n\t\t ifModifiedSince \tNo \t\tIf specified, only return a result if the artist collection has changed since the given time (in milliseconds since 1 Jan 1970).\n\n\t\t Returns a <subsonic-response> element with a nested <indexes> element on success.\n\t\t */\n\n\t\tconst folderIndex = await this.engine.indexService.getFolderIndex(this.engine.ioService.scanning);\n\t\tif (req.query.ifModifiedSince && req.query.ifModifiedSince > 0 && (folderIndex.lastModified <= req.query.ifModifiedSince)) {\n\t\t\tconst empty: any = {};\n\t\t\treturn empty;\n\t\t} else {\n\t\t\tconst index = this.engine.indexService.filterFolderIndex(req.query.musicFolderId ? req.query.musicFolderId.toString() : undefined, folderIndex);\n\t\t\tlet ids: Array<string> = [];\n\t\t\tindex.groups.forEach(entry => {\n\t\t\t\tids = ids.concat(entry.entries.map(e => e.folder.id));\n\t\t\t});\n\t\t\tconst states = await this.engine.stateService.findOrCreateMany(ids, req.user.id, DBObjectType.folder);\n\t\t\treturn {\n\t\t\t\tindexes: {\n\t\t\t\t\tlastModified: index.lastModified,\n\t\t\t\t\tignoredArticles: (this.engine.indexService.indexConfig.ignore || []).join(' '),\n\t\t\t\t\tindex: FORMAT.packFolderIndex(index, states),\n\t\t\t\t\t// shortcut?: Artist[]; use unknown, there is no api to add/remove shortcuts\n\t\t\t\t\t// child?: Child[]; use unknown\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\tasync getArtists(req: ApiOptions<SubsonicParameters.MusicFolderID>): Promise<{ artists: Subsonic.ArtistsID3 }> {\n\t\t/*\n\t\t getArtists\n\n\t\t http://your-server/rest/getArtists.view\n\t\t Since 1.8.0\n\n\t\t Similar to getIndexes, but organizes music according to ID3 tags.\n\n         Parameter \tRequired \tDefault \tComment\n\t\t musicFolderId \tNo \t\tIf specified, only return artists in the music folder with the given ID. See getMusicFolders.\n\n\t\t Returns a <subsonic-response> element with a nested <artists> element on success.\n\t\t */\n\t\tconst artistIndex = await this.engine.indexService.getArtistIndex(this.engine.ioService.scanning);\n\t\tconst index = this.engine.indexService.filterArtistIndex(req.query.musicFolderId ? req.query.musicFolderId.toString() : undefined, artistIndex);\n\t\tlet ids: Array<string> = [];\n\t\tindex.groups.forEach(entry => {\n\t\t\tids = ids.concat(entry.entries.map(e => e.artist.id));\n\t\t});\n\t\tconst states = await this.engine.stateService.findOrCreateMany(ids, req.user.id, DBObjectType.artist);\n\t\treturn {\n\t\t\tartists: {\n\t\t\t\tignoredArticles: (this.engine.indexService.indexConfig.ignore || []).join(' '),\n\t\t\t\tindex: FORMAT.packArtistIndex(index, states)\n\t\t\t}\n\t\t};\n\t}\n\n\tasync getAlbumList(req: ApiOptions<SubsonicParameters.AlbumList>): Promise<{ albumList: Subsonic.AlbumList }> {\n\t\t/*\n\t\t getAlbumList\n\n\t\t http://your-server/rest/getAlbumList.view\n\t\t Since 1.2.0\n\n\t\t Returns a list of random, newest, highest rated etc. albums. Similar to the album lists on the home page of the Subsonic web interface.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t type \tYes \t\tThe list type. Must be one of the following: random, newest, highest, frequent, recent.\n\t\t Since 1.8.0 you can also use alphabeticalByName or alphabeticalByArtist to page through all albums alphabetically, and starred to retrieve starred albums.\n\t\t Since 1.10.1 you can use byYear and byGenre to list albums in a given year range or genre.\n\t\t size \tNo \t10 \tThe number of albums to return. Max 500.\n\t\t offset \tNo \t0 \tThe list offset. Useful if you for example want to page through the list of newest albums.\n\t\t fromYear \tYes (if type is byYear) \t\tThe first year in the range.\n\t\t toYear \tYes (if type is byYear) \t\tThe last year in the range.\n\t\t genre \tYes (if type is byGenre) \t\tThe name of the genre, e.g., \"Rock\".\n\n\t\t Returns a <subsonic-response> element with a nested <albumList> element on success.\n\t\t */\n\t\tconst amount = req.query.size || 20;\n\t\tconst offset = req.query.offset || 0;\n\t\tlet ids: Array<string> = [];\n\t\tlet folders: Array<Folder> = [];\n\t\tswitch (req.query.type) {\n\t\t\tcase 'random':\n\t\t\t\tids = await this.engine.store.folderStore.searchIDs({types: FolderTypesAlbum});\n\t\t\t\tfolders = await this.engine.store.folderStore.byIds(randomItems<string>(ids, amount));\n\t\t\t\tbreak;\n\t\t\tcase 'newest':\n\t\t\t\tfolders = await this.engine.store.folderStore.search({types: FolderTypesAlbum, offset, amount, sorts: [{field: 'created', descending: true}]});\n\t\t\t\tbreak;\n\t\t\tcase 'alphabeticalByArtist':\n\t\t\t\tfolders = await this.engine.store.folderStore.search({types: FolderTypesAlbum, offset, amount, sorts: [{field: 'artist', descending: false}]});\n\t\t\t\tbreak;\n\t\t\tcase 'alphabeticalByName':\n\t\t\t\tfolders = await this.engine.store.folderStore.search({types: FolderTypesAlbum, offset, amount, sorts: [{field: 'album', descending: false}]});\n\t\t\t\tbreak;\n\t\t\tcase 'starred':\n\t\t\t\tids = await this.engine.folderService.getFavedIDs({types: FolderTypesAlbum}, req.user);\n\t\t\t\tfolders = await this.engine.store.folderStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tcase 'frequent':\n\t\t\t\tids = await this.engine.folderService.getFrequentlyPlayedIDs({types: FolderTypesAlbum}, req.user);\n\t\t\t\tfolders = await this.engine.store.folderStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tcase 'recent':\n\t\t\t\tids = await this.engine.folderService.getRecentlyPlayedIDs({types: FolderTypesAlbum}, req.user);\n\t\t\t\tfolders = await this.engine.store.folderStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tcase 'highest':\n\t\t\t\tids = await this.engine.folderService.getHighestRatedIDs({types: FolderTypesAlbum}, req.user);\n\t\t\t\tfolders = await this.engine.store.folderStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tcase 'byGenre':\n\t\t\t\tfolders = await this.engine.store.folderStore.search({types: FolderTypesAlbum, offset, amount, genre: req.query.genre || ''});\n\t\t\t\tbreak;\n\t\t\tcase 'byYear':\n\t\t\t\tfolders = await this.engine.store.folderStore.search({offset, amount, types: FolderTypesAlbum, fromYear: req.query.fromYear, toYear: req.query.toYear});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject({fail: FORMAT.FAIL.PARAMETER, text: 'Unknown Album List Type'});\n\t\t}\n\t\tconst result = await this.prepareFolders(folders, req.user);\n\t\treturn {albumList: {album: result}};\n\t}\n\n\tasync getAlbumList2(req: ApiOptions<SubsonicParameters.AlbumList2>): Promise<{ albumList2: Subsonic.AlbumList2 }> {\n\t\t/*\t getAlbumList2\n\n\t\t http://your-server/rest/getAlbumList2.view\n\t\t Since 1.8.0\n\n\t\t Similar to getAlbumList, but organizes music according to ID3 tags.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t type \tYes \t\tThe list type. Must be one of the following: random, newest, frequent, recent, starred, alphabeticalByName or alphabeticalByArtist. Since 1.10.1 you can use byYear and byGenre to list albums in a given year range or genre.\n\t\t size \tNo \t10 \tThe number of albums to return. Max 500\n\t\t offset \tNo \t0 \tThe list offset. Useful if you for example want to page through the list of newest albums.\n\t\t fromYear \tYes (if type is byYear) \t\tThe first year in the range.\n\t\t toYear \tYes (if type is byYear) \t\tThe last year in the range.\n\t\t genre \tYes (if type is byGenre) \t\tThe name of the genre, e.g., \"Rock\".\n\t\t musicFolderId \tNo \t\t(Since 1.12.0) Only return albums in the music folder with the given ID. See getMusicFolders.\n\n\t\t Returns a <subsonic-response> element with a nested <albumList2> element on success.\n\t\t */\n\n\t\tconst amount = Math.min(req.query.size || 20, 500);\n\t\tconst offset = req.query.offset || 0;\n\t\tconst rootID = req.query.musicFolderId ? req.query.musicFolderId.toString() : undefined;\n\t\tlet albums: Array<Album> = [];\n\t\tlet ids: Array<string> = [];\n\t\tswitch (req.query.type) {\n\t\t\tcase 'random':\n\t\t\t\tids = await this.engine.store.albumStore.searchIDs({rootID});\n\t\t\t\talbums = await this.engine.store.albumStore.byIds(randomItems<string>(ids, amount));\n\t\t\t\tbreak;\n\t\t\tcase 'byGenre':\n\t\t\t\talbums = await this.engine.store.albumStore.search({amount, offset, genre: req.query.genre || '', rootID});\n\t\t\t\tbreak;\n\t\t\tcase 'byYear':\n\t\t\t\talbums = await this.engine.store.albumStore.search({amount, offset, fromYear: req.query.fromYear, toYear: req.query.toYear, rootID});\n\t\t\t\tbreak;\n\t\t\tcase 'newest':\n\t\t\t\talbums = await this.engine.store.albumStore.search({rootID, offset, amount, sorts: [{field: 'created', descending: true}]});\n\t\t\t\tbreak;\n\t\t\tcase 'alphabeticalByArtist':\n\t\t\t\talbums = await this.engine.store.albumStore.search({rootID, offset, amount, sorts: [{field: 'artist', descending: false}]});\n\t\t\t\tbreak;\n\t\t\tcase 'alphabeticalByName':\n\t\t\t\talbums = await this.engine.store.albumStore.search({rootID, offset, amount, sorts: [{field: 'name', descending: false}]});\n\t\t\t\tbreak;\n\t\t\tcase 'starred':\n\t\t\t\tids = await this.engine.albumService.getFavedIDs({rootID}, req.user);\n\t\t\t\talbums = await this.engine.store.albumStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tcase 'frequent':\n\t\t\t\tids = await this.engine.albumService.getFrequentlyPlayedIDs({rootID}, req.user);\n\t\t\t\talbums = await this.engine.store.albumStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tcase 'recent':\n\t\t\t\tids = await this.engine.albumService.getRecentlyPlayedIDs({rootID}, req.user);\n\t\t\t\talbums = await this.engine.store.albumStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tcase 'highest':\n\t\t\t\tids = await this.engine.albumService.getHighestRatedIDs({rootID}, req.user);\n\t\t\t\talbums = await this.engine.store.albumStore.byIds(paginate(ids, amount, offset));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject({fail: FORMAT.FAIL.PARAMETER, text: 'Unknown Album List Type'});\n\t\t}\n\t\tconst result = await this.prepareAlbums(albums, req.user);\n\t\treturn {albumList2: {album: result}};\n\t}\n\n\tasync getCoverArt(req: ApiOptions<SubsonicParameters.CoverArt>): Promise<IApiBinaryResult> {\n\t\t/*\n\t\t getCoverArt\n\n\t\t http://your-server/rest/getCoverArt.view\n\t\t Since 1.0.0\n\n\t\t Returns a cover art image.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe ID of a song, album or artist.\n\t\t size \tNo \t\tIf specified, scale image to this size.\n\n\t\t Returns the cover art image in binary form.\n\t\t */\n\t\tconst o = await this.engine.store.findInAll(req.query.id);\n\t\tif (!o) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t}\n\t\treturn await this.engine.imageService.getObjImage(o, req.query.size);\n\t}\n\n\tasync getAvatar(req: ApiOptions<SubsonicParameters.Username>): Promise<IApiBinaryResult> {\n\t\t/*\n\t\t getAvatar\n\n\t\t http://your-server/rest/getAvatar.view\n\t\t Since 1.8.0\n\n\t\t Returns the avatar (personal image) for a user.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t username \tYes \t\tThe user in question.\n\n\t\t Returns the avatar image in binary form.\n\t\t */\n\t\tconst name = req.query.username;\n\t\tconst user = await this.engine.userService.getByName(name);\n\t\tif (!user) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t}\n\t\treturn await this.engine.imageService.getObjImage(user);\n\t}\n\n\tasync getAlbumInfo(req: ApiOptions<SubsonicParameters.ID>): Promise<{ albumInfo: Subsonic.AlbumInfo }> {\n\t\t/*\n\t\t http://your-server/rest/getAlbumInfo\n\t\t Since 1.14.0\n\n\t\t Returns album notes, image URLs etc, using data from last.fm.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe album or song ID.\n\n\t\t Returns a <subsonic-response> element with a nested <albumInfo> element on success.\n\t\t */\n\t\tconst folder = await this.engine.store.folderStore.byId(req.query.id);\n\t\tif (!folder) {\n\t\t\treturn {albumInfo: {}};\n\t\t}\n\t\tconst info = await this.engine.metaDataService.getFolderInfo(folder);\n\t\tif (!info) {\n\t\t\treturn {albumInfo: {}};\n\t\t}\n\t\treturn {albumInfo: FORMAT.packAlbumInfo(info)};\n\t}\n\n\tasync getAlbumInfo2(req: ApiOptions<SubsonicParameters.ID>): Promise<{ albumInfo: Subsonic.AlbumInfo }> {\n\t\t/*\n\t\t http://your-server/rest/getAlbumInfo2\n\n\t\t Since 1.14.0\n\n\t\tSimilar to getAlbumInfo, but organizes music according to ID3 tags.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe album ID.\n\n\t\tReturns a <subsonic-response> element with a nested <albumInfo> element on success.\n\t\t */\n\t\tconst album = await this.engine.store.albumStore.byId(req.query.id);\n\t\tif (!album) {\n\t\t\treturn {albumInfo: {}};\n\t\t} else {\n\t\t\tconst info = await this.engine.metaDataService.getAlbumInfo(album);\n\t\t\treturn {albumInfo: FORMAT.packAlbumInfo(info)};\n\t\t}\n\t}\n\n\tasync getArtistInfo(req: ApiOptions<SubsonicParameters.ArtistInfo>): Promise<{ artistInfo: Subsonic.ArtistInfo }> {\n\t\t/*\n\t\t http://your-server/rest/getArtistInfo Since 1.11.0\n\n\t\tReturns artist info with biography, image URLs and similar artists, using data from last.fm.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe artist, album or song ID.\n\t\tcount \tNo \t20 \tMax number of similar artists to return.\n\t\tincludeNotPresent \tNo \tfalse \tWhether to return artists that are not present in the media library.\n\n\t\tReturns a <subsonic-response> element with a nested <artistInfo> element on success.\n\t\t */\n\n\t\tlet includeNotPresent = false;\n\t\tif (req.query.includeNotPresent !== undefined) {\n\t\t\tincludeNotPresent = req.query.includeNotPresent;\n\t\t}\n\t\tconst limitCount = req.query.count || 20;\n\t\tconst folder = await this.byID<Folder>(req.query.id, this.engine.store.folderStore);\n\t\tconst artistInfo = await this.engine.metaDataService.getFolderArtistInfo(folder, includeNotPresent, true);\n\t\tif (!artistInfo) {\n\t\t\treturn {artistInfo: {}};\n\t\t}\n\t\tlet similar = artistInfo.similar || [];\n\t\tsimilar = paginate(similar, limitCount, 0);\n\t\tconst folders: Array<Folder> = similar.filter(s => !!s.folder).map(s => <Folder>s.folder);\n\t\tconst children = await this.prepareFolders(folders, req.user);\n\t\tconst artists: Array<Subsonic.Artist> = similar.map(s => {\n\t\t\tlet child: Subsonic.Child | undefined;\n\t\t\tif (s.folder) {\n\t\t\t\tconst f = s.folder;\n\t\t\t\tchild = children.find(c => c.id === f.id);\n\t\t\t}\n\t\t\tif (child) {\n\t\t\t\treturn {\n\t\t\t\t\tid: child.id,\n\t\t\t\t\tname: s.name,\n\t\t\t\t\tstarred: child.starred,\n\t\t\t\t\tuserRating: child.userRating,\n\t\t\t\t\taverageRating: child.averageRating\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tid: '-1', // report an invalid id (as does subsonic/airsonic)\n\t\t\t\tname: s.name\n\t\t\t};\n\t\t});\n\t\treturn {artistInfo: FORMAT.packArtistInfo(artistInfo.info, artists)};\n\t}\n\n\tasync getArtistInfo2(req: ApiOptions<SubsonicParameters.ArtistInfo>): Promise<{ artistInfo2: Subsonic.ArtistInfo2 }> {\n\t\t/*\n\t\t http://your-server/rest/getArtistInfo2\n\t\t Since 1.11.0\n\n\t\tSimilar to getArtistInfo, but organizes music according to ID3 tags.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe artist ID.\n\t\tcount \tNo \t20 \tMax number of similar artists to return.\n\t\tincludeNotPresent \tNo \tfalse \tWhether to return artists that are not present in the media library.\n\n\t\t Returns a <subsonic-response> element with a nested <artistInfo2> element on success.\n\t\t*/\n\n\t\tlet includeNotPresent = false;\n\t\tif (req.query.includeNotPresent !== undefined) {\n\t\t\tincludeNotPresent = req.query.includeNotPresent;\n\t\t}\n\t\tconst artist = await this.engine.store.artistStore.byId(req.query.id);\n\t\tif (!artist) {\n\t\t\treturn {artistInfo2: {}};\n\t\t}\n\t\tconst infos = await this.engine.metaDataService.getArtistInfos(artist, includeNotPresent, true);\n\t\tconst ids = (infos.similar || []).filter(sim => !!sim.artist).map(sim => (<Artist>sim.artist).id);\n\t\tconst states = await this.engine.stateService.findOrCreateMany(ids, req.user.id, DBObjectType.artist);\n\t\tconst result: Array<Subsonic.ArtistID3> = [];\n\t\t(infos.similar || []).forEach(sim => {\n\t\t\tif (sim.artist) {\n\t\t\t\tresult.push(FORMAT.packArtist(sim.artist, states[sim.artist.id]));\n\t\t\t} else if (includeNotPresent) {\n\t\t\t\tresult.push({\n\t\t\t\t\tid: '-1', // report an invalid id (as does subsonic/airsonic)\n\t\t\t\t\tname: sim.name,\n\t\t\t\t\talbumCount: 0\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn {artistInfo2: FORMAT.packArtistInfo2(infos.info, result)};\n\t}\n\n\tasync getTopSongs(req: ApiOptions<SubsonicParameters.TopSongs>): Promise<{ topSongs: Subsonic.TopSongs }> {\n\t\t/*\n\t\t  http://your-server/rest/getTopSongs Since 1.13.0\n\n\t\tReturns top songs for the given artist, using data from last.fm.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tartist \tYes \t\tThe artist name.\n\t\tcount \tNo \t50 \tMax number of songs to return.\n\n\t\tReturns a <subsonic-response> element with a nested <topSongs> element on success.\n\t\t */\n\t\tconst limitCount = req.query.count || 50;\n\t\tconst tracks = await this.engine.metaDataService.getTopTracks(req.query.artist, limitCount);\n\t\tconst childs = await this.prepareTracks(tracks, req.user);\n\t\treturn {topSongs: {song: childs}};\n\t}\n\n\tasync getSimilarSongs(req: ApiOptions<SubsonicParameters.SimilarSongs>): Promise<{ similarSongs: Subsonic.SimilarSongs }> {\n\t\t/*\n\t\t http://your-server/rest/getSimilarSongs Since 1.11.0\n\n\t\tReturns a random collection of songs from the given artist and similar artists, using data from last.fm. Typically used for artist radio features.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe artist, album or song ID.\n\t\tcount \tNo \t50 \tMax number of songs to return.\n\n\t\tReturns a <subsonic-response> element with a nested <similarSongs> element on success.\n\t\t */\n\t\tconst o = await this.engine.store.findInAll(req.query.id);\n\t\tif (!o) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t} else {\n\t\t\tlet tracks: Array<Track> = [];\n\t\t\tswitch (o.type) {\n\t\t\t\tcase DBObjectType.track:\n\t\t\t\t\ttracks = await this.engine.metaDataService.getTrackSimilarTracks(<Track>o);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DBObjectType.folder:\n\t\t\t\t\ttracks = await this.engine.metaDataService.getFolderSimilarTracks(<Folder>o);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DBObjectType.artist:\n\t\t\t\t\ttracks = await this.engine.metaDataService.getArtistSimilarTracks(<Artist>o);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DBObjectType.album:\n\t\t\t\t\ttracks = await this.engine.metaDataService.getAlbumSimilarTracks(<Album>o);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst limit = paginate(tracks, req.query.count || 50, 0);\n\t\t\tconst childs = await this.prepareTracks(limit, req.user);\n\t\t\treturn {similarSongs: FORMAT.packSimilarSongs(childs)};\n\t\t}\n\t}\n\n\tasync getSimilarSongs2(req: ApiOptions<SubsonicParameters.SimilarSongs>): Promise<{ similarSongs2: Subsonic.SimilarSongs2 }> {\n\t\t/*\n\t\t http://your-server/rest/getSimilarSongs2\n\t\t Since 1.11.0\n\n\t\tSimilar to getSimilarSongs, but organizes music according to ID3 tags.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe artist ID.\n\t\tcount \tNo \t50 \tMax number of songs to return.\n\n\t\tReturns a <subsonic-response> element with a nested <similarSongs2> element on success.\n\t\t */\n\t\tconst artist = await this.byID<Artist>(req.query.id, this.engine.store.artistStore);\n\t\tconst tracks = await this.engine.metaDataService.getArtistSimilarTracks(artist);\n\t\tconst limit = paginate(tracks, req.query.count || 50, 0);\n\t\tconst childs = await this.prepareTracks(limit, req.user);\n\t\treturn {similarSongs2: FORMAT.packSimilarSongs2(childs)};\n\t}\n\n\tasync download(req: ApiOptions<SubsonicParameters.ID>): Promise<IApiBinaryResult> {\n\t\t/*\n\t\t download\n\n\t\t http://your-server/rest/download.view\n\t\t Since 1.0.0\n\n\t\t Downloads a given media file. Similar to stream, but this method returns the original media data without transcoding or downsampling.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tA string which uniquely identifies the file to download. Obtained by calls to getMusicDirectory.\n\n\t\t Returns binary data on success, or an XML document on error (in which case the HTTP content type will start with \"text/xml\").\n\t\t */\n\t\tconst o = await this.engine.store.findInAll(req.query.id);\n\t\tif (!o) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t} else {\n\t\t\treturn this.engine.downloadService.getObjDownload(o, undefined, req.user);\n\t\t}\n\t}\n\n\tasync stream(req: ApiOptions<SubsonicParameters.Stream>): Promise<IApiBinaryResult> {\n\t\t/*\n\t\t stream\n\n\t\t http://your-server/rest/stream.view\n\t\t Since 1.0.0\n\n\t\t Streams a given media file.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tA string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory.\n\t\t maxBitRate \tNo \t\t(Since 1.2.0) If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed.\n\t\t format \tNo \t\t(Since 1.6.0) Specifies the preferred target format (e.g., \"mp3\" or \"flv\") in case there are multiple applicable transcodings. Starting with 1.9.0 you can use the special value \"raw\" to disable transcoding.\n\t\t timeOffset \tNo \t\tOnly applicable to video streaming. If specified, start streaming at the given offset (in seconds) into the video. Typically used to implement video skipping.\n\t\t size \tNo \t\t(Since 1.6.0) Only applicable to video streaming. Requested video size specified as WxH, for instance \"640x480\".\n\t\t estimateContentLength \tNo \tfalse \t(Since 1.8.0). If set to \"true\", the Content-Length HTTP header will be set to an estimated value for transcoded or downsampled media.\n\t\t converted \tNo \tfalse \t(Since 1.14.0) Only applicable to video streaming. Subsonic can optimize videos for streaming by converting them to MP4. If a conversion exists for the video in question, then setting this parameter to \"true\" will cause the converted video to be returned instead of the original.\n\n\t\t Returns binary data on success, or an XML document on error (in which case the HTTP content type will start with \"text/xml\").\n\t\t */\n\t\tconst o = await this.engine.store.findInAll(req.query.id);\n\t\tif (!o) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t} else {\n\t\t\tswitch (o.type) {\n\t\t\t\tcase DBObjectType.track:\n\t\t\t\t\tconst res = await this.engine.streamService.streamTrack(<Track>o, req.query.format, req.query.maxBitRate, req.user);\n\t\t\t\t\tthis.engine.nowPlayingService.reportTrack(<Track>o, req.user);\n\t\t\t\t\treturn res;\n\t\t\t\tcase DBObjectType.episode:\n\t\t\t\t\tconst result = await this.engine.streamService.streamEpisode(<Episode>o, req.query.format, req.query.maxBitRate, req.user);\n\t\t\t\t\tthis.engine.nowPlayingService.reportEpisode(<Episode>o, req.user);\n\t\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn Promise.reject(Error('Invalid Object Type for Streaming'));\n\t\t}\n\t}\n\n\tasync getSong(req: ApiOptions<SubsonicParameters.ID>): Promise<{ song: Subsonic.Child }> {\n\t\t/*\n\t\t getSong\n\n\t\t http://your-server/rest/getSong.view\n\t\t Since 1.8.0\n\n\t\t Returns details for a song.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe song ID.\n\n\t\t Returns a <subsonic-response> element with a nested <song> element on success.\n\t\t */\n\t\tconst track = await this.byID<Track>(req.query.id, this.engine.store.trackStore);\n\t\tconst child = await this.prepareTrack(track, req.user);\n\t\treturn {song: child};\n\t}\n\n\tasync getGenres(req: ApiOptions<{}>): Promise<{ genres: Subsonic.Genres }> {\n\t\t/*\n\t\t getGenres\n\n\t\t http://your-server/rest/getGenres.view\n\t\t Since 1.9.0\n\n\t\t Returns all genres.\n\n\t\t Returns a <subsonic-response> element with a nested <genres> element on success.\n\t\t */\n\t\tconst genres = await this.engine.genreService.getGenres();\n\t\tconst list: Array<Subsonic.Genre> = genres.map(genre => FORMAT.packGenre(genre));\n\t\tif (list.length === 0) {\n\t\t\tconst dummy: Subsonic.Genre = {\n\t\t\t\tcontent: '-',\n\t\t\t\tsongCount: 0,\n\t\t\t\tartistCount: 0,\n\t\t\t\talbumCount: 0\n\t\t\t};\n\t\t\tlist.push(dummy);\n\t\t}\n\t\treturn {genres: {genre: list}};\n\t}\n\n\tasync getMusicFolders(req: ApiOptions<{}>): Promise<{ musicFolders: Subsonic.MusicFolders }> {\n\t\t/*\n\t\t getMusicFolders\n\n\t\t http://your-server/rest/getMusicFolders.view\n\t\t Since 1.0.0\n\n\t\t Returns all configured top-level music folders. Takes no extra parameters.\n\n\t\t Returns a <subsonic-response> element with a nested <musicFolders> element on success.\n\t\t */\n\t\tconst list = await this.engine.store.rootStore.all();\n\t\treturn {musicFolders: {musicFolder: list.map(FORMAT.packRoot)}};\n\t}\n\n\tasync getUser(req: ApiOptions<SubsonicParameters.Username>): Promise<{ user: Subsonic.User }> {\n\n\t\t/*\n\t\t getUser\n\n\t\t http://your-server/rest/getUser.view\n\t\t Since 1.3.0\n\n\t\t Get details about a given user, including which authorization roles it has. Can be used to enable/disable certain features in the client, such as jukebox control.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t username \tYes \t\tThe name of the user to retrieve. You can only retrieve your own user unless you have admin privileges.\n\n\t\t Returns a <subsonic-response> element with a nested <user> element on success.\n\t\t */\n\n\t\tif ((!req.query.username) || (req.user.name === req.query.username)) {\n\t\t\treturn {user: FORMAT.packUser(req.user)};\n\t\t} else if (!req.user.roles.adminRole) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.UNAUTH});\n\t\t} else {\n\t\t\tconst u = await this.engine.userService.getByName(req.query.username);\n\t\t\tif (!u) {\n\t\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t\t} else {\n\t\t\t\treturn {user: FORMAT.packUser(u)};\n\t\t\t}\n\t\t}\n\t}\n\n\tasync star(req: ApiOptions<SubsonicParameters.State>): Promise<void> {\n\t\t/*\n\t\t http://your-server/rest/star.view\n\t\t Since 1.8.0\n\n\t\t Attaches a star to a song, album or artist.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tNo \t\tThe ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.\n\t\t albumId \tNo \t\tThe ID of an album to star. Use this rather than id if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.\n\t\t artistId \tNo \t\tThe ID of an artist to star. Use this rather than id if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst typesObjs = await this.collectStateChangeObjects(req);\n\t\tfor (const key of Object.keys(typesObjs)) {\n\t\t\tconst type: DBObjectType = parseInt(key, 10);\n\t\t\tfor (const item of typesObjs[type]) {\n\t\t\t\tawait this.engine.stateService.fav(item.id, type, req.user.id, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync unstar(req: ApiOptions<SubsonicParameters.State>): Promise<void> {\n\t\t/*\n\t\t http://your-server/rest/unstar.view\n\t\t Since 1.8.0\n\n\t\t Removes the star from a song, album or artist.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tNo \t\tThe ID of the file (song) or folder (album/artist) to unstar. Multiple parameters allowed.\n\t\t albumId \tNo \t\tThe ID of an album to unstar. Use this rather than id if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.\n\t\t artistId \tNo \t\tThe ID of an artist to unstar. Use this rather than id if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst typesObjs = await this.collectStateChangeObjects(req);\n\t\tfor (const key of Object.keys(typesObjs)) {\n\t\t\tconst type: DBObjectType = parseInt(key, 10);\n\t\t\tfor (const item of typesObjs[type]) {\n\t\t\t\tawait this.engine.stateService.fav(item.id, type, req.user.id, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync setRating(req: ApiOptions<SubsonicParameters.Rate>): Promise<void> {\n\t\t/*\n\t\t setRating\n\n\t\t http://your-server/rest/setRating.view\n\t\t Since 1.6.0\n\n\t\t Sets the rating for a music file.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tA string which uniquely identifies the file (song) or folder (album/artist) to rate.\n\t\t rating \tYes \t\tThe rating between 1 and 5 (inclusive), or 0 to remove the rating.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tif ((req.query.rating < 0) || (req.query.rating > 5)) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.PARAMETER});\n\t\t}\n\t\tconst typesObjs = await this.collectStateChangeObjects(req);\n\t\tfor (const key of Object.keys(typesObjs)) {\n\t\t\tconst type: DBObjectType = parseInt(key, 10);\n\t\t\tfor (const item of typesObjs[type]) {\n\t\t\t\tawait this.engine.stateService.rate(item.id, type, req.user.id, req.query.rating);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getNowPlaying(req: ApiOptions<{}>): Promise<{ nowPlaying: Subsonic.NowPlaying }> {\n\t\t/*\n\t\t getNowPlaying\n\n\t\t http://your-server/rest/getNowPlaying.view\n\t\t Since 1.0.0\n\n\t\t Returns what is currently being played by all users. Takes no extra parameters.\n\n\t\t Returns a <subsonic-response> element with a nested <nowPlaying> element on success.\n\t\t */\n\t\tconst list = await this.engine.nowPlayingService.getNowPlaying();\n\t\tconst result: Array<Subsonic.NowPlayingEntry> = [];\n\t\tfor (const entry of list) {\n\t\t\tconst state = await this.engine.stateService.findOrCreate(entry.obj.id, req.user.id, entry.obj.type);\n\t\t\tresult.push(FORMAT.packNowPlaying(entry, state));\n\t\t}\n\t\treturn {nowPlaying: {entry: result}};\n\t}\n\n\tasync getUsers(req: ApiOptions<{}>): Promise<{ users: Subsonic.Users }> {\n\t\t/* getUsers\n\n\t\t http://your-server/rest/getUsers.view\n\t\t Since 1.8.0\n\n\t\t Get details about all users, including which authorization roles they have. Only users with admin privileges are allowed to req this method.\n\n\t\t Returns a <subsonic-response> element with a nested <users> element on success.\n\t\t */\n\t\tconst users = await this.engine.store.userStore.all();\n\t\treturn {users: {user: users.map(FORMAT.packUser)}};\n\t}\n\n\tasync updateUser(req: ApiOptions<SubsonicParameters.UpdateUser>): Promise<void> {\n\t\t/*\n\t\t updateUser\n\n\t\t http://your-server/rest/updateUser.view\n\t\t Since 1.10.1\n\n\t\t Modifies an existing Subsonic user, using the following parameters:\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t username \tYes \t\tThe name of the user.\n\t\t password \tNo \t\tThe password of the user, either in clear text of hex-encoded (see above).\n\t\t email \tNo \t\tThe email address of the user.\n\t\t ldapAuthenticated \tNo \t\tWhether the user is authenicated in LDAP.\n\t\t adminRole \tNo \t\tWhether the user is administrator.\n\t\t settingsRole \tNo \t\tWhether the user is allowed to change settings and password.\n\t\t streamRole \tNo \t\tWhether the user is allowed to play files.\n\t\t jukeboxRole \tNo \t\tWhether the user is allowed to play files in jukebox mode.\n\t\t downloadRole \tNo \t\tWhether the user is allowed to download files.\n\t\t uploadRole \tNo \t\tWhether the user is allowed to upload files.\n\t\t coverArtRole \tNo \t\tWhether the user is allowed to change cover art and tags.\n\t\t commentRole \tNo \t\tWhether the user is allowed to create and edit comments and ratings.\n\t\t podcastRole \tNo \t\tWhether the user is allowed to administrate Podcasts.\n\t\t shareRole \tNo \t\tWhether the user is allowed to share files with anyone.\n\t\t videoConversionRole \tNo \tfalse \t(Since 1.15.0) Whether the user is allowed to start video conversions.\n\t\t musicFolderId \tNo \t\t(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder.\n\t\t maxBitRate \tNo \t\t(Since 1.13.0) The maximum bit rate (in Kbps) for the user. Audio streams of higher bit rates are automatically downsampled to this bit rate. Legal values: 0 (no limit), 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320.\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\n\t\tconst getBool = (b: boolean | undefined, def: boolean): boolean => {\n\t\t\treturn b === undefined ? def : b;\n\t\t};\n\t\tconst username = req.query.username;\n\t\tconst u = await this.engine.userService.getByName(username);\n\t\tif (!u) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t}\n\t\tif (req.query.email) {\n\t\t\tu.email = req.query.email;\n\t\t}\n\t\tif (req.query.password) {\n\t\t\tu.pass = req.query.password;\n\t\t}\n\t\tif (req.query.musicFolderId) {\n\t\t\tu.allowedfolder = (Array.isArray(req.query.musicFolderId) ? req.query.musicFolderId : [req.query.musicFolderId]).map(id => id.toString());\n\t\t}\n\t\tif (req.query.maxBitRate !== undefined) {\n\t\t\tu.maxBitRate = req.query.maxBitRate || 0;\n\t\t}\n\t\tif (req.query.username) {\n\t\t\tu.name = req.query.username;\n\t\t}\n\t\t// u.ldapAuthenticated = getBool(req.query.ldapAuthenticated, u.ldapAuthenticated);\n\t\t// u.scrobblingEnabled = getBool(req.query.scrobblingEnabled, u.scrobblingEnabled);\n\t\tu.roles.adminRole = getBool(req.query.adminRole, u.roles.adminRole);\n\t\t// u.roles.settingsRole = getBool(req.query.settingsRole, u.roles.settingsRole);\n\t\tu.roles.streamRole = getBool(req.query.streamRole, u.roles.streamRole);\n\t\t// u.roles.jukeboxRole = getBool(req.query.jukeboxRole, u.roles.jukeboxRole);\n\t\t// u.roles.downloadRole = getBool(req.query.downloadRole, u.roles.downloadRole);\n\t\tu.roles.uploadRole = getBool(req.query.uploadRole, u.roles.uploadRole);\n\t\t// u.roles.coverArtRole = getBool(req.query.coverArtRole, u.roles.coverArtRole);\n\t\t// u.roles.commentRole = getBool(req.query.commentRole, u.roles.commentRole);\n\t\tu.roles.podcastRole = getBool(req.query.podcastRole, u.roles.podcastRole);\n\t\t// u.roles.playlistRole = getBool(req.query.playlistRole, u.roles.playlistRole);\n\t\t// u.roles.shareRole = getBool(req.query.shareRole, u.roles.shareRole);\n\t\t// u.roles.videoConversionRole = getBool(req.query.videoConversionRole, u.roles.videoConversionRole);\n\t\tawait this.engine.userService.update(u);\n\t}\n\n\tasync createUser(req: ApiOptions<SubsonicParameters.UpdateUser>): Promise<void> {\n\t\t/*\n\t\t createUser\n\n\t\t http://your-server/rest/createUser.view\n\t\t Since 1.1.0\n\n\t\t Creates a new Subsonic user, using the following parameters:\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t username \tYes \t\tThe name of the new user.\n\t\t password \tYes \t\tThe password of the new user, either in clear text of hex-encoded (see above).\n\t\t email \tYes \t\tThe email address of the new user.\n\t\t ldapAuthenticated \tNo \tfalse \tWhether the user is authenicated in LDAP.\n\t\t adminRole \tNo \tfalse \tWhether the user is administrator.\n\t\t settingsRole \tNo \ttrue \tWhether the user is allowed to change settings and password.\n\t\t streamRole \tNo \ttrue \tWhether the user is allowed to play files.\n\t\t jukeboxRole \tNo \tfalse \tWhether the user is allowed to play files in jukebox mode.\n\t\t downloadRole \tNo \tfalse \tWhether the user is allowed to download files.\n\t\t uploadRole \tNo \tfalse \tWhether the user is allowed to upload files.\n\t\t playlistRole \tNo \tfalse \tWhether the user is allowed to create and delete playlists. Since 1.8.0, changing this role has no effect.\n\t\t coverArtRole \tNo \tfalse \tWhether the user is allowed to change cover art and tags.\n\t\t commentRole \tNo \tfalse \tWhether the user is allowed to create and edit comments and ratings.\n\t\t podcastRole \tNo \tfalse \tWhether the user is allowed to administrate Podcasts.\n\t\t shareRole \tNo \tfalse \t(Since 1.8.0)Whether the user is allowed to share files with anyone.\n\t\t videoConversionRole \tNo \tfalse \t(Since 1.15.0) Whether the user is allowed to start video conversions.\n\t\t musicFolderId \tNo \tAll folders \t(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\n\t\tif (\n\t\t\t(!req.query.username) || (req.query.username.length === 0) ||\n\t\t\t(!req.query.password) || (req.query.password.length === 0) ||\n\t\t\t(!req.query.email) || (req.query.email.length === 0)\n\t\t) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.PARAMETER});\n\t\t}\n\t\tconst getBool = (b: boolean | undefined, def: boolean): boolean => {\n\t\t\treturn b === undefined ? def : b;\n\t\t};\n\t\tconst u: User = {\n\t\t\tid: '',\n\t\t\tname: req.query.username || '',\n\t\t\tpass: req.query.password || 'invalid',\n\t\t\temail: req.query.email || 'invalid',\n\t\t\tavatarLastChanged: Date.now(),\n\t\t\tcreated: Date.now(),\n\t\t\ttype: DBObjectType.user,\n\t\t\t// ldapAuthenticated: getBool(req.query.ldapAuthenticated, false),\n\t\t\tscrobblingEnabled: false, // getBool(req.query.scrobblingEnabled, false),\n\t\t\troles: {\n\t\t\t\tadminRole: getBool(req.query.adminRole, false),\n\t\t\t\t// settingsRole: getBool(req.query.settingsRole, true),\n\t\t\t\tstreamRole: getBool(req.query.streamRole, true),\n\t\t\t\t// jukeboxRole: getBool(req.query.jukeboxRole, false),\n\t\t\t\t// downloadRole: getBool(req.query.downloadRole, false),\n\t\t\t\tuploadRole: getBool(req.query.uploadRole, false),\n\t\t\t\t// playlistRole: getBool(req.query.playlistRole, false),\n\t\t\t\t// coverArtRole: getBool(req.query.coverArtRole, false),\n\t\t\t\t// commentRole: getBool(req.query.commentRole, false),\n\t\t\t\tpodcastRole: getBool(req.query.podcastRole, false),\n\t\t\t\t// shareRole: getBool(req.query.shareRole, false),\n\t\t\t\t// videoConversionRole: getBool(req.query.videoConversionRole, false)\n\t\t\t}\n\t\t};\n\t\tif (u.pass.indexOf('enc:') === 0) {\n\t\t\tu.pass = hexDecode(u.pass.slice(4)).trim();\n\t\t}\n\t\tawait this.engine.userService.create(u);\n\t}\n\n\tasync deleteUser(req: ApiOptions<SubsonicParameters.Username>): Promise<void> {\n\t\t/*\n\t\t deleteUser\n\n\t\t http://your-server/rest/deleteUser.view\n\t\t Since 1.3.0\n\n\t\t Deletes an existing Subsonic user, using the following parameters:\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t username \tYes \t\tThe name of the user to delete.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst u = await this.engine.userService.getByName(req.query.username);\n\t\tif (!u) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t}\n\t\tawait this.engine.userService.remove(u);\n\t}\n\n\tasync changePassword(req: ApiOptions<SubsonicParameters.ChangePassword>): Promise<void> {\n\t\t/*\n\t\t changePassword\n\n\t\t http://your-server/rest/changePassword.view\n\t\t Since 1.1.0\n\n\t\t Changes the password of an existing Subsonic user, using the following parameters. You can only change your own password unless you have admin privileges.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t username \tYes \t\tThe name of the user which should change its password.\n\t\t password \tYes \t\tThe new password of the new user, either in clear text of hex-encoded (see above).\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tif (\n\t\t\t(!req.query.username) ||\n\t\t\t(!req.query.password) ||\n\t\t\t(req.query.password.length === 0)\n\t\t) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.PARAMETER});\n\t\t}\n\t\tif (req.query.username !== req.user.name) {\n\t\t\tif (!req.user.roles.adminRole) {\n\t\t\t\treturn Promise.reject({fail: FORMAT.FAIL.UNAUTH});\n\t\t\t}\n\t\t}\n\t\tconst u = await this.engine.userService.getByName(req.query.username);\n\t\tif (!u) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t}\n\t\tu.pass = req.query.password;\n\t\tif (u.pass.indexOf('enc:') === 0) {\n\t\t\tu.pass = hexDecode(u.pass.slice(4)).trim();\n\t\t}\n\t\tawait this.engine.userService.update(u);\n\t}\n\n\tasync getChatMessages(req: ApiOptions<SubsonicParameters.ChatMessages>): Promise<{ chatMessages: Subsonic.ChatMessages }> {\n\t\t/*\n\t\t getChatMessages\n\n\t\t http://your-server/rest/getChatMessages.view\n\t\t Since 1.2.0\n\n\t\t Returns the current visible (non-expired) chat messages.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t since \tNo \t\tOnly return messages newer than this time (in millis since Jan 1 1970).\n\n\t\t Returns a <subsonic-response> element with a nested <chatMessages> element on success.\n\t\t */\n\t\tconst messages = await this.engine.chatService.get(req.query.since);\n\t\treturn {chatMessages: {chatMessage: messages.map(msg => FORMAT.packChatMessage(msg))}};\n\t}\n\n\tasync addChatMessage(req: ApiOptions<SubsonicParameters.ChatMessage>): Promise<void> {\n\t\t/*\n\t\t addChatMessage\n\n\t\t http://your-server/rest/addChatMessage.view\n\t\t Since 1.2.0\n\n\t\t Adds a message to the chat log.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t message \tYes \t\tThe chat message.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tawait this.engine.chatService.add(req.query.message, req.user);\n\t}\n\n\tasync getPlaylists(req: ApiOptions<SubsonicParameters.Playlists>): Promise<{ playlists: Subsonic.Playlists }> {\n\t\t/*\n\t\t getPlaylists\n\n\t\t http://your-server/rest/getPlaylists.view\n\t\t Since 1.0.0\n\n\t\t Returns all playlists a user is allowed to play.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t username \tno \t\t(Since 1.8.0) If specified, return playlists for this user rather than for the authenticated user. The authenticated user must have admin role if this parameter is used.\n\n\t\t Returns a <subsonic-response> element with a nested <playlists> element on success.\n\t\t */\n\t\tlet userID = req.user.id;\n\t\tif ((req.query.username) && (req.query.username !== req.user.name)) {\n\t\t\tif (!req.user.roles.adminRole) {\n\t\t\t\treturn Promise.reject({fail: FORMAT.FAIL.UNAUTH});\n\t\t\t}\n\t\t\tconst u = await this.engine.userService.getByName(req.query.username);\n\t\t\tif (!u) {\n\t\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t\t}\n\t\t\tuserID = u.id;\n\t\t}\n\t\tconst list = await this.engine.store.playlistStore.search({userID, isPublic: req.user.id !== userID});\n\t\tconst playlists: Subsonic.Playlists = {};\n\t\tconst result: Array<Subsonic.Playlist> = [];\n\t\tfor (const playlist of list) {\n\t\t\tconst plist = await this.preparePlaylist(playlist, req.user);\n\t\t\tresult.push(plist);\n\t\t}\n\t\tplaylists.playlist = result;\n\t\treturn {playlists};\n\t}\n\n\tasync getPlaylist(req: ApiOptions<SubsonicParameters.ID>): Promise<{ playlist: Subsonic.Playlist }> {\n\t\t/*\n\t\t getPlaylist\n\n\t\t http://your-server/rest/getPlaylist.view\n\t\t Since 1.0.0\n\n\t\t Returns a listing of files in a saved playlist.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tyes \t\tID of the playlist to return, as obtained by getPlaylists.\n\n\t\t Returns a <subsonic-response> element with a nested <playlist> element on success.\n\t\t */\n\n\t\tconst playlist = await this.byID<Playlist>(req.query.id, this.engine.store.playlistStore);\n\t\tif (playlist.userID !== req.user.id) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.UNAUTH});\n\t\t}\n\t\tconst result = await this.preparePlaylist(playlist, req.user);\n\t\treturn {playlist: result};\n\t}\n\n\tasync createPlaylist(req: ApiOptions<SubsonicParameters.PlaylistCreate>): Promise<{ playlist: Subsonic.PlaylistWithSongs }> {\n\t\t/*\n\t\t createPlaylist\n\n\t\t http://your-server/rest/createPlaylist.view\n\t\t Since 1.2.0\n\n\t\t Creates (or updates) a playlist.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t playlistId \tYes (if updating) \t\tThe playlist ID.\n\t\t name \tYes (if creating) \t\tThe human-readable name of the playlist.\n\t\t songId \tYes \t\tID of a song in the playlist. Use one songId parameter for each song in the playlist.\n\n\t\t Since 1.14.0 the newly created/updated playlist is returned. In earlier versions an empty <subsonic-response> element is returned.\n\t\t */\n\t\tlet playlist: Playlist | undefined;\n\t\tif (!req.query.playlistId && !req.query.name) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.PARAMETER});\n\t\t} else if (req.query.playlistId) {\n\t\t\tconst updateQuery: SubsonicParameters.PlaylistUpdate = {\n\t\t\t\tplaylistId: req.query.playlistId,\n\t\t\t\tname: req.query.name,\n\t\t\t\tsongIdToAdd: req.query.songId\n\t\t\t};\n\t\t\t(<any>req).query = updateQuery;\n\t\t\tawait this.updatePlaylist(<ApiOptions<SubsonicParameters.PlaylistUpdate>>req);\n\t\t\tplaylist = await this.byID<Playlist>(req.query.playlistId, this.engine.store.playlistStore);\n\t\t} else if (req.query.name) {\n\t\t\tplaylist = await this.engine.playlistService.create(req.query.name, undefined, false, req.user.id, req.query.songId !== undefined ? (Array.isArray(req.query.songId) ? req.query.songId : [req.query.songId]) : []);\n\t\t}\n\t\tif (!playlist) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t}\n\t\tconst tracks = await this.engine.store.trackStore.byIds(playlist.trackIDs);\n\t\tconst states = await this.engine.stateService.findOrCreateMany(playlist.trackIDs, req.user.id, DBObjectType.track);\n\t\treturn {playlist: FORMAT.packPlaylistWithSongs(playlist, tracks, states)};\n\t}\n\n\tasync updatePlaylist(req: ApiOptions<SubsonicParameters.PlaylistUpdate>): Promise<void> {\n\t\t/*\n\t\t updatePlaylist\n\n\t\t http://your-server/rest/updatePlaylist.view\n\t\t Since 1.8.0\n\n\t\t Updates a playlist. Only the owner of a playlist is allowed to update it.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t playlistId \tYes \t\tThe playlist ID.\n\t\t name \tNo \t\tThe human-readable name of the playlist.\n\t\t comment \tNo \t\tThe playlist comment.\n\t\t public \tNo \t\ttrue if the playlist should be visible to all users, false otherwise.\n\t\t songIdToAdd \tNo \t\tAdd this song with this ID to the playlist. Multiple parameters allowed.\n\t\t songIndexToRemove \tNo \t\tRemove the song at this position in the playlist. Multiple parameters allowed.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst playlist = await this.byID<Playlist>(req.query.playlistId, this.engine.store.playlistStore);\n\t\tif (req.user.id !== playlist.userID) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.UNAUTH});\n\t\t}\n\n\t\tconst removetracks = req.query.songIndexToRemove !== undefined ? (Array.isArray(req.query.songIndexToRemove) ? req.query.songIndexToRemove : [req.query.songIndexToRemove]) : [];\n\t\tplaylist.trackIDs = playlist.trackIDs.filter((id, index) => removetracks.indexOf(index) < 0);\n\n\t\tconst tracks: Array<string> = playlist.trackIDs;\n\t\tif (req.query.songIdToAdd) {\n\t\t\tconst songadd = req.query.songIdToAdd !== undefined ? (Array.isArray(req.query.songIdToAdd) ? req.query.songIdToAdd : [req.query.songIdToAdd]) : [];\n\t\t\tplaylist.trackIDs = tracks.concat(songadd);\n\t\t}\n\t\tplaylist.name = req.query.name || playlist.name;\n\t\tplaylist.comment = req.query.comment || playlist.comment;\n\t\tplaylist.isPublic = req.query.public !== undefined ? req.query.public : playlist.isPublic;\n\t\tplaylist.changed = Date.now();\n\t\tawait this.engine.playlistService.update(playlist);\n\t}\n\n\tasync deletePlaylist(req: ApiOptions<SubsonicParameters.ID>): Promise<void> {\n\t\t/*\n\t\t deletePlaylist\n\n\t\t http://your-server/rest/deletePlaylist.view\n\t\t Since 1.2.0\n\n\t\t Deletes a saved playlist.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tyes \t\tID of the playlist to delete, as obtained by getPlaylists.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst playlist = await this.byID<Playlist>(req.query.id, this.engine.store.playlistStore);\n\t\tif (playlist.userID !== req.user.id) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.UNAUTH});\n\t\t}\n\t\tawait this.engine.playlistService.remove(playlist);\n\t}\n\n\tasync getStarred(req: ApiOptions<SubsonicParameters.MusicFolderID>): Promise<{ starred: Subsonic.Starred }> {\n\t\t/*\n\t\t getStarred\n\n\t\t http://your-server/rest/getStarred.view\n\t\t Since 1.8.0\n\n\t\t Returns starred songs, albums and artists.\n\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t musicFolderId \tNo \t\t(Since 1.12.0) Only return results from the music folder with the given ID. See getMusicFolders.\n\n\t\t Returns a <subsonic-response> element with a nested <starred> element on success.\n\t\t */\n\t\tconst rootID = (req.query.musicFolderId !== undefined ? req.query.musicFolderId.toString() : undefined);\n\t\tconst starred: Subsonic.Starred = {};\n\t\tconst trackIDs = await this.engine.trackService.getFavedIDs({rootID}, req.user);\n\t\tif (trackIDs.length > 0) {\n\t\t\tconst tracks = await this.engine.store.trackStore.byIds(trackIDs);\n\t\t\tstarred.song = await this.prepareTracks(tracks, req.user);\n\t\t}\n\t\tconst artistFolderIDs = await this.engine.folderService.getFavedIDs({types: [FolderType.artist], rootID}, req.user);\n\t\tif (artistFolderIDs.length > 0) {\n\t\t\tconst folders = await this.engine.store.folderStore.byIds(artistFolderIDs);\n\t\t\tstarred.artist = await this.prepareFolderArtists(folders, req.user);\n\t\t}\n\t\tconst albumFolderIDs = await this.engine.folderService.getFavedIDs({types: FolderTypesAlbum, rootID}, req.user);\n\t\tif (albumFolderIDs.length > 0) {\n\t\t\tconst folders = await this.engine.store.folderStore.byIds(albumFolderIDs);\n\t\t\tstarred.album = await this.prepareFolders(folders, req.user);\n\t\t}\n\t\treturn {starred};\n\t}\n\n\tasync getStarred2(req: ApiOptions<SubsonicParameters.MusicFolderID>): Promise<{ starred2: Subsonic.Starred2 }> {\n\t\t/*\n\t\t getStarred2\n\n\t\t http://your-server/rest/getStarred2.view\n\t\t Since 1.8.0\n\n\t\t Similar to getStarred, but organizes music according to ID3 tags.\n\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t musicFolderId \tNo \t\t(Since 1.12.0) Only return results from the music folder with the given ID. See getMusicFolders\n\n\t\t Returns a <subsonic-response> element with a nested <starred2> element on success.\n\n\t\t */\n\t\tconst rootID = (req.query.musicFolderId !== undefined ? req.query.musicFolderId.toString() : undefined);\n\t\tconst starred2: Subsonic.Starred2 = {};\n\t\tconst trackIDs = await this.engine.trackService.getFavedIDs({rootID}, req.user);\n\t\tif (trackIDs.length > 0) {\n\t\t\tconst tracks = await this.engine.store.trackStore.byIds(trackIDs);\n\t\t\tstarred2.song = await this.prepareTracks(tracks, req.user);\n\t\t}\n\t\tconst albumIDs = await this.engine.albumService.getFavedIDs({rootID}, req.user);\n\t\tif (albumIDs.length > 0) {\n\t\t\tconst albums = await this.engine.store.albumStore.byIds(albumIDs);\n\t\t\tstarred2.album = await this.prepareAlbums(albums, req.user);\n\t\t}\n\t\tconst artistIDs = await this.engine.artistService.getFavedIDs({rootID}, req.user);\n\t\tif (artistIDs.length > 0) {\n\t\t\tconst artists = await this.engine.store.artistStore.byIds(artistIDs);\n\t\t\tstarred2.artist = await this.prepareArtists(artists, req.user);\n\t\t}\n\t\treturn {starred2};\n\t}\n\n\tasync refreshPodcasts(req: ApiOptions<{}>): Promise<void> {\n\t\t/*\n\t\t refreshPodcasts\n\n\t\t http://your-server/rest/refreshPodcasts.view\n\t\t Since 1.9.0\n\n\t\t Requests the server to check for new Podcast episodes. Note: The user must be authorized for Podcast administration (see Settings > Users > user is allowed to administrate Podcasts).\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tthis.engine.podcastService.refreshPodcasts(); // do not wait\n\t}\n\n\tasync createPodcastChannel(req: ApiOptions<SubsonicParameters.PodcastChannel>): Promise<void> {\n\t\t/*\n\t\t createPodcastChannel\n\n\t\t http://your-server/rest/createPodcastChannel.view\n\t\t Since 1.9.0\n\n\t\t Adds a new Podcast channel. Note: The user must be authorized for Podcast administration (see Settings > Users > user is allowed to administrate Podcasts).\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t url \tYes \t\tThe URL of the Podcast to add.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tawait this.engine.podcastService.create(req.query.url);\n\t}\n\n\tasync getPodcasts(req: ApiOptions<SubsonicParameters.PodcastChannels>): Promise<{ podcasts: Subsonic.Podcasts }> {\n\t\t/*\n\t\t getPodcasts\n\n\t\t http://your-server/rest/getPodcasts.view\n\t\t Since 1.6.0\n\n\t\t Returns all Podcast channels the server subscribes to, and (optionally) their episodes.\n\t\t This method can also be used to return details for only one channel - refer to the id parameter.\n\t\t A typical use case for this method would be to first retrieve all channels without episodes,\n\t\t and then retrieve all episodes for the single channel the user selects.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t includeEpisodes \tNo \ttrue \t(Since 1.9.0) Whether to include Podcast episodes in the returned result.\n\t\t id \tNo \t\t(Since 1.9.0) If specified, only return the Podcast channel with this ID.\n\n\t\t Returns a <subsonic-response> element with a nested <podcasts> element on success.\n\t\t */\n\n\t\tlet includeEpisodes = false;\n\t\tif (req.query.includeEpisodes !== undefined) {\n\t\t\tincludeEpisodes = req.query.includeEpisodes;\n\t\t}\n\t\tlet podcastList: Array<Podcast> = [];\n\t\tif (req.query.id) {\n\t\t\tconst podcast = await this.engine.store.podcastStore.byId(req.query.id);\n\t\t\tif (podcast) {\n\t\t\t\tpodcastList.push(podcast);\n\t\t\t} else {\n\t\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t\t}\n\t\t} else {\n\t\t\tpodcastList = await this.engine.store.podcastStore.all();\n\t\t}\n\t\tconst channel = podcastList.map(podcast => FORMAT.packPodcast(podcast, (this.engine.podcastService.isDownloading(podcast.id) ? PodcastStatus.downloading : undefined)));\n\t\tconst podcasts: Subsonic.Podcasts = {channel};\n\t\tif (includeEpisodes) {\n\t\t\tfor (const podcast of channel) {\n\t\t\t\tconst episodes = await this.engine.store.episodeStore.search({podcastID: podcast.id});\n\t\t\t\tpodcast.episode = await this.prepareEpisodes(episodes.sort((a, b) => (b.date || 0) - (a.date || 0)), req.user);\n\t\t\t}\n\t\t}\n\t\treturn {podcasts};\n\t}\n\n\tasync getNewestPodcasts(req: ApiOptions<SubsonicParameters.PodcastEpisodesNewest>): Promise<{ newestPodcasts: Subsonic.NewestPodcasts }> {\n\t\t/*\n\t\t http://your-server/rest/getNewestPodcasts Since 1.13.0\n\n\t\tReturns the most recently published Podcast episodes.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tcount \tNo \t20 \tThe maximum number of episodes to return.\n\n\t\tReturns a <subsonic-response> element with a nested <newestPodcasts> element on success.\n\t\t */\n\t\t// TODO: do this with a limit & sort db request\n\t\tlet episodes = await this.engine.store.episodeStore.all();\n\t\tepisodes = episodes.sort((a, b) => {\n\t\t\treturn (b.date || 0) - (a.date || 0);\n\t\t});\n\t\tconst newestPodcasts: Subsonic.NewestPodcasts = {};\n\t\tnewestPodcasts.episode = await this.prepareEpisodes(paginate(episodes, req.query.count || 20, 0), req.user);\n\t\treturn {newestPodcasts};\n\t}\n\n\tasync byID<T extends DBObject>(id: string, objstore: BaseStore<T, SearchQuery>): Promise<T> {\n\t\tconst item = await objstore.byId(id);\n\t\tif (!item) {\n\t\t\treturn Promise.reject({fail: FORMAT.FAIL.NOTFOUND});\n\t\t}\n\t\treturn item;\n\t}\n\n\tasync deletePodcastChannel(req: ApiOptions<SubsonicParameters.ID>): Promise<void> {\n\t\t/*\n\t\t deletePodcastChannel\n\n\t\t http://your-server/rest/deletePodcastChannel.view\n\t\t Since 1.9.0\n\n\t\t Deletes a Podcast channel. Note: The user must be authorized for Podcast administration (see Settings > Users > user is allowed to administrate Podcasts).\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe ID of the Podcast channel to delete.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst podcast = await this.byID<Podcast>(req.query.id, this.engine.store.podcastStore);\n\t\tawait this.engine.podcastService.remove(podcast);\n\t}\n\n\tasync downloadPodcastEpisode(req: ApiOptions<SubsonicParameters.ID>): Promise<void> {\n\t\t/*\n\t\t downloadPodcastEpisode\n\n\t\t http://your-server/rest/downloadPodcastEpisode.view\n\t\t Since 1.9.0\n\n\t\t Request the server to start downloading a given Podcast episode. Note: The user must be authorized for Podcast administration (see Settings > Users > user is allowed to administrate Podcasts).\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe ID of the Podcast episode to download.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\n\t\tconst episode = await this.byID<Episode>(req.query.id, this.engine.store.episodeStore);\n\t\tif (!episode.path) {\n\t\t\tthis.engine.episodeService.downloadEpisode(episode); // do not wait\n\t\t}\n\t}\n\n\tasync deletePodcastEpisode(req: ApiOptions<SubsonicParameters.ID>): Promise<void> {\n\t\t/*\n\t\t deletePodcastEpisode\n\n\t\t http://your-server/rest/deletePodcastEpisode.view\n\t\t Since 1.9.0\n\n\t\t Deletes a Podcast episode. Note: The user must be authorized for Podcast administration (see Settings > Users > user is allowed to administrate Podcasts).\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe ID of the Podcast episode to delete.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst episode = await this.byID<Episode>(req.query.id, this.engine.store.episodeStore);\n\t\tawait this.engine.episodeService.deleteEpisode(episode);\n\t}\n\n\tasync getBookmarks(req: ApiOptions<{}>): Promise<{ bookmarks: Subsonic.Bookmarks }> {\n\t\t/*\n\t\t getBookmarks\n\n\t\t http://your-server/rest/getBookmarks.view\n\t\t Since 1.9.0\n\n\t\t Returns all bookmarks for this user. A bookmark is a position within a certain media file.\n\n\t\t Returns a <subsonic-response> element with a nested <bookmarks> element on success.\n\t\t */\n\t\tconst bookmarklist = await this.engine.bookmarkService.getAll(req.user.id);\n\t\tconst bookmarks: Subsonic.Bookmarks = {};\n\t\tbookmarks.bookmark = await this.prepareBookmarks(bookmarklist, req.user);\n\t\treturn {bookmarks};\n\t}\n\n\tasync createBookmark(req: ApiOptions<SubsonicParameters.Bookmark>): Promise<void> {\n\t\t/*\n\t\t createBookmark\n\n\t\t http://your-server/rest/createBookmark.view\n\t\t Since 1.9.0\n\n\t\t Creates or updates a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tID of the media file to bookmark. If a bookmark already exists for this file it will be overwritten.\n\t\t position \tYes \t\tThe position (in milliseconds) within the media file.\n\t\t comment \tNo \t\tA user-defined comment.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst track = await this.byID<Track>(req.query.id, this.engine.store.trackStore);\n\t\tawait this.engine.bookmarkService.create(track.id, req.user.id, req.query.position, req.query.comment);\n\t}\n\n\tasync deleteBookmark(req: ApiOptions<SubsonicParameters.ID>): Promise<void> {\n\t\t/*\n\t\t deleteBookmark\n\n\t\t http://your-server/rest/deleteBookmark.view\n\t\t Since 1.9.0\n\n\t\t Deletes the bookmark for a given file.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tID of the media file for which to delete the bookmark. Other users' bookmarks are not affected.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tawait this.engine.bookmarkService.remove(req.query.id, req.user.id);\n\t}\n\n\tasync getRandomSongs(req: ApiOptions<SubsonicParameters.RandomSong>): Promise<{ randomSongs: Subsonic.Songs }> {\n\t\t/*\n\t\t getRandomSongs\n\n\t\t http://your-server/rest/getRandomSongs.view\n\t\t Since 1.2.0\n\n\t\t Returns random songs matching the given criteria.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t size \tNo \t10 \tThe maximum number of songs to return. Max 500.\n\t\t genre \tNo \t\tOnly returns songs belonging to this genre.\n\t\t fromYear \tNo \t\tOnly return songs published after or in this year.\n\t\t toYear \tNo \t\tOnly return songs published before or in this year.\n\t\t musicFolderId \tNo \t\tOnly return songs in the music folder with the given ID. See getMusicFolders.\n\n\t\t Returns a <subsonic-response> element with a nested <randomSongs> element on success.\n\t\t */\n\n\t\tconst amount = Math.min(req.query.size || 10, 500);\n\t\tconst query: SearchQueryTrack = {\n\t\t\tgenre: req.query.genre,\n\t\t\tfromYear: req.query.fromYear,\n\t\t\ttoYear: req.query.toYear,\n\t\t\trootID: req.query.musicFolderId ? req.query.musicFolderId.toString() : undefined\n\t\t};\n\t\tconst randomSongs: Subsonic.Songs = {};\n\t\tconst trackids = await this.engine.store.trackStore.searchIDs(query);\n\t\tif (trackids.length > 0) {\n\t\t\tconst limit: Array<string> = randomItems(trackids, amount);\n\t\t\tconst tracks = await this.engine.store.trackStore.byIds(limit);\n\t\t\trandomSongs.song = await this.prepareTracks(tracks, req.user);\n\t\t}\n\t\treturn {randomSongs};\n\t}\n\n\tasync getSongsByGenre(req: ApiOptions<SubsonicParameters.SongsByGenre>): Promise<{ songsByGenre: Subsonic.Songs }> {\n\t\t/*\n\t\t getSongsByGenre\n\n\t\t http://your-server/rest/getSongsByGenre.view\n\t\t Since 1.9.0\n\n\t\t Returns songs in a given genre.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t genre \tYes \t\tThe genre, as returned by getGenres.\n\t\t count \tNo \t10 \tThe maximum number of songs to return. Max 500.\n\t\t offset \tNo \t0 \tThe offset. Useful if you want to page through the songs in a genre.\n\t\t musicFolderId \tNo \t\t(Since 1.12.0) Only return albums in the music folder with the given ID. See getMusicFolders\n\n\t\t Returns a <subsonic-response> element with a nested <songsByGenre> element on success.\n\t\t */\n\t\tconst songsByGenre: Subsonic.Songs = {};\n\t\tconst tracklist = await this.engine.store.trackStore.searchIDs({genre: req.query.genre, rootID: req.query.musicFolderId ? req.query.musicFolderId.toString() : undefined});\n\t\tconst limit = paginate(tracklist, req.query.count || 10, req.query.offset || 0);\n\t\tconst tracks = await this.engine.store.trackStore.byIds(limit);\n\t\tsongsByGenre.song = await this.prepareTracks(tracks, req.user);\n\t\treturn {songsByGenre};\n\t}\n\n\tasync search(req: ApiOptions<SubsonicParameters.Search>): Promise<{ searchResult: Subsonic.SearchResult }> {\n\t\t/*\n\t\t search\n\n\t\t http://your-server/rest/search.view\n\t\t Since 1.0.0\n\t\t Deprecated since 1.4.0, use search2 instead.\n\n\t\t Returns a listing of files matching the given search criteria. Supports paging through the result.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t artist \tNo \t\tArtist to search for.\n\t\t album \tNo \t\tAlbum to search for.\n\t\t title \tNo \t\tSong title to search for.\n\t\t any \tNo \t\tSearches all fields.\n\t\t count \tNo \t20 \tMaximum number of results to return.\n\t\t offset \tNo \t0 \tSearch result offset. Used for paging.\n\t\t newerThan \tNo \t\tOnly return matches that are newer than this. Given as milliseconds since 1970.\n\n\t\t Returns a <subsonic-response> element with a nested <searchResult> element on success.\n\t\t */\n\t\tif (req.query.any) {\n\t\t\treq.query.artist = req.query.any;\n\t\t\treq.query.album = req.query.any;\n\t\t\treq.query.title = req.query.any;\n\t\t}\n\t\tlet list = await this.engine.store.trackStore.searchIDs({\n\t\t\tartist: req.query.artist,\n\t\t\talbum: req.query.album,\n\t\t\ttitle: req.query.title,\n\t\t\tnewerThan: req.query.newerThan\n\t\t});\n\t\tconst searchResult: Subsonic.SearchResult = {offset: req.query.offset || 0, totalHits: list.length};\n\t\tlist = paginate(list, req.query.count || 20, req.query.offset || 0);\n\t\tconst tracks = await this.engine.store.trackStore.byIds(list);\n\t\tsearchResult.match = await this.prepareTracks(tracks, req.user);\n\t\treturn {searchResult};\n\t}\n\n\tasync search2(req: ApiOptions<SubsonicParameters.Search2>): Promise<{ searchResult2: Subsonic.SearchResult2 }> {\n\t\t/*\n\t\t search2\n\n\t\t http://your-server/rest/search2.view\n\t\t Since 1.4.0\n\n\t\t Returns albums, artists and songs matching the given search criteria. Supports paging through the result.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t query \tYes \t\tSearch query.\n\t\t artistCount \tNo \t20 \tMaximum number of artists to return.\n\t\t artistOffset \tNo \t0 \tSearch result offset for artists. Used for paging.\n\t\t albumCount \tNo \t20 \tMaximum number of albums to return.\n\t\t albumOffset \tNo \t0 \tSearch result offset for albums. Used for paging.\n\t\t songCount \tNo \t20 \tMaximum number of songs to return.\n\t\t songOffset \tNo \t0 \tSearch result offset for songs. Used for paging.\n\t\t musicFolderId \tNo \t\t(Since 1.12.0) Only return results from the music folder with the given ID. See getMusicFolders\n\n\t\t Returns a <subsonic-response> element with a nested <searchResult2> element on success.\n\t\t */\n\n\t\tconst searchResult2: Subsonic.SearchResult2 = {};\n\t\tconst rootID = req.query.musicFolderId ? req.query.musicFolderId.toString() : undefined;\n\t\tconst tracklist = await this.engine.store.trackStore.searchIDs({query: req.query.query, rootID});\n\t\tif (tracklist.length > 0) {\n\t\t\tconst limit = paginate(tracklist, req.query.songCount || 20, req.query.songOffset || 0);\n\t\t\tconst tracks = await this.engine.store.trackStore.byIds(limit);\n\t\t\tsearchResult2.song = await this.prepareTracks(tracks, req.user);\n\t\t}\n\t\tconst folderlist = await this.engine.store.folderStore.search({query: req.query.query, rootID});\n\t\tif (folderlist.length > 0) {\n\t\t\tconst states = await this.engine.stateService.findOrCreateMany(folderlist.map(f => f.id), req.user.id, DBObjectType.folder);\n\t\t\tconst artists: Array<Subsonic.Artist> = [];\n\t\t\tconst albums: Array<Subsonic.Child> = [];\n\t\t\tfolderlist.forEach(folder => {\n\t\t\t\tif (folder.tag.type === FolderType.artist) {\n\t\t\t\t\tartists.push(FORMAT.packFolderArtist(folder, states[folder.id]));\n\t\t\t\t} else {\n\t\t\t\t\talbums.push(FORMAT.packFolder(folder, states[folder.id]));\n\t\t\t\t}\n\t\t\t});\n\t\t\tsearchResult2.artist = paginate(artists, req.query.artistCount || 20, req.query.artistOffset || 0);\n\t\t\tsearchResult2.album = paginate(albums, req.query.albumCount || 20, req.query.albumOffset || 0);\n\t\t}\n\t\treturn {searchResult2};\n\t}\n\n\tasync search3(req: ApiOptions<SubsonicParameters.Search2>): Promise<{ searchResult3: Subsonic.SearchResult3 }> {\n\t\t/*\n\t\t search3\n\n\t\t http://your-server/rest/search3.view\n\t\t Since 1.8.0\n\n\t\t Similar to search2, but organizes music according to ID3 tags.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t query \tYes \t\tSearch query.\n\t\t artistCount \tNo \t20 \tMaximum number of artists to return.\n\t\t artistOffset \tNo \t0 \tSearch result offset for artists. Used for paging.\n\t\t albumCount \tNo \t20 \tMaximum number of albums to return.\n\t\t albumOffset \tNo \t0 \tSearch result offset for albums. Used for paging.\n\t\t songCount \tNo \t20 \tMaximum number of songs to return.\n\t\t songOffset \tNo \t0 \tSearch result offset for songs. Used for paging.\n\n\t\t Returns a <subsonic-response> element with a nested <searchResult3> element on success.\n\t\t */\n\n\t\tconst searchResult3: Subsonic.SearchResult3 = {};\n\t\tconst tracklist = await this.engine.store.trackStore.searchIDs({query: req.query.query});\n\t\tif (tracklist.length > 0) {\n\t\t\tconst limit = paginate(tracklist, req.query.songCount || 20, req.query.songOffset || 0);\n\t\t\tconst tracks = await this.engine.store.trackStore.byIds(limit);\n\t\t\tsearchResult3.song = await this.prepareTracks(tracks, req.user);\n\t\t}\n\t\tconst albumlist = await this.engine.store.albumStore.searchIDs({query: req.query.query});\n\t\tif (albumlist.length > 0) {\n\t\t\tconst limit = paginate(albumlist, req.query.albumCount || 20, req.query.albumOffset || 0);\n\t\t\tconst albums = await this.engine.store.albumStore.byIds(limit);\n\t\t\tsearchResult3.album = await this.prepareAlbums(albums, req.user);\n\t\t}\n\t\tconst artistlist = await this.engine.store.artistStore.searchIDs({query: req.query.query});\n\t\tif (artistlist.length > 0) {\n\t\t\tconst limit = paginate(artistlist, req.query.artistCount || 20, req.query.artistOffset || 0);\n\t\t\tconst artists = await this.engine.store.artistStore.byIds(limit);\n\t\t\tsearchResult3.artist = await this.prepareArtists(artists, req.user);\n\t\t}\n\t\treturn {searchResult3};\n\t}\n\n\tasync getScanStatus(req: ApiOptions<{}>): Promise<{ scanStatus: Subsonic.ScanStatus }> {\n\t\t/*\n\t\thttp://your-server/rest/getScanStatus Since 1.15.0\n\n\t\tReturns the current status for media library scanning. Takes no extra parameters.\n\n\t\tReturns a <subsonic-response> element with a nested <scanStatus> element on success.\n\t\t */\n\t\treturn {scanStatus: this.engine.ioService.getScanStatus()};\n\t}\n\n\tasync startScan(req: ApiOptions<{}>): Promise<void> {\n\t\t/*\n\t\thttp://your-server/rest/startScan Since 1.15.0\n\n\t\tInitiates a rescan of the media libraries. Takes no extra parameters.\n\n\t\tReturns a <subsonic-response> element with a nested <scanStatus> element on success.\n\t\t */\n\t\tthis.engine.ioService.refresh(); // do not wait\n\t}\n\n\tasync getArtist(req: ApiOptions<SubsonicParameters.ID>): Promise<{ artist: Subsonic.ArtistWithAlbumsID3 }> {\n\t\t/*\n\t\t getArtist\n\n\t\t http://your-server/rest/getArtist.view\n\t\t Since 1.8.0\n\n\t\t Returns details for an artist, including a list of albums. This method organizes music according to ID3 tags.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe artist ID.\n\n\t\t Returns a <subsonic-response> element with a nested <artist> element on success.\n\t\t */\n\t\tconst artist = await this.byID<Artist>(req.query.id, this.engine.store.artistStore);\n\t\tconst albumlist = await this.engine.store.albumStore.search({artistID: artist.id});\n\t\talbumlist.sort((a, b) => {\n\t\t\treturn (a.year || 0) - (b.year || 0);\n\t\t});\n\t\tconst state = await this.engine.stateService.findOrCreate(artist.id, req.user.id, DBObjectType.artist);\n\t\tconst states = await this.engine.stateService.findOrCreateMany(albumlist.map(a => a.id), req.user.id, DBObjectType.album);\n\t\tconst artistid3 = <Subsonic.ArtistWithAlbumsID3>FORMAT.packArtist(artist, state);\n\t\tartistid3.album = albumlist.map(a => FORMAT.packAlbum(a, states[a.id]));\n\t\treturn {artist: artistid3};\n\t}\n\n\tasync getAlbum(req: ApiOptions<SubsonicParameters.ID>): Promise<{ album: Subsonic.AlbumWithSongsID3 }> {\n\t\t/*\n\t\t getAlbum\n\n\t\t http://your-server/rest/getAlbum.view\n\t\t Since 1.8.0\n\n\t\t Returns details for an album, including a list of songs. This method organizes music according to ID3 tags.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tThe album ID.\n\n\t\t Returns a <subsonic-response> element with a nested <album> element on success.\n\t\t */\n\t\tconst album = await this.byID<Album>(req.query.id, this.engine.store.albumStore);\n\t\tconst tracks = await this.engine.store.trackStore.byIds(album.trackIDs);\n\t\tconst state = await this.engine.stateService.findOrCreate(album.id, req.user.id, DBObjectType.album);\n\t\ttracks.sort((a, b) => {\n\t\t\treturn (a.tag.track || 0) - (b.tag.track || 0);\n\t\t});\n\t\tconst childs = await this.prepareTracks(tracks, req.user);\n\t\tconst albumid3 = <Subsonic.AlbumWithSongsID3>FORMAT.packAlbum(album, state);\n\t\talbumid3.song = childs;\n\t\treturn {album: albumid3};\n\t}\n\n\tasync getLyrics(req: ApiOptions<SubsonicParameters.Lyrics>): Promise<{ lyrics: Subsonic.Lyrics }> {\n\t\t/*\n\t\t getLyrics\n\n\t\t http://your-server/rest/getLyrics.view\n\t\t Since 1.2.0\n\n\t\t Searches for and returns lyrics for a given song.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t artist \tNo \t\tThe artist name.\n\t\t title \tNo \t\tThe song title.\n\n\t\t Returns a <subsonic-response> element with a nested <lyrics> element on success. The <lyrics> element is empty if no matching lyrics was found.\n\t\t */\n\t\tif (!req.query.artist || !req.query.title) {\n\t\t\treturn {lyrics: {content: ''}};\n\t\t}\n\t\tconst lyrics = await this.engine.audioModule.getLyrics(req.query.artist, req.query.title);\n\t\tif (!lyrics) {\n\t\t\treturn {lyrics: {content: ''}};\n\t\t}\n\t\treturn {lyrics: {artist: lyrics.artist, title: lyrics.song, content: lyrics.lyric.replace(/\\r\\n/g, '\\n')}};\n\t}\n\n\tasync getPlayQueue(req: ApiOptions<{}>): Promise<{ playQueue: Subsonic.PlayQueue }> {\n\t\t/*\n\t\t http://your-server/rest/getPlayQueue Since 1.12.0\n\n\t\tReturns the state of the play queue for this user (as set by savePlayQueue).\n\t\tThis includes the tracks in the play queue, the currently playing track, and the position within this track.\n\t\t Typically used to allow a user to move between different clients/apps while retaining the same play queue\n\t\t (for instance when listening to an audio book).\n\n\t\tReturns a <subsonic-response> element with a nested <playQueue> element on success,\n\t\tor an empty <subsonic-response> if no play queue has been saved.\n\t\t */\n\t\tconst playqueue = await this.engine.playQueueService.get(req.user.id);\n\t\tif (!playqueue) {\n\t\t\tconst empty: any = {};\n\t\t\treturn empty;\n\t\t}\n\t\tconst tracks = await this.engine.store.trackStore.byIds(playqueue.trackIDs);\n\t\tconst childs = await this.prepareTracks(tracks, req.user);\n\t\treturn {playQueue: FORMAT.packPlayQueue(playqueue, req.user, childs)};\n\t}\n\n\tasync savePlayQueue(req: ApiOptions<SubsonicParameters.PlayQueue>): Promise<void> {\n\t\t/*\n\t\t http://your-server/rest/savePlayQueue Since 1.12.0\n\n\t\tSaves the state of the play queue for this user. This includes the tracks in the play queue,\n\t\tthe currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps\n\t\twhile retaining the same play queue (for instance when listening to an audio book).\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tID of a song in the play queue. Use one id parameter for each song in the play queue.\n\t\tcurrent \tNo \t\tThe ID of the current playing song.\n\t\tposition \tNo \t\tThe position in milliseconds within the currently playing song.\n\n\t\tReturns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst ids: Array<string> = req.query.id ? (Array.isArray(req.query.id) ? req.query.id : [req.query.id]) : [];\n\t\tawait this.engine.playQueueService.save(req.user.id, ids, req.query.current, req.query.position, req.client);\n\t}\n\n\tasync deleteInternetRadioStation(req: ApiOptions<SubsonicParameters.ID>): Promise<void> {\n\t\t/*\n\t\tdeleteInternetRadioStation\n\n\t\thttp://your-server/rest/deleteInternetRadioStation Since 1.16.0\n\n\t\tDeletes an existing internet radio station. Only users with admin privileges are allowed to call this method.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe ID for the station.\n\n\t\tReturns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst radio = await this.byID(req.query.id, await this.engine.store.radioStore);\n\t\tawait this.engine.store.radioStore.remove(radio.id);\n\t}\n\n\tasync createInternetRadioStation(req: ApiOptions<SubsonicParameters.InternetRadioCreate>): Promise<void> {\n\t\t/*\n\t\tcreateInternetRadioStation\n\n\t\thttp://your-server/rest/createInternetRadioStation Since 1.16.0\n\n\t\tAdds a new internet radio station. Only users with admin privileges are allowed to call this method.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tstreamUrl \tYes \t\tThe stream URL for the station.\n\t\tname \tYes \t\tThe user-defined name for the station.\n\t\thomepageUrl \tNo \t\tThe home page URL for the station.\n\n\t\tReturns an empty <subsonic-response> element on success.\n\t\t */\n\t\tawait this.engine.radioService.create(req.query.name, req.query.streamUrl, req.query.homepageUrl);\n\t}\n\n\tasync updateInternetRadioStation(req: ApiOptions<SubsonicParameters.InternetRadioUpdate>): Promise<void> {\n\t\t/*\n\t\tupdateInternetRadioStation\n\n\t\thttp://your-server/rest/updateInternetRadioStation Since 1.16.0\n\n\t\tUpdates an existing internet radio station. Only users with admin privileges are allowed to call this method.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe ID for the station.\n\t\tstreamUrl \tYes \t\tThe stream URL for the station.\n\t\tname \tYes \t\tThe user-defined name for the station.\n\t\thomepageUrl \tNo \t\tThe home page URL for the station.\n\n\t\tReturns an empty <subsonic-response> element on success.\n\t\t */\n\t\tconst radio = await this.byID(req.query.id, await this.engine.store.radioStore);\n\t\tawait this.engine.radioService.update(radio, req.query.name, req.query.streamUrl, req.query.homepageUrl);\n\t}\n\n\tasync getInternetRadioStations(req: ApiOptions<{}>): Promise<{ internetRadioStations: Subsonic.InternetRadioStations }> {\n\t\t/*\n\t\t getInternetRadioStations\n\n\t\t http://your-server/rest/getInternetRadioStations.view\n\t\t Since 1.9.0\n\n\t\t Returns all internet radio stations. Takes no extra parameters.\n\n\t\t Returns a <subsonic-response> element with a nested <internetRadioStations> element on success.\n\t\t */\n\t\tconst radios = await this.engine.store.radioStore.all();\n\t\treturn {internetRadioStations: {internetRadioStation: radios.filter(radio => !radio.disabled).map(radio => FORMAT.packRadio(radio))}};\n\t}\n\n\t/* Maybe implement someday? */\n\n\tasync getVideos(req: ApiOptions<{}>): Promise<{ videos: Subsonic.Videos }> {\n\t\t/*\n\t\t getVideos\n\n\t\t http://your-server/rest/getVideos.view\n\t\t Since 1.8.0\n\n\t\t Returns all video files.\n\n\t\t Returns a <subsonic-response> element with a nested <videos> element on success.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t\treturn {videos: {}};\n\t}\n\n\tasync getVideoInfo(req: ApiOptions<SubsonicParameters.ID>): Promise<{ videoInfo: Subsonic.VideoInfo }> {\n\t\t/*.\n\t\t http://your-server/rest/getVideoInfo Since 1.14.0\n\n\t\tReturns details for a video, including information about available audio tracks, subtitles (captions) and conversions.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe video ID.\n\n\t\tReturns a <subsonic-response> element with a nested <videoInfo> element on success.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t\treturn {videoInfo: {id: ''}};\n\t}\n\n\tasync getCaptions(req: ApiOptions<SubsonicParameters.Captions>): Promise<IApiBinaryResult> {\n\t\t/*\n\t\t http://your-server/rest/getCaptions Since 1.14.0\n\n\t\tReturns captions (subtitles) for a video. Use getVideoInfo to get a list of available captions.\n\t\tParameter \tRequired \tDefault \tComment\n\t\tid \tYes \t\tThe ID of the video.\n\t\tformat \tNo \t\tPreferred captions format (\"srt\" or \"vtt\").\n\n\t\tReturns the raw video captions.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t\treturn {};\n\t}\n\n\tasync scrobble(req: ApiOptions<SubsonicParameters.Scrobble>): Promise<void> {\n\t\t/*\n\t\t scrobble\n\n\t\t http://your-server/rest/scrobble.view\n\t\t Since 1.5.0\n\n\t\t Registers the local playback of one or more media files. Typically used when playing media that is cached on the client. This operation includes the following:\n\n\t\t\t\"Scrobbles\" the media files on last.fm if the user has configured his/her last.fm credentials on the Subsonic server (Settings > Personal).\n\t\t\tUpdates the play count and last played timestamp for the media files. (Since 1.11.0)\n\t\t\tMakes the media files appear in the \"Now playing\" page in the web app, and appear in the list of songs returned by getNowPlaying (Since 1.11.0)\n\n\t\t Since 1.8.0 you may specify multiple id (and optionally time) parameters to scrobble multiple files.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tA string which uniquely identifies the file to scrobble.\n\t\t time \tNo \t\t(Since 1.8.0) The time (in milliseconds since 1 Jan 1970) at which the song was listened to.\n\t\t submission \tNo \tTrue \tWhether this is a \"submission\" or a \"now playing\" notification.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t}\n\n\tasync getShares(req: ApiOptions<{}>): Promise<{ shares: Subsonic.Shares }> {\n\t\t/*\n\t\t getShares\n\n\t\t http://your-server/rest/getShares.view\n\t\t Since 1.6.0\n\n\t\t Returns information about shared media this user is allowed to manage. Takes no extra parameters.\n\n\t\t Returns a <subsonic-response> element with a nested <shares> element on success.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t\treturn {shares: {}};\n\t}\n\n\tasync createShare(req: ApiOptions<SubsonicParameters.Share>): Promise<void> {\n\t\t/*\n\t\t createShare\n\n\t\t http://your-server/rest/createShare.view\n\t\t Since 1.6.0\n\n\t\t Creates a public URL that can be used by anyone to stream music or video from the Subsonic server.\n\t\t The URL is short and suitable for posting on Facebook, Twitter etc. Note: The user must be authorized to share (see Settings > Users > user is allowed to share files with anyone).\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tID of a song, album or video to share. Use one id parameter for each entry to share.\n\t\t description \tNo \t\tA user-defined description that will be displayed to people visiting the shared media.\n\t\t expires \tNo \t\tThe time at which the share expires. Given as milliseconds since 1970.\n\n\t\t Returns a <subsonic-response> element with a nested <shares> element on success, which in turns contains a single <share> element for the newly created share.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t}\n\n\tasync updateShare(req: ApiOptions<SubsonicParameters.Share>): Promise<void> {\n\t\t/*\n\t\t updateShare\n\n\t\t http://your-server/rest/updateShare.view\n\t\t Since 1.6.0\n\n\t\t Updates the description and/or expiration date for an existing share.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tID of the share to update.\n\t\t description \tNo \t\tA user-defined description that will be displayed to people visiting the shared media.\n\t\t expires \tNo \t\tThe time at which the share expires. Given as milliseconds since 1970, or zero to remove the expiration.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t}\n\n\tasync deleteShare(req: ApiOptions<SubsonicParameters.ID>): Promise<void> {\n\t\t/*\n\t\t deleteShare\n\n\t\t http://your-server/rest/deleteShare.view\n\t\t Since 1.6.0\n\n\t\t Deletes an existing share.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tID of the share to delete.\n\n\t\t Returns an empty <subsonic-response> element on success.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t}\n\n\tasync hls(req: ApiOptions<SubsonicParameters.HLS>): Promise<IApiBinaryResult> {\n\t\t/*\n\t\t hls\n\n\t\t http://your-server/rest/hls.m3u8\n\t\t Since 1.8.0\n\n\t\t Creates an HLS (HTTP Live Streaming) playlist used for streaming video or audio. HLS is a streaming protocol implemented by Apple and works by breaking the overall stream\n\t\t into a sequence of small HTTP-based file downloads. It's supported by iOS and newer versions of Android.\n\t\t This method also supports adaptive bitrate streaming, see the bitRate parameter.\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t id \tYes \t\tA string which uniquely identifies the media file to stream.\n\t\t bitRate \tNo \t\tIf specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If this parameter is specified more than once,\n\t\t the server will create a variant playlist, suitable for adaptive bitrate streaming. The playlist will support streaming at all the specified bitrates.\n\t\t The server will automatically choose video dimensions that are suitable for the given bitrates. Since 1.9.0 you may explicitly request a certain width (480)\n\t\t  and height (360) like so: bitRate=1000@480x360\n\n\t\t Returns an M3U8 playlist on success (content type \"application/vnd.apple.mpegurl\"), or an XML document on error (in which case the HTTP content type will start with \"text/xml\").\n\t\t */\n\t\tPromise.reject('not implemented');\n\t\treturn {};\n\t}\n\n\tasync jukeboxControl(req: ApiOptions<SubsonicParameters.Jukebox>): Promise<{ jukeboxStatus: Subsonic.JukeboxStatus }> {\n\t\t/*\n\t\t jukeboxControl\n\n\t\t http://your-server/rest/jukeboxControl.view\n\t\t Since 1.2.0\n\n\t\t Controls the jukebox, i.e., playback directly on the server's audio hardware. Note: The user must be authorized to control the jukebox (see Settings > Users > user is allowed to play files in jukebox mode).\n\t\t Parameter \tRequired \tDefault \tComment\n\t\t action \tYes \t\tThe operation to perform. Must be one of: get, status (since 1.7.0), set (since 1.7.0), start, stop, skip, add, clear, remove, shuffle, setGain\n\t\t index \tNo \t\tUsed by skip and remove. Zero-based index of the song to skip to or remove.\n\t\t offset \tNo \t\t(Since 1.7.0) Used by skip. Start playing this many seconds into the track.\n\t\t id \tNo \t\tUsed by add and set. ID of song to add to the jukebox playlist. Use multiple id parameters to add many songs in the same request. (set is similar to a clear followed by a add, but will not change the currently playing track.)\n\t\t gain \tNo \t\tUsed by setGain to control the playback volume. A float value between 0.0 and 1.0.\n\n\t\t Returns a <jukeboxStatus> element on success, unless the get action is used, in which case a nested <jukeboxPlaylist> element is returned.\n\t\t */\n\t\tPromise.reject('not implemented');\n\t\treturn {jukeboxStatus: {currentIndex: 0, playing: false, gain: 0}};\n\t}\n\n}\n\n","import {Subsonic} from '../../model/subsonic-rest-data';\nimport {SubsonicParameters} from '../../model/subsonic-rest-params';\nimport {ApiOptions, SubsonicApi} from './api';\nimport {ApiResponder} from './response';\nimport express from 'express';\nimport {IApiBinaryResult} from '../../typings';\nimport {apiCheck} from './check';\n\nexport interface SubsonicRolesHandler {\n\tpodcast: express.RequestHandler;\n\tshare: express.RequestHandler;\n\tadmin: express.RequestHandler;\n\tjukebox: express.RequestHandler;\n}\n\nexport function registerApi(router: express.Router, api: SubsonicApi, roles: SubsonicRolesHandler): void {\n\trouter.all('/addChatMessage.view', apiCheck('/addChatMessage.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ChatMessage> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.addChatMessage(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/changePassword.view', apiCheck('/changePassword.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ChangePassword> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.changePassword(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/createBookmark.view', apiCheck('/createBookmark.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Bookmark> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.createBookmark(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/createPlaylist.view', apiCheck('/createPlaylist.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.PlaylistCreate> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { playlist: Subsonic.PlaylistWithSongs } = await api.createPlaylist(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/createPodcastChannel.view', roles.podcast, apiCheck('/createPodcastChannel.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.PodcastChannel> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.createPodcastChannel(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/createShare.view', roles.share, apiCheck('/createShare.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Share> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.createShare(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/createUser.view', roles.admin, apiCheck('/createUser.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.CreateUser> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.createUser(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/deleteBookmark.view', apiCheck('/deleteBookmark.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.deleteBookmark(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/deleteInternetRadioStation.view', roles.admin, apiCheck('/deleteInternetRadioStation.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.deleteInternetRadioStation(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/deletePlaylist.view', apiCheck('/deletePlaylist.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.deletePlaylist(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/deletePodcastChannel.view', roles.podcast, apiCheck('/deletePodcastChannel.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.deletePodcastChannel(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/deletePodcastEpisode.view', roles.podcast, apiCheck('/deletePodcastEpisode.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.deletePodcastEpisode(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/deleteShare.view', apiCheck('/deleteShare.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.deleteShare(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/deleteUser.view', roles.admin, apiCheck('/deleteUser.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Username> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.deleteUser(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/downloadPodcastEpisode.view', roles.podcast, apiCheck('/downloadPodcastEpisode.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.downloadPodcastEpisode(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getAlbum.view', apiCheck('/getAlbum.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { album: Subsonic.AlbumWithSongsID3 } = await api.getAlbum(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getAlbumInfo.view', apiCheck('/getAlbumInfo.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { albumInfo: Subsonic.AlbumInfo } = await api.getAlbumInfo(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getAlbumInfo2.view', apiCheck('/getAlbumInfo2.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { albumInfo: Subsonic.AlbumInfo } = await api.getAlbumInfo2(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getAlbumList.view', apiCheck('/getAlbumList.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.AlbumList> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { albumList: Subsonic.AlbumList } = await api.getAlbumList(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getAlbumList2.view', apiCheck('/getAlbumList2.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.AlbumList2> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { albumList2: Subsonic.AlbumList2 } = await api.getAlbumList2(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getArtist.view', apiCheck('/getArtist.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { artist: Subsonic.ArtistWithAlbumsID3 } = await api.getArtist(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getArtistInfo.view', apiCheck('/getArtistInfo.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ArtistInfo> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { artistInfo: Subsonic.ArtistInfo } = await api.getArtistInfo(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getArtistInfo2.view', apiCheck('/getArtistInfo2.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ArtistInfo> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { artistInfo2: Subsonic.ArtistInfo2 } = await api.getArtistInfo2(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getArtists.view', apiCheck('/getArtists.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.MusicFolderID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { artists: Subsonic.ArtistsID3 } = await api.getArtists(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getBookmarks.view', apiCheck('/getBookmarks.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { bookmarks: Subsonic.Bookmarks } = await api.getBookmarks(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getChatMessages.view', apiCheck('/getChatMessages.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ChatMessages> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { chatMessages: Subsonic.ChatMessages } = await api.getChatMessages(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getGenres.view', apiCheck('/getGenres.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { genres: Subsonic.Genres } = await api.getGenres(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getIndexes.view', apiCheck('/getIndexes.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Indexes> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { indexes: Subsonic.Indexes } = await api.getIndexes(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getInternetRadioStations.view', apiCheck('/getInternetRadioStations.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { internetRadioStations: Subsonic.InternetRadioStations } = await api.getInternetRadioStations(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/createInternetRadioStation.view', roles.admin, apiCheck('/createInternetRadioStation.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.InternetRadioCreate> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.createInternetRadioStation(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/updateInternetRadioStation.view', roles.admin, apiCheck('/updateInternetRadioStation.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.InternetRadioUpdate> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.updateInternetRadioStation(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getLicense.view', apiCheck('/getLicense.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { license: Subsonic.License } = await api.getLicense(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getLyrics.view', apiCheck('/getLyrics.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Lyrics> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { lyrics: Subsonic.Lyrics } = await api.getLyrics(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getMusicDirectory.view', apiCheck('/getMusicDirectory.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { directory: Subsonic.Directory } = await api.getMusicDirectory(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getMusicFolders.view', apiCheck('/getMusicFolders.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { musicFolders: Subsonic.MusicFolders } = await api.getMusicFolders(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getNewestPodcasts.view', apiCheck('/getNewestPodcasts.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.PodcastEpisodesNewest> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { newestPodcasts: Subsonic.NewestPodcasts } = await api.getNewestPodcasts(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getNowPlaying.view', apiCheck('/getNowPlaying.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { nowPlaying: Subsonic.NowPlaying } = await api.getNowPlaying(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getPlaylist.view', apiCheck('/getPlaylist.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { playlist: Subsonic.PlaylistWithSongs } = await api.getPlaylist(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getPlaylists.view', apiCheck('/getPlaylists.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Playlists> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { playlists: Subsonic.Playlists } = await api.getPlaylists(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getPlayQueue.view', apiCheck('/getPlayQueue.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { playQueue: Subsonic.PlayQueue } = await api.getPlayQueue(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getPodcasts.view', apiCheck('/getPodcasts.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.PodcastChannels> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { podcasts: Subsonic.Podcasts } = await api.getPodcasts(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getRandomSongs.view', apiCheck('/getRandomSongs.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.RandomSong> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { randomSongs: Subsonic.Songs } = await api.getRandomSongs(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getScanStatus.view', apiCheck('/getScanStatus.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { scanStatus: Subsonic.ScanStatus } = await api.getScanStatus(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/startScan.view', apiCheck('/startScan.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.startScan(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getShares.view', apiCheck('/getShares.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { shares: Subsonic.Shares } = await api.getShares(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getSimilarSongs.view', apiCheck('/getSimilarSongs.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.SimilarSongs> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { similarSongs: Subsonic.SimilarSongs } = await api.getSimilarSongs(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getSimilarSongs2.view', apiCheck('/getSimilarSongs2.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.SimilarSongs> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { similarSongs2: Subsonic.SimilarSongs2 } = await api.getSimilarSongs2(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getSong.view', apiCheck('/getSong.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { song: Subsonic.Child } = await api.getSong(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getSongsByGenre.view', apiCheck('/getSongsByGenre.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.SongsByGenre> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { songsByGenre: Subsonic.Songs } = await api.getSongsByGenre(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getStarred.view', apiCheck('/getStarred.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.MusicFolderID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { starred: Subsonic.Starred } = await api.getStarred(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getStarred2.view', apiCheck('/getStarred2.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.MusicFolderID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { starred2: Subsonic.Starred2 } = await api.getStarred2(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getTopSongs.view', apiCheck('/getTopSongs.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.TopSongs> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { topSongs: Subsonic.TopSongs } = await api.getTopSongs(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getUser.view', apiCheck('/getUser.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Username> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { user: Subsonic.User } = await api.getUser(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getUsers.view', roles.admin, apiCheck('/getUsers.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { users: Subsonic.Users } = await api.getUsers(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getVideoInfo.view', apiCheck('/getVideoInfo.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.ID> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { videoInfo: Subsonic.VideoInfo } = await api.getVideoInfo(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getVideos.view', apiCheck('/getVideos.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { videos: Subsonic.Videos } = await api.getVideos(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/jukeboxControl.view', roles.jukebox, apiCheck('/jukeboxControl.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Jukebox> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { jukeboxStatus: Subsonic.JukeboxStatus } = await api.jukeboxControl(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/ping.view', apiCheck('/ping.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.ping(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/refreshPodcasts.view', roles.podcast, apiCheck('/refreshPodcasts.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<{}> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.refreshPodcasts(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/savePlayQueue.view', apiCheck('/savePlayQueue.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.PlayQueue> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.savePlayQueue(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/scrobble.view', apiCheck('/scrobble.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Scrobble> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.scrobble(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/search.view', apiCheck('/search.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Search> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { searchResult: Subsonic.SearchResult } = await api.search(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/search2.view', apiCheck('/search2.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Search2> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { searchResult2: Subsonic.SearchResult2 } = await api.search2(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/search3.view', apiCheck('/search3.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Search2> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: { searchResult3: Subsonic.SearchResult3 } = await api.search3(options);\n\t\t\tawait ApiResponder.data(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/setRating.view', apiCheck('/setRating.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Rate> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.setRating(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/star.view', apiCheck('/star.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.State> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.star(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/unstar.view', apiCheck('/unstar.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.State> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.unstar(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/updatePlaylist.view', apiCheck('/updatePlaylist.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.PlaylistUpdate> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.updatePlaylist(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/updateShare.view', apiCheck('/updateShare.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Share> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.updateShare(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/updateUser.view', roles.admin, apiCheck('/updateUser.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.UpdateUser> = {query: req.query, user: req.user, client: req.client};\n\t\t\tawait api.updateUser(options);\n\t\t\tawait ApiResponder.ok(req, res);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getAvatar.view', apiCheck('/getAvatar.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Username> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: IApiBinaryResult = await api.getAvatar(options);\n\t\t\tawait ApiResponder.binary(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getCaptions.view', apiCheck('/getCaptions.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Captions> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: IApiBinaryResult = await api.getCaptions(options);\n\t\t\tawait ApiResponder.binary(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/getCoverArt.view', apiCheck('/getCoverArt.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.CoverArt> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: IApiBinaryResult = await api.getCoverArt(options);\n\t\t\tawait ApiResponder.binary(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/hls.view', apiCheck('/hls.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.HLS> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: IApiBinaryResult = await api.hls(options);\n\t\t\tawait ApiResponder.binary(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/stream.view', apiCheck('/stream.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Stream> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: IApiBinaryResult = await api.stream(options);\n\t\t\tawait ApiResponder.binary(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n\n\trouter.all('/download.view', apiCheck('/download.view'), async (req, res) => {\n\t\ttry {\n\t\t\tconst options: ApiOptions<SubsonicParameters.Download> = {query: req.query, user: req.user, client: req.client};\n\t\t\tconst result: IApiBinaryResult = await api.download(options);\n\t\t\tawait ApiResponder.binary(req, res, result);\n\t\t} catch (e) {\n\t\t\tawait ApiResponder.error(req, res, e);\n\t\t}\n\t});\n}\n","import express from 'express';\nimport {checkOpenApiParameters} from '../../utils/openapi-parameters-check';\nimport {ApiResponder} from './response';\nimport {FORMAT} from './format';\nimport {OpenAPIObject} from '../../model/openapi-spec';\n\nconst SubsonicApiSchema = require('../../model/subsonic-rest-api.schema.json');\nconst openapi: OpenAPIObject = require('../../model/subsonic-openapi.json');\n\nexport function apiCheck(name: string): express.RequestHandler {\n\tfunction CheckApiParametersHandler(req: express.Request, res: express.Response, next: express.NextFunction) {\n\t\tcheckOpenApiParameters(name, req, openapi, SubsonicApiSchema, 'get').then(() => {\n\t\t\tnext();\n\t\t}).catch((e) => {\n\t\t\tApiResponder.error(req, res, {fail: FORMAT.FAIL.PARAMETER, text: e.toString()});\n\t\t});\n\t}\n\treturn CheckApiParametersHandler;\n}\n","module.exports = require(\"helmet\");","import path from 'path';\nimport {AppConfig} from './config/app.config';\nimport {ElasticsearchConfig} from './db/elasticsearch/config-elastic';\n\ntype LogLevel = 'error' | 'warn' | 'info' | 'debug';\n\nexport interface BaseConfig {\n\tlog: { level: LogLevel };\n\tserver: ServerConfig;\n\tdatabase: DBConfig;\n\tpaths: {\n\t\tdata: string,\n\t\tfrontend: string\n\t};\n}\n\nexport interface ChatConfig {\n\tmaxMsgs: number;\n\tmaxAge: {\n\t\tvalue: number;\n\t\tunit: string;\n\t};\n}\n\nexport interface IndexConfig {\n\tignore: Array<string>;\n}\n\nexport interface DBConfig {\n\tuse: string;\n\toptions: {\n\t\telasticsearch: ElasticsearchConfig;\n\t\tnedb?: {};\n\t};\n}\n\nexport interface ServerConfig {\n\tlisten: string;\n\tport: number;\n\tsession: {\n\t\tallowedCookieDomains: Array<string>;\n\t\tsecret: string;\n\t\tcookie: {\n\t\t\tname: string;\n\t\t\tsecure: boolean\n\t\t\tmaxAge: {\n\t\t\t\tvalue: number;\n\t\t\t\tunit: string;\n\t\t\t};\n\t\t};\n\t};\n\tjwt: {\n\t\tsecret: string;\n\t\tmaxAge: {\n\t\t\tvalue: number;\n\t\t\tunit: string;\n\t\t};\n\t};\n}\n\n\nexport interface Config extends BaseConfig {\n\tapp: {\n\t\tchat: ChatConfig;\n\t\tindex: IndexConfig;\n\t};\n\tfirstStart?: {\n\t\tadminUser?: {\n\t\t\tname: string;\n\t\t\tpass: string;\n\t\t\tmail: string;\n\t\t};\n\t\troots?: Array<{ name: string; path: string; }>;\n\t};\n\n\tgetDataPath(parts: Array<string>): string;\n}\n\nexport function extendConfig(config: BaseConfig): Config {\n\tconst result = <Config>config;\n\tresult.app = AppConfig;\n\tresult.getDataPath = (parts: Array<string>): string => {\n\t\treturn path.resolve(config.paths.data, ...parts);\n\t};\n\treturn result;\n}\n\nexport function loadConfig(): Config {\n\tconst config: Config = require('../config/config.js');\n\tconfig.firstStart = require('../config/firststart.config.js');\n\treturn extendConfig(config);\n}\n","// TODO make these settings changeable via api\n\nexport const AppConfig = {\n\tchat: {\n\t\tmaxMsgs: 100,\n\t\tmaxAge: {value: 1, unit: 'day'}\n\t},\n\tindex: {\n\t\tignore: ['The', 'El', 'La', 'Los', 'Las', 'Le', 'Les', 'Die']\n\t}\n};\n","module.exports = require(\"../config/config.js\");","module.exports = require(\"../config/firststart.config.js\");","import {UserStore} from '../../objects/user/user.store';\nimport {TrackStore} from '../../objects/track/track.store';\nimport {FolderStore} from '../../objects/folder/folder.store';\nimport {EpisodeStore} from '../../objects/episode/episode.store';\nimport {AlbumStore} from '../../objects/album/album.store';\nimport {ArtistStore} from '../../objects/artist/artist.store';\nimport {RadioStore} from '../../objects/radio/radio.store';\nimport {PlayQueueStore} from '../../objects/playqueue/playqueue.store';\nimport {RootStore} from '../../objects/root/root.store';\nimport {BookmarkStore} from '../../objects/bookmark/bookmark.store';\nimport {PodcastStore} from '../../objects/podcast/podcast.store';\nimport {PlaylistStore} from '../../objects/playlist/playlist.store';\nimport {StateStore} from '../../objects/state/state.store';\nimport {BaseStore, SearchQuery} from '../../objects/base/base.store';\nimport {DBObject} from '../../objects/base/base.model';\nimport {Database} from '../../db/db.model';\nimport {Track} from '../../objects/track/track.model';\nimport {Folder} from '../../objects/folder/folder.model';\nimport {DBObjectType} from '../../types';\nimport {updatePlayListTracks} from '../../objects/playlist/playlist.service';\nimport Logger from '../../utils/logger';\n\nconst log = Logger('Store');\n\nexport class Store {\n\tpublic trackStore: TrackStore;\n\tpublic folderStore: FolderStore;\n\tpublic userStore: UserStore;\n\tpublic stateStore: StateStore;\n\tpublic playlistStore: PlaylistStore;\n\tpublic podcastStore: PodcastStore;\n\tpublic episodeStore: EpisodeStore;\n\tpublic bookmarkStore: BookmarkStore;\n\tpublic rootStore: RootStore;\n\tpublic artistStore: ArtistStore;\n\tpublic albumStore: AlbumStore;\n\tpublic playQueueStore: PlayQueueStore;\n\tpublic radioStore: RadioStore;\n\n\tconstructor(public db: Database) {\n\t\tthis.trackStore = new TrackStore(this.db);\n\t\tthis.folderStore = new FolderStore(this.db);\n\t\tthis.userStore = new UserStore(this.db);\n\t\tthis.stateStore = new StateStore(this.db);\n\t\tthis.playlistStore = new PlaylistStore(this.db);\n\t\tthis.podcastStore = new PodcastStore(this.db);\n\t\tthis.episodeStore = new EpisodeStore(this.db);\n\t\tthis.bookmarkStore = new BookmarkStore(this.db);\n\t\tthis.artistStore = new ArtistStore(this.db);\n\t\tthis.albumStore = new AlbumStore(this.db);\n\t\tthis.playQueueStore = new PlayQueueStore(this.db);\n\t\tthis.radioStore = new RadioStore(this.db);\n\t\tthis.rootStore = new RootStore(this.db);\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tawait this.db.reset();\n\t}\n\n\tasync check(): Promise<void> {\n\t\tawait this.db.check();\n\t}\n\n\tasync open(): Promise<void> {\n\t\tawait this.db.open();\n\t}\n\n\tasync close(): Promise<void> {\n\t\tawait this.db.close();\n\t}\n\n\tasync findInAll(id: string): Promise<DBObject | undefined> {\n\t\tconst stores: Array<BaseStore<DBObject, SearchQuery>> =\n\t\t\t[this.folderStore, this.trackStore, this.albumStore, this.artistStore, this.podcastStore, this.episodeStore, this.playlistStore, this.artistStore, this.albumStore, this.radioStore, this.userStore];\n\t\tfor (const store of stores) {\n\t\t\tconst obj = await store.byId(id);\n\t\t\tif (obj) {\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync findMultiInAll(ids: Array<string>): Promise<Array<DBObject>> {\n\t\tlet result: Array<DBObject> = [];\n\t\tconst stores: Array<BaseStore<DBObject, SearchQuery>> =\n\t\t\t[this.folderStore, this.trackStore, this.albumStore, this.artistStore, this.podcastStore, this.episodeStore, this.playlistStore, this.artistStore, this.albumStore, this.radioStore, this.userStore];\n\t\tfor (const store of stores) {\n\t\t\tconst objs = await store.byIds(ids);\n\t\t\tresult = result.concat(objs);\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync cleanStore(removeTracks: Array<Track>, removeFolders: Array<Folder>): Promise<Array<string>> {\n\t\tlet ids: Array<string> = [];\n\t\tif (removeFolders.length > 0) {\n\t\t\tlog.debug('Cleaning folders', removeFolders.length);\n\t\t\tconst folderIDs = removeFolders.map(folder => folder.id);\n\t\t\tawait this.folderStore.remove(folderIDs);\n\t\t\tawait this.stateStore.removeByQuery({destIDs: folderIDs, type: DBObjectType.folder});\n\t\t\tids = folderIDs;\n\t\t}\n\t\tif (removeTracks.length > 0) {\n\t\t\tlog.debug('Cleaning tracks', removeTracks.length);\n\t\t\tconst trackIDs = removeTracks.map(track => track.id);\n\t\t\tawait this.trackStore.remove(trackIDs);\n\t\t\tawait this.stateStore.removeByQuery({destIDs: trackIDs, type: DBObjectType.track});\n\t\t\tawait this.bookmarkStore.removeByQuery({destIDs: trackIDs});\n\t\t\tconst playlists = await this.playlistStore.search({trackIDs: trackIDs});\n\t\t\tids = ids.concat(trackIDs);\n\t\t\tif (playlists.length > 0) {\n\t\t\t\tfor (const playlist of playlists) {\n\t\t\t\t\tplaylist.trackIDs = playlist.trackIDs.filter(id => trackIDs.indexOf(id) < 0);\n\t\t\t\t\tif (playlist.trackIDs.length === 0) {\n\t\t\t\t\t\tawait this.playlistStore.remove(playlist.id);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait updatePlayListTracks(this.trackStore, playlist);\n\t\t\t\t\t\tawait this.playlistStore.replace(playlist);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\treturn ids;\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {User} from './user.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryUser extends SearchQuery {\n\tname?: string;\n\tisAdmin?: boolean;\n}\n\nexport class UserStore extends BaseStore<User, SearchQueryUser> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.user, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryUser): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('name', query.name);\n\t\tq.bool('roles.adminRole', query.isAdmin);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Track} from './track.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\nimport {ensureTrailingPathSeparator} from '../../utils/fs-utils';\n\nexport interface SearchQueryTrack extends SearchQuery {\n\tpath?: string;\n\tinPath?: string;\n\tinPaths?: Array<string>;\n\tartist?: string;\n\tartistID?: string;\n\tparentID?: string;\n\tparentIDs?: Array<string>;\n\tmbTrackID?: string;\n\tmbTrackIDs?: Array<string>;\n\trootID?: string;\n\ttitle?: string;\n\talbum?: string;\n\tgenre?: string;\n\tnewerThan?: number;\n\tfromYear?: number;\n\ttoYear?: number;\n}\n\nexport class TrackStore extends BaseStore<Track, SearchQueryTrack> {\n\tfieldMap: { [name: string]: string } = {\n\t\t'path': 'path',\n\t\t'parentID': 'parentID',\n\t\t'parentIDs': 'parentID',\n\t\t'rootID': 'rootID',\n\t\t'artistID': 'artistID',\n\t\t'artist': 'tag.artist',\n\t\t'mbTrackID': 'tag.mbTrackID',\n\t\t'title': 'tag.title',\n\t\t'album': 'tag.album',\n\t\t'year': 'tag.year',\n\t\t'genre': 'tag.genre',\n\t\t'created': 'stat.created'\n\t};\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.track, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryTrack): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.terms('parentID', query.parentIDs);\n\t\tq.term('path', query.path);\n\t\tq.startsWiths('path', query.inPaths ? query.inPaths.map(s => ensureTrailingPathSeparator(s)) : undefined);\n\t\tq.startsWith('path', query.inPath ? ensureTrailingPathSeparator(query.inPath) : undefined);\n\t\tq.term('tag.genre', query.genre);\n\t\tq.term('rootID', query.rootID);\n\t\tq.term('parentID', query.parentID);\n\t\tq.term('tag.mbTrackID', query.mbTrackID);\n\t\tq.terms('tag.mbTrackID', query.mbTrackIDs);\n\t\tq.term('tag.artist', query.artist);\n\t\tq.term('tag.title', query.title);\n\t\tq.match('tag.title', query.query);\n\t\tq.term('tag.album', query.album);\n\t\tq.term('artistID', query.artistID);\n\t\tq.range('tag.year', query.toYear, query.fromYear);\n\t\tq.range('stat.created', undefined, query.newerThan);\n\t\treturn q.get(query, this.fieldMap);\n\t}\n\n\t// async genres(): Promise<Array<string>> {\n\t// \treturn await this.group.distinct('tag.genre');\n\t// }\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Folder} from './folder.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\nimport {ensureTrailingPathSeparator} from '../../utils/fs-utils';\n\nexport interface SearchQueryFolder extends SearchQuery {\n\trootID?: string;\n\tparentID?: string;\n\tpath?: string;\n\tinPath?: string;\n\tartist?: string;\n\tartists?: Array<string>;\n\ttitle?: string;\n\talbum?: string;\n\tgenre?: string;\n\tlevel?: number;\n\tnewerThan?: number;\n\tfromYear?: number;\n\ttoYear?: number;\n\tmbAlbumID?: string;\n\tmbArtistID?: string;\n\ttypes?: Array<string>;\n}\n\nexport class FolderStore extends BaseStore<Folder, SearchQueryFolder> {\n\tfieldMap: { [name: string]: string } = {\n\t\t'parentID': 'parent',\n\t\t'rootID': 'rootID',\n\t\t'artist': 'tag.artist',\n\t\t'title': 'tag.title',\n\t\t'type': 'tag.type',\n\t\t'year': 'tag.year',\n\t\t'created': 'stat.created',\n\t\t'album': 'tag.album',\n\t\t'path': 'path',\n\t\t'level': 'tag.level',\n\t\t'genre': 'tag.genre'\n\t};\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.folder, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryFolder): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('path', query.path);\n\t\tq.startsWith('path', query.inPath ? ensureTrailingPathSeparator(query.inPath) : undefined);\n\t\tq.term('tag.mbAlbumID', query.mbAlbumID);\n\t\tq.term('tag.mbArtistID', query.mbArtistID);\n\t\tq.term('tag.genre', query.genre);\n\t\tq.term('tag.title', query.title);\n\t\tq.term('tag.album', query.album);\n\t\tq.term('rootID', query.rootID);\n\t\tq.term('parentID', query.parentID);\n\t\tq.term('tag.level', query.level);\n\t\tq.term('tag.artist', query.artist);\n\t\tq.terms('tag.artist', query.artists);\n\t\tq.terms('tag.type', query.types);\n\t\tq.range('tag.year', query.toYear, query.fromYear);\n\t\tq.range('stat.created', undefined, query.newerThan);\n\t\tq.match('tag.title', query.query);\n\t\treturn q.get(query, this.fieldMap);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Episode} from './episode.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryEpisode extends SearchQuery {\n\tpodcastID?: string;\n\tpodcastIDs?: Array<string>;\n\tname?: string;\n\tstatus?: string;\n\tnewerThan?: number;\n}\n\nexport class EpisodeStore extends BaseStore<Episode, SearchQueryEpisode> {\n\tfieldMap: { [name: string]: string } = {\n\t\t'podcastIDs': 'podcastID',\n\t\t'podcastID': 'podcastID',\n\t\t'status': 'status',\n\t\t'date': 'date',\n\t\t'name': 'name',\n\t\t'created': 'stat.created'\n\t};\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.episode, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryEpisode): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.terms('podcastID', query.podcastIDs);\n\t\tq.term('podcastID', query.podcastID);\n\t\tq.term('status', query.status);\n\t\tq.term('name', query.name);\n\t\tq.range('date', undefined, query.newerThan);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query, this.fieldMap);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Album} from './album.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryAlbum extends SearchQuery {\n\tname?: string;\n\trootID?: string;\n\tartist?: string;\n\tartistID?: string;\n\ttrackID?: string;\n\ttrackIDs?: Array<string>;\n\tmbAlbumID?: string;\n\tmbArtistID?: string;\n\tgenre?: string;\n\tnewerThan?: number;\n\tfromYear?: number;\n\ttoYear?: number;\n}\n\nexport class AlbumStore extends BaseStore<Album, SearchQueryAlbum> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.album, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryAlbum): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('rootIDs', query.rootID);\n\t\tq.term('artistID', query.artistID);\n\t\tq.term('genre', query.genre);\n\t\tq.term('mbAlbumID', query.mbAlbumID);\n\t\tq.term('mbArtistID', query.mbArtistID);\n\t\tq.term('trackIDs', query.trackID);\n\t\tq.terms('trackIDs', query.trackIDs);\n\t\tq.term('artist', query.artist);\n\t\tq.term('name', query.name);\n\t\tq.range('year', query.toYear, query.fromYear);\n\t\tq.range('created', undefined, query.newerThan);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Artist} from './artist.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryArtist extends SearchQuery {\n\tname?: string;\n\tnames?: Array<string>;\n\tid?: string;\n\tids?: Array<string>;\n\ttrackID?: string;\n\ttrackIDs?: Array<string>;\n\trootID?: string;\n\tmbArtistID?: string;\n\talbumID?: string;\n\t// genre?: string;\n\tnewerThan?: number;\n\t// fromYear?: number;\n\t// toYear?: number;\n}\n\nexport class ArtistStore extends BaseStore<Artist, SearchQueryArtist> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.artist, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryArtist): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.terms('trackIDs', query.trackIDs);\n\t\tq.terms('name', query.names);\n\t\tq.term('rootIDs', query.rootID);\n\t\tq.term('albumIDs', query.albumID);\n\t\tq.term('trackIDs', query.trackID);\n\t\tq.term('name', query.name);\n\t\t// q.term('genre', query.genre);\n\t\tq.term('mbArtistID', query.mbArtistID);\n\t\t// q.range('year', query.toYear, query.fromYear);\n\t\tq.range('created', undefined, query.newerThan);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Radio} from './radio.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryRadio extends SearchQuery {\n\tname?: string;\n\turl?: string;\n\thomepage?: string;\n}\n\nexport class RadioStore extends BaseStore<Radio, SearchQueryRadio> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.radio, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryRadio): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('url', query.url);\n\t\tq.term('homepage', query.homepage);\n\t\tq.term('name', query.name);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query);\n\t}\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {PlayQueue} from './playqueue.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryPlayQueue extends SearchQuery {\n\tuserID?: string;\n}\n\nexport class PlayQueueStore extends BaseStore<PlayQueue, SearchQueryPlayQueue> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.playqueue, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryPlayQueue): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('userID', query.userID);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Root} from './root.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryRoot extends SearchQuery {\n\tname?: string;\n\tpath?: string;\n}\n\nexport class RootStore extends BaseStore<Root, SearchQueryRoot> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.root, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryRoot): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('name', query.name);\n\t\tq.term('path', query.path);\n\t\tq.match('name', query.query);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Bookmark} from './bookmark.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryBookmark extends SearchQuery {\n\tuserID?: string;\n\tdestID?: string;\n\tdestIDs?: Array<string>;\n}\n\nexport class BookmarkStore extends BaseStore<Bookmark, SearchQueryBookmark> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.bookmark, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryBookmark): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('userID', query.userID);\n\t\tq.term('destID', query.destID);\n\t\tq.terms('destID', query.destIDs);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Podcast} from './podcast.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryPodcast extends SearchQuery {\n\turl?: string;\n\ttitle?: string;\n\tstatus?: string;\n\tnewerThan?: number;\n}\n\nexport class PodcastStore extends BaseStore<Podcast, SearchQueryPodcast> {\n\tfieldMap: { [name: string]: string } = {\n\t\t'url': 'url',\n\t\t'title': 'tag.title',\n\t\t'status': 'status',\n\t\t'query': 'tag.title',\n\t\t'created': 'created'\n\t};\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.podcast, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryPodcast): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('url', query.url);\n\t\tq.term('tag.title', query.title);\n\t\tq.term('status', query.status);\n\t\tq.range('created', undefined, query.newerThan);\n\t\tq.match('tag.title', query.query);\n\t\treturn q.get(query, this.fieldMap);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {Playlist} from './playlist.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryPlaylist extends SearchQuery {\n\tname?: string;\n\tuserID?: string;\n\tisPublic?: boolean;\n\ttrackID?: string;\n\ttrackIDs?: Array<string>;\n\tnewerThan?: number;\n}\n\nexport class PlaylistStore extends BaseStore<Playlist, SearchQueryPlaylist> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.playlist, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryPlaylist): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('trackIDs', query.trackID);\n\t\tq.terms('trackIDs', query.trackIDs);\n\t\tq.term('userID', query.userID);\n\t\tq.term('name', query.name);\n\t\tq.bool('isPublic', query.isPublic);\n\t\tq.match('name', query.query);\n\t\tq.range('created', undefined, query.newerThan);\n\t\treturn q.get(query);\n\t}\n\n}\n","import {DBObjectType} from '../../types';\nimport {BaseStore, SearchQuery} from '../base/base.store';\nimport {QueryHelper} from '../base/base.store';\nimport {State, States} from './state.model';\nimport {Database, DatabaseQuery} from '../../db/db.model';\n\nexport interface SearchQueryState extends SearchQuery {\n\tdestID?: string;\n\tdestIDs?: Array<string>;\n\tuserID?: string;\n\ttype?: DBObjectType;\n\tisPlayed?: boolean;\n\tisFaved?: boolean;\n\tminRating?: number;\n\tmaxRating?: number;\n}\n\nexport class StateStore extends BaseStore<State, SearchQueryState> {\n\n\tconstructor(db: Database) {\n\t\tsuper(DBObjectType.state, db);\n\t}\n\n\tprotected transformQuery(query: SearchQueryState): DatabaseQuery {\n\t\tconst q = new QueryHelper();\n\t\tq.term('userID', query.userID);\n\t\tq.term('destID', query.destID);\n\t\tq.terms('destID', query.destIDs);\n\t\tq.term('destType', query.type);\n\t\tq.notNull('faved', query.isFaved);\n\t\tq.range('rated', query.maxRating, query.minRating);\n\t\tq.range('played', undefined, query.isPlayed ? 1 : undefined);\n\t\treturn q.get(query);\n\t}\n\n}\n","import elasticsearch from 'elasticsearch';\nimport {DBObjectType} from '../../types';\nimport {ESSequence} from './es-sequence';\nimport Logger from '../../utils/logger';\nimport {mapping} from './mapping';\nimport {wait} from '../../utils/wait';\nimport {DBObject} from '../../objects/base/base.model';\nimport {Database, DatabaseIndex, DatabaseQuery} from '../db.model';\nimport {ElasticsearchConfig} from './config-elastic';\n\nconst log = Logger('DB.elastic');\n\nexport class DBIndexElastic<T extends DBObject> implements DatabaseIndex<T> {\n\tprotected _index: string;\n\tprotected _type: string;\n\tprotected _map: any;\n\tpublic type: DBObjectType;\n\tpublic db: DBElastic;\n\n\tconstructor(type: DBObjectType, db: DBElastic) {\n\t\tthis.type = type;\n\t\tif (type === undefined) {\n\t\t\tthis._index = db.indexName('*'); // 'all';\n\t\t\tthis._type = '';\n\t\t} else {\n\t\t\tthis._type = DBObjectType[type];\n\t\t\tthis._index = db.indexName(DBObjectType[type]);\n\t\t}\n\t\tthis._map = mapping[this._type];\n\t\tthis.db = db;\n\t}\n\n\tprivate hit2Obj(hit: any): T {\n\t\thit._source.id = hit._source.id.toString();\n\t\thit._source.type = DBObjectType[hit._type];\n\t\treturn <T>hit._source;\n\t}\n\n\tprivate filterProperties(o: T): any {\n\t\tconst result: any = Object.assign({}, o);\n\t\tresult.type = undefined;\n\t\treturn result;\n\t}\n\n\tprivate getPropertyMapping(key: string): any {\n\t\tconst parts = key.split('.');\n\t\tlet o = this._map;\n\t\tfor (const p of parts) {\n\t\t\to = o.properties[p];\n\t\t}\n\t\treturn o;\n\t}\n\n\tprivate translateElasticQuery(query: DatabaseQuery) {\n\t\tif (query.all) {\n\t\t\treturn {match_all: {}};\n\t\t}\n\t\tlet must: Array<any> = [];\n\t\tif (query.term) {\n\t\t\tconst o = query.term;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tconst prop = this.getPropertyMapping(key);\n\t\t\t\t\tif (!prop) {\n\t\t\t\t\t\tconsole.log('Unknown prop', this._type, key);\n\t\t\t\t\t}\n\t\t\t\t\tif (prop && prop.type === 'text') {\n\t\t\t\t\t\tterm[key + '.keyword'] = o[key];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn {'term': term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.terms) {\n\t\t\tconst o = query.terms;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tconst prop = this.getPropertyMapping(key);\n\t\t\t\t\tif (!prop) {\n\t\t\t\t\t\tconsole.log('Unknown prop', this._type, key);\n\t\t\t\t\t}\n\t\t\t\t\tif (prop && prop.type === 'text') {\n\t\t\t\t\t\tterm[key + '.keyword'] = o[key];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\t}\n\t\t\t\t\treturn {'terms': term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.match) {\n\t\t\tconst o = query.match;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\treturn {'match_phrase_prefix': term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWith) {\n\t\t\tconst o = query.startsWith;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\treturn {'prefix': term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWiths) {\n\t\t\tconst o = query.startsWiths;\n\t\t\tObject.keys(o).forEach(key => {\n\t\t\t\to[key].forEach(s => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = s;\n\t\t\t\t\tmust.push({'prefix': term});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tif (query.range) {\n\t\t\tconst o = query.range;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst vals = o[key];\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {'gte': vals.gte, 'lte': vals.lte};\n\t\t\t\t\treturn {'range': term};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.notNull) {\n\t\t\tconst o = query.notNull;\n\t\t\tmust = must.concat(o.map(key => {\n\t\t\t\treturn {'exists': {'field': key}};\n\t\t\t}));\n\t\t}\n\t\treturn {\n\t\t\tbool: {\n\t\t\t\tmust: must\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async scroll(response: elasticsearch.SearchResponse<T>, onHits: (hits: Array<any>) => Promise<void>): Promise<void> {\n\t\tlet count = 0;\n\t\tconst client = this.db.client;\n\n\t\tasync function getMoreUntilDone(res: elasticsearch.SearchResponse<T>) {\n\t\t\tcount += res.hits.hits.length;\n\t\t\tawait onHits(res.hits.hits);\n\t\t\tif (res.hits.total !== count && res._scroll_id) {\n\t\t\t\t// now we can call scroll over and over\n\t\t\t\tconst next = await client.scroll<T>({scrollId: res._scroll_id, scroll: '30s'});\n\t\t\t\tawait getMoreUntilDone(next);\n\t\t\t}\n\t\t}\n\n\t\tawait getMoreUntilDone(response);\n\t}\n\n\tasync add(body: T): Promise<string> {\n\t\tconst id = await this.db.getNewId();\n\t\tbody.id = id;\n\t\tawait this.db.client.index({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: this.filterProperties(body),\n\t\t\tid,\n\t\t\trefresh: <elasticsearch.Refresh>this.db.indexRefresh\n\t\t});\n\t\treturn id;\n\t}\n\n\tasync replace(id: string, body: T): Promise<void> {\n\t\tawait this.db.client.index({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: this.filterProperties(body),\n\t\t\tid,\n\t\t\trefresh: <elasticsearch.Refresh>this.db.indexRefresh\n\t\t});\n\t}\n\n\tasync upsert(id: string, body: T): Promise<void> {\n\t\tif (!id || id.length === 0) {\n\t\t\tawait this.add(body);\n\t\t\treturn;\n\t\t}\n\t\tawait this.db.client.index({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: this.filterProperties(body),\n\t\t\tid,\n\t\t\trefresh: <elasticsearch.Refresh>this.db.indexRefresh\n\t\t});\n\t}\n\n\tasync removeByQuery(query: DatabaseQuery): Promise<number> {\n\t\tconst response = await this.db.client.deleteByQuery({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query)\n\t\t\t},\n\t\t\trefresh: <elasticsearch.Refresh>this.db.indexRefresh\n\t\t});\n\t\treturn response.deleted;\n\t}\n\n\tasync remove(id: string | Array<string>): Promise<void> {\n\t\tif (id.length === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tif (Array.isArray(id)) {\n\t\t\tawait this.db.client.deleteByQuery({\n\t\t\t\tindex: this._index,\n\t\t\t\ttype: this._type,\n\t\t\t\tbody: {\n\t\t\t\t\tquery: {\n\t\t\t\t\t\t'terms': {\n\t\t\t\t\t\t\t'_id': id\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trefresh: <elasticsearch.Refresh>this.db.indexRefresh\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.db.client.delete({\n\t\t\t\tindex: this._index,\n\t\t\t\ttype: this._type,\n\t\t\t\tid: <string>id,\n\t\t\t\trefresh: <elasticsearch.Refresh>this.db.indexRefresh\n\t\t\t});\n\t\t}\n\t}\n\n\tasync byId(id: string): Promise<T | undefined> {\n\t\tif (this.type === undefined) {\n\t\t\treturn await this.queryOne({term: {id: id}});\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst response = await this.db.client.get({\n\t\t\t\t\tindex: this._index,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t\tid: id\n\t\t\t\t});\n\t\t\t\tif (!response.found) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\treturn this.hit2Obj(response);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e.statusCode !== 404) {\n\t\t\t\t\tPromise.reject(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync byIds(ids: Array<string>): Promise<Array<T>> {\n\t\tif (ids.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst response = await this.db.client.mget({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: {'ids': ids}\n\t\t});\n\t\tif (!response.docs) {\n\t\t\treturn [];\n\t\t}\n\t\treturn response.docs.filter((doc) => {\n\t\t\treturn doc.found;\n\t\t}).map((doc) => {\n\t\t\treturn this.hit2Obj(doc);\n\t\t});\n\t}\n\n\tasync query(query: DatabaseQuery): Promise<Array<T>> {\n\t\tlet list: Array<T> = [];\n\t\tconst response = await this.db.client.search<T>({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tscroll: '30s',\n\t\t\tsize: 100,\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query)\n\t\t\t}\n\t\t});\n\t\tawait this.scroll(response, async (hits) => {\n\t\t\tlist = list.concat(hits.map(this.hit2Obj));\n\t\t});\n\t\treturn list;\n\t}\n\n\tasync queryOne(query: DatabaseQuery): Promise<T | undefined> {\n\t\tconst response = await this.db.client.search({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tsize: 1,\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query)\n\t\t\t}\n\t\t});\n\t\tif (response.hits.total > 0) {\n\t\t\treturn this.hit2Obj(response.hits.hits[0]);\n\t\t}\n\t\treturn;\n\t}\n\n\tasync iterate(query: DatabaseQuery, onItem: (items: Array<T>) => Promise<void>): Promise<void> {\n\t\tconst response = await this.db.client.search<T>({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tscroll: '30s',\n\t\t\tsize: 100,\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query)\n\t\t\t}\n\t\t});\n\t\tawait this.scroll(response, async (hits) => {\n\t\t\tawait onItem(hits.map(this.hit2Obj));\n\t\t});\n\t}\n\n\tasync queryIds(query: DatabaseQuery): Promise<Array<string>> {\n\t\tlet list: Array<string> = [];\n\t\tconst response = await this.db.client.search<T>({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tscroll: '30s',\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query),\n\t\t\t\tstored_fields: []\n\t\t\t}\n\t\t});\n\t\tawait this.scroll(response, async (hits) => {\n\t\t\tlist = list.concat(hits.map(hit => hit._id.toString()));\n\t\t});\n\t\treturn list;\n\t}\n\n\tasync aggregate(query: DatabaseQuery, field: string): Promise<number> {\n\t\tconst response = await this.db.client.search({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query),\n\t\t\t\t'aggs': {\n\t\t\t\t\t'_count': {\n\t\t\t\t\t\t'cardinality': {\n\t\t\t\t\t\t\t'field': field\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn response.aggregations._count.value;\n\t}\n\n\tasync count(query: DatabaseQuery): Promise<number> {\n\t\tconst response = await this.db.client.search({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tsize: 0,\n\t\t\tbody: {\n\t\t\t\tquery: this.translateElasticQuery(query),\n\t\t\t}\n\t\t});\n\t\treturn response.hits.total;\n\t}\n\n\tasync distinct(fieldname: string): Promise<Array<string>> {\n\t\tconst response = await this.db.client.search({\n\t\t\tindex: this._index,\n\t\t\ttype: this._type,\n\t\t\tbody: {'aggs': {'distinct': {'terms': {'field': fieldname}}}}\n\t\t});\n\t\treturn response.aggregations.distinct.buckets.map((hit: any) => hit.key);\n\t}\n\n}\n\nexport class DBElastic implements Database {\n\tclient: elasticsearch.Client;\n\tsequence: ESSequence;\n\tindexPrefix: string;\n\tindexRefresh: string | undefined;\n\n\tconstructor(config: ElasticsearchConfig) {\n\t\tthis.client = new elasticsearch.Client({host: config.host, log: config.log});\n\t\tthis.sequence = new ESSequence(this.client);\n\t\tthis.indexPrefix = config.indexPrefix;\n\t\tthis.indexRefresh = config.indexRefresh;\n\t}\n\n\tasync drop(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tawait this.resetIndex(type);\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\t\tthis.client.close();\n\t}\n\n\tasync ping(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.client.ping(<elasticsearch.PingParams>{requestTimeout: 10000});\n\t\t} catch (e) {\n\t\t\tlog.error('elasticsearch could not be contacted', e);\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tasync open(): Promise<void> {\n\t\tlog.debug('Open connection to elasticsearch');\n\t\tawait this.sequence.init(this.client);\n\t\tawait this.ping();\n\t\tawait this.check();\n\t}\n\n\tasync getNewId(): Promise<string> {\n\t\tconst id: number = await this.sequence.get(this.indexName('id'));\n\t\treturn id.toString();\n\t}\n\n\tindexName(name: string): string {\n\t\treturn this.indexPrefix + '_' + name;\n\t}\n\n\tprivate getTypes(): Array<DBObjectType> {\n\t\treturn Object.keys(DBObjectType)\n\t\t\t.filter(key => !isNaN(Number(key)))\n\t\t\t.map(key => parseInt(key, 10));\n\t}\n\n\tprivate async resetIndex(type: DBObjectType): Promise<void> {\n\t\tconst index = this.indexName(DBObjectType[type]);\n\t\tconst exists = await this.client.indices.exists({index});\n\t\tif (exists) {\n\t\t\tawait this.client.indices.delete({index});\n\t\t}\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tawait this.resetIndex(type);\n\t\t}\n\t}\n\n\tprivate async createIndex(type: DBObjectType): Promise<void> {\n\t\tconst name = DBObjectType[type];\n\t\tif (!mapping[name]) {\n\t\t\treturn Promise.reject(Promise.reject('Missing Elasticsearch Mapping for type ' + name));\n\t\t}\n\t\tconst index = this.indexName(name);\n\t\tconst m: any = {};\n\t\tm['_default_'] = {'_default_': {'date_detection': false}};\n\t\tm[name] = mapping[name];\n\t\tawait this.client.indices.create({index, body: {'mappings': m}});\n\t}\n\n\tprivate async checkIndex(type: DBObjectType): Promise<boolean> {\n\t\tconst name = DBObjectType[type];\n\t\tconst index = this.indexName(name);\n\t\tconst exists = await this.client.indices.exists({index});\n\t\tif (!exists) {\n\t\t\tawait this.createIndex(type);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync check(): Promise<void> {\n\t\tlet waitAfter = false;\n\t\tfor (const type of this.getTypes()) {\n\t\t\twaitAfter = await this.checkIndex(type) || waitAfter;\n\t\t}\n\t\tif (waitAfter) {\n\t\t\tawait wait(1000);\n\t\t}\n\t}\n\n\tpublic getDBIndex<T extends DBObject>(type: DBObjectType) {\n\t\treturn new DBIndexElastic<T>(type, this);\n\t}\n}\n","module.exports = require(\"elasticsearch\");","import elasticsearch from 'elasticsearch';\n\nconst esTypeMapping = {\n\t_source: {enabled: false},\n\t_all: {enabled: false},\n\t// _type: {index: 'no'},\n\tenabled: false\n};\n\nexport class ESSequence {\n\tclient: elasticsearch.Client;\n\tprivate initPromise: Promise<any> | null = null;\n\tprivate initError: Promise<any> | null = null;\n\tprivate cacheFillPromise: Promise<any> | null = null;\n\tprivate cache: { [sequenceName: string]: Array<string> } = {};\n\tprivate cacheSize = 100;\n\tprivate options = {esIndex: 'sequences', esType: 'sequence'};\n\n\tconstructor(client: elasticsearch.Client) {\n\t\tthis.client = client;\n\t\tif (!isInjectedClientValid(client)) {\n\t\t\tthrow new Error('Init was called with an invalid client parameter value.');\n\t\t}\n\t}\n\n\tinit(options?: any, cacheSize?: number): Promise<any> {\n\t\t// The following checks are done before the init promise is created\n\t\t// because errors thrown in the init promise are stored in _initError.\n\t\t// If a check fails it should look as if init was not called.\n\t\tif (!isInjectedClientValid(this.client)) {\n\t\t\treturn Promise.reject(new Error('Init was called with an invalid client parameter value.'));\n\t\t}\n\t\tif (this.initPromise !== null) {\n\t\t\treturn Promise.reject(new Error('Init was called while a previous init is pending.'));\n\t\t}\n\t\tif (this.cacheFillPromise !== null) {\n\t\t\treturn Promise.reject(new Error('Init was called while get requests are pending.'));\n\t\t}\n\t\tif (!isInjectedCacheSizeValid(cacheSize)) {\n\t\t\treturn Promise.reject(new Error('Init was called with an invalid cacheSize parameter value.'));\n\t\t}\n\t\tthis.initPromise = new Promise((resolve) => {\n\t\t\tthis.cache = {}; // In case init is called multiple times.\n\t\t\tthis.cacheSize = 100;\n\t\t\tthis.initError = null;\n\t\t\tif (cacheSize !== undefined) {\n\t\t\t\tthis.cacheSize = cacheSize;\n\t\t\t}\n\t\t\tif (isObject(options)) {\n\t\t\t\tthis.options = Object.assign(this.options, options);\n\t\t\t}\n\t\t\tresolve(this.initEsIndexIfNeeded());\n\t\t}).catch((e) => {\n\t\t\tthis.initError = e;\n\t\t\tthrow e;\n\t\t}).then(() => {\n\t\t\tthis.initPromise = null;\n\t\t});\n\t\treturn this.initPromise;\n\t}\n\n\taddMappingToEsIndexIfMissing(): Promise<any> {\n\t\tconst mapping: any = {};\n\t\tmapping[this.options.esType] = esTypeMapping;\n\t\treturn this.client.indices.putMapping({\n\t\t\tindex: this.options.esIndex,\n\t\t\ttype: this.options.esType,\n\t\t\t// ignore_conflicts: true,\n\t\t\tbody: mapping\n\t\t});\n\t}\n\n\tinitEsIndexIfNeeded(): Promise<any> {\n\t\treturn this.client.indices.exists({index: this.options.esIndex}).then(response => {\n\t\t\tif (response) {\n\t\t\t\treturn this.addMappingToEsIndexIfMissing();\n\t\t\t}\n\t\t\tconst config: any = {\n\t\t\t\tsettings: {\n\t\t\t\t\tnumber_of_shards: 1,\n\t\t\t\t\tauto_expand_replicas: '0-all'\n\t\t\t\t},\n\t\t\t\tmappings: {}\n\t\t\t};\n\t\t\tconfig.mappings[this.options.esType] = esTypeMapping;\n\t\t\treturn this.client.indices.create({\n\t\t\t\tindex: this.options.esIndex,\n\t\t\t\tbody: config\n\t\t\t});\n\t\t});\n\t}\n\n\tfillCache(sequenceName: string): Promise<any> {\n\t\tthis.cacheFillPromise = new Promise(resolve => {\n\t\t\tif (!this.cache[sequenceName]) {\n\t\t\t\tthis.cache[sequenceName] = [];\n\t\t\t}\n\t\t\tconst bulkParams: elasticsearch.BulkIndexDocumentsParams = {body: []};\n\t\t\tfor (let i = 0; i < this.cacheSize; i += 1) {\n\t\t\t\t// Action\n\t\t\t\tbulkParams.body.push({index: {_index: this.options.esIndex, _type: this.options.esType, _id: sequenceName}});\n\t\t\t\t// Empty document\n\t\t\t\tbulkParams.body.push({});\n\t\t\t}\n\t\t\tresolve(\n\t\t\t\tthis.client.bulk(bulkParams).then(response => {\n\t\t\t\t\tfor (let k = 0; k < response.items.length; k += 1) {\n\t\t\t\t\t\t// This is the core trick: The document's version is an auto-incrementing integer.\n\t\t\t\t\t\tthis.cache[sequenceName].push(response.items[k].index._version);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}).then(() => {\n\t\t\tthis.cacheFillPromise = null;\n\t\t});\n\t\treturn this.cacheFillPromise;\n\t}\n\n\tprivate interal_get(sequenceName: string): Promise<any> {\n\t\tif (this.initError !== null) {\n\t\t\treturn Promise.reject(this.initError);\n\t\t}\n\t\tif (this.cache[sequenceName] && this.cache[sequenceName].length > 0) {\n\t\t\treturn Promise.resolve(this.cache[sequenceName].shift());\n\t\t}\n\n\t\tconst returnValue = (): Promise<any> => {\n\t\t\treturn this.interal_get(sequenceName);\n\t\t};\n\n\t\tif (this.cacheFillPromise !== null) {\n\t\t\treturn this.cacheFillPromise.then(returnValue);\n\t\t} else {\n\t\t\treturn this.fillCache(sequenceName).then(returnValue);\n\t\t}\n\t}\n\n\tpublic get(sequenceName: string): Promise<any> {\n\t\tif (!this.client) {\n\t\t\tthrow new Error('Please run init(...) first to provide an elasticsearch client.');\n\t\t}\n\t\tif ((typeof sequenceName !== 'string') || sequenceName.length === 0) {\n\t\t\tthrow new Error('The parameter value for sequenceName is invalid.');\n\t\t}\n\t\tif (this.initPromise !== null) {\n\t\t\t// Defer until init is done\n\t\t\treturn this.initPromise.then(() => this.interal_get(sequenceName));\n\t\t}\n\t\treturn this.interal_get(sequenceName);\n\t}\n\n\tpublic getCacheSize(sequenceName: string): number {\n\t\tif (!this.cache[sequenceName]) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn this.cache[sequenceName].length;\n\t\t}\n\t}\n\n}\n\nfunction isObject(val: any): boolean {\n\treturn typeof val === 'object';\n}\n\nfunction isFunction(val: any): boolean {\n\treturn typeof val === 'function';\n}\n\nfunction isInjectedClientValid(client: elasticsearch.Client) {\n\treturn !((!isObject(client) && !isFunction(client)) ||\n\t\t(!isObject(client.indices) && !isFunction(client.indices)) ||\n\t\t!isFunction(client.indices.create) ||\n\t\t!isFunction(client.indices.exists) ||\n\t\t!isFunction(client.indices.putMapping) ||\n\t\t!isFunction(client.bulk));\n}\n\nfunction isInjectedCacheSizeValid(cacheSize: number | any): boolean {\n\treturn ((cacheSize === undefined) || (typeof cacheSize === 'number' && isFinite(cacheSize) && Math.floor(cacheSize) === cacheSize));\n}\n","const type_bool = {type: 'boolean'};\n\nconst type_int = {type: 'long'};\n\nconst type_string = {type: 'text', fields: {keyword: {type: 'keyword'}}};\n\nconst type_key = {type: 'keyword'};\n\nconst type_Root = {\n\tproperties: {\n\t\tname: type_string,\n\t\tpath: type_key,\n\t\tcreated: type_int,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_UserRoles = {\n\tproperties: {\n\t\tstreamRole: type_bool,\n\t\tuploadRole: type_bool,\n\t\tadminRole: type_bool,\n\t\tpodcastRole: type_bool\n\t}\n};\n\nconst type_User = {\n\tproperties: {\n\t\tname: type_string,\n\t\tpass: type_key,\n\t\temail: type_key,\n\t\tcreated: type_int,\n\t\tscrobblingEnabled: type_bool,\n\t\tavatarLastChanged: type_int,\n\t\tavatar: type_key,\n\t\tmaxBitRate: type_int,\n\t\tallowedfolder: type_key,\n\t\troles: type_UserRoles,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_FolderTag = {\n\tproperties: {\n\t\ttracks: type_int,\n\t\tlevel: type_int,\n\t\ttype: type_key,\n\t\tgenre: type_key,\n\t\talbum: type_key,\n\t\tartist: type_key,\n\t\tartistSort: type_key,\n\t\talbumType: type_key,\n\t\ttitle: type_string,\n\t\timage: type_key,\n\t\tyear: type_int,\n\t\tmbAlbumID: type_key,\n\t\tmbArtistID: type_key\n\t}\n};\n\nconst type_MusicBrainz_Rating = {\n\tproperties: {\n\t\tvotesCount: type_int,\n\t\tvalue: type_int\n\t}\n};\n\nconst type_MusicBrainz_Alias = {\n\tproperties: {\n\t\tname: type_string,\n\t\tsortName: type_key,\n\t\tlocale: type_key,\n\t\ttype: type_key,\n\t\ttypeId: type_key,\n\t\tprimary: type_key,\n\t\tbeginDate: type_key,\n\t\tendDate: type_key,\n\t\tended: type_bool\n\t}\n};\n\nconst type_MusicBrainz_ArtistCredit = {\n\tproperties: {\n\t\tname: type_string,\n\t\tjoinphrase: type_key,\n\t\tartist: {\n\t\t\tproperties: {\n\t\t\t\tid: type_key,\n\t\t\t\tname: type_string,\n\t\t\t\tsortName: type_key,\n\t\t\t\tdisambiguation: type_key,\n\t\t\t\taliases: type_MusicBrainz_Alias\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst type_MusicBrainz_RecordingBase = {\n\tproperties: {\n\t\tid: type_key,\n\t\ttitle: type_string,\n\t\tdisambiguation: type_key,\n\t\tlength: type_int,\n\t\tvideo: type_bool,\n\t\trating: type_MusicBrainz_Rating,\n\t\taliases: type_MusicBrainz_Alias,\n\t\tartistCredit: type_MusicBrainz_ArtistCredit,\n\t\tisrcs: type_key\n\t}\n};\n\nconst type_MusicBrainz_ReleaseTrack = {\n\tproperties: {\n\t\tid: type_key,\n\t\ttitle: type_string,\n\t\tposition: type_int,\n\t\tlength: type_int,\n\t\tnumber: type_key,\n\t\trecording: type_MusicBrainz_RecordingBase,\n\t\tartistCredit: type_MusicBrainz_ArtistCredit\n\t}\n};\n\nconst type_MusicBrainz_Disc = {\n\tproperties: {\n\t\tid: type_key,\n\t\tsectors: type_int,\n\t\toffsetCount: type_int,\n\t\toffsets: type_int\n\t}\n};\n\nconst type_MusicBrainz_ReleaseMedia = {\n\tproperties: {\n\t\tformat: type_key,\n\t\tformatId: type_key,\n\t\ttitle: type_string,\n\t\tdiscCount: type_int,\n\t\ttrackCount: type_int,\n\t\tposition: type_int,\n\t\ttrackOffset: type_int,\n\t\ttracks: type_MusicBrainz_ReleaseTrack,\n\t\tdiscs: type_MusicBrainz_Disc\n\t}\n};\n\nconst type_MusicBrainz_ReleaseGroupBase = {\n\tproperties: {\n\t\tid: type_key,\n\t\ttitle: type_string,\n\t\tdisambiguation: type_key,\n\t\tfirstReleaseDate: type_key,\n\t\tprimaryType: type_key,\n\t\tprimaryTypeId: type_key,\n\t\tsecondaryTypes: type_key,\n\t\tsecondaryTypeIds: type_key,\n\t\trating: type_MusicBrainz_Rating,\n\t\tartistCredit: type_MusicBrainz_ArtistCredit\n\t}\n};\n\nconst type_MusicBrainz_Label = {\n\tproperties: {\n\t\tcatalogNumber: type_key,\n\t\tlabel: {\n\t\t\tproperties: {\n\t\t\t\tid: type_key,\n\t\t\t\tname: type_string,\n\t\t\t\tdisambiguation: type_key,\n\t\t\t\tlabelCode: type_key,\n\t\t\t\tsortName: type_key\n\t\t\t}\n\t\t},\n\t\taliases: {\n\t\t\tproperties: {\n\t\t\t\tname: type_string,\n\t\t\t\tsortName: type_key,\n\t\t\t\tended: type_bool\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst type_MusicBrainz_ReleaseEvent = {\n\tproperties: {\n\t\tdate: type_key,\n\t\tarea: {\n\t\t\tproperties: {\n\t\t\t\tid: type_key,\n\t\t\t\tname: type_string,\n\t\t\t\tsortName: type_key,\n\t\t\t\tdisambiguation: type_key,\n\t\t\t\tiso31661Codes: type_key\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst type_MusicBrainz_Release = {\n\tproperties: {\n\t\tmedia: type_MusicBrainz_ReleaseMedia,\n\t\tscore: type_int,\n\t\tcount: type_int,\n\t\tid: type_key,\n\t\ttitle: type_string,\n\t\tsortName: type_key,\n\t\tstatus: type_key,\n\t\tstatusId: type_key,\n\t\tdate: type_key,\n\t\tcountry: type_key,\n\t\tpackaging: type_key,\n\t\tpackagingId: type_key,\n\t\tdisambiguation: type_key,\n\t\tannotation: type_key,\n\t\tquality: type_key,\n\t\tbarcode: type_key,\n\t\tasin: type_key,\n\t\ttextRepresentation: {\n\t\t\tproperties: {\n\t\t\t\tlanguage: type_key,\n\t\t\t\tscript: type_key\n\t\t\t}\n\t\t},\n\t\ttrackCount: type_int,\n\t\tartistCredit: type_MusicBrainz_ArtistCredit,\n\t\treleaseGroup: type_MusicBrainz_ReleaseGroupBase,\n\t\tlabelInfo: type_MusicBrainz_Label,\n\t\ttags: {\n\t\t\tproperties: {\n\t\t\t\tcount: type_int,\n\t\t\t\tname: type_string\n\t\t\t}\n\t\t},\n\t\treleaseEvents: type_MusicBrainz_ReleaseEvent,\n\t\tcoverArtArchive: {\n\t\t\tproperties: {\n\t\t\t\tfront: type_bool,\n\t\t\t\tback: type_bool,\n\t\t\t\tdarkened: type_bool,\n\t\t\t\tartwork: type_bool,\n\t\t\t\tcount: type_int\n\t\t\t}\n\t\t}\n\t}\n};\n\nconst type_MetaInfoAlbum = {\n\tproperties: {\n\t\tname: type_string,\n\t\tartist: type_key,\n\t\tmbid: type_key,\n\t\turl: type_key,\n\t\timage: {\n\t\t\tproperties: {\n\t\t\t\tsmall: type_key,\n\t\t\t\tmedium: type_key,\n\t\t\t\tlarge: type_key\n\t\t\t}\n\t\t},\n\t\ttags: {\n\t\t\tproperties: {\n\t\t\t\tname: type_string,\n\t\t\t\turl: type_key\n\t\t\t}\n\t\t},\n\t\tdescription: type_key,\n\t\treleases: type_MusicBrainz_Release\n\t}\n};\n\nconst type_MetaInfoImage = {\n\tproperties: {\n\t\tsmall: type_key,\n\t\tmedium: type_key,\n\t\tlarge: type_key\n\t}\n};\n\nconst type_MetaInfoSimilarArtist = {\n\tproperties: {\n\t\tname: type_string,\n\t\turl: type_key,\n\t\tmbid: type_key,\n\t\timage: type_MetaInfoImage\n\t}\n};\n\nconst type_MetaInfoArtist = {\n\tproperties: {\n\t\tname: type_string,\n\t\tmbid: type_key,\n\t\turl: type_key,\n\t\timage: type_MetaInfoImage,\n\t\ttags: {\n\t\t\tproperties: {\n\t\t\t\tname: type_string,\n\t\t\t\turl: type_key\n\t\t\t}\n\t\t},\n\t\tdescription: type_key,\n\t\tsimilar: type_MetaInfoSimilarArtist\n\t}\n};\n\nconst type_MetaInfoTopSong = {\n\tproperties: {\n\t\tname: type_string,\n\t\tartist: {\n\t\t\tproperties: {\n\t\t\t\tname: type_string,\n\t\t\t\tmbid: type_key,\n\t\t\t\turl: type_key\n\t\t\t}\n\t\t},\n\t\tmbid: type_key,\n\t\turl: type_key,\n\t\trank: type_key,\n\t\timage: type_MetaInfoImage\n\t}\n};\n\nconst type_MetaInfo = {\n\tproperties: {\n\t\talbum: type_MetaInfoAlbum,\n\t\tartist: type_MetaInfoArtist,\n\t\ttopSongs: type_MetaInfoTopSong\n\t}\n};\n\nconst type_Folder = {\n\tproperties: {\n\t\trootID: type_key,\n\t\tpath: type_key,\n\t\tparentID: type_key,\n\t\tstat: {\n\t\t\tproperties: {\n\t\t\t\tcreated: type_int,\n\t\t\t\tmodified: type_int\n\t\t\t}\n\t\t},\n\t\ttag: type_FolderTag,\n\t\tinfo: type_MetaInfo,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_PlayQueue = {\n\tproperties: {\n\t\tuserID: type_key,\n\t\ttrackIDs: type_key,\n\t\tcurrentID: type_key,\n\t\tposition: type_int,\n\t\tchanged: type_int,\n\t\tchangedBy: type_key,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_TrackTag = {\n\tproperties: {\n\t\talbum: type_key,\n\t\talbumSort: type_key,\n\t\talbumArtist: type_key,\n\t\talbumArtistSort: type_key,\n\t\tartist: type_key,\n\t\tartistSort: type_key,\n\t\tgenre: type_key,\n\t\tdisc: type_int,\n\t\ttitle: type_string,\n\t\ttitleSort: type_key,\n\t\ttrack: type_int,\n\t\tyear: type_int,\n\t\tmbTrackID: type_key,\n\t\tmbAlbumType: type_key,\n\t\tmbAlbumArtistID: type_key,\n\t\tmbArtistID: type_key,\n\t\tmbAlbumID: type_key,\n\t\tmbReleaseTrackID: type_key,\n\t\tmbReleaseGroupID: type_key,\n\t\tmbRecordingID: type_key,\n\t\tmbAlbumStatus: type_key,\n\t\tmbReleaseCountry: type_key\n\t}\n};\n\nconst type_TrackMedia = {\n\tproperties: {\n\t\tduration: type_int,\n\t\tbitRate: type_int,\n\t\tformat: type_key,\n\t\tsampleRate: type_int,\n\t\tchannels: type_int,\n\t\tencoded: type_key,\n\t\tmode: type_key,\n\t\tversion: type_key\n\t}\n};\n\nconst type_MetaInfoTrackSimilarSong = {\n\tproperties: {\n\t\tname: type_string,\n\t\tmbid: type_key,\n\t\turl: type_key,\n\t\tduration: type_int,\n\t\tartist: {\n\t\t\tproperties: {\n\t\t\t\tname: type_string,\n\t\t\t\tmbid: type_key,\n\t\t\t\turl: type_key\n\t\t\t}\n\t\t},\n\t\timage: type_MetaInfoImage\n\t}\n};\n\nconst type_MetaInfoTrack = {\n\tproperties: {\n\t\tsimilar: type_MetaInfoTrackSimilarSong\n\t}\n};\n\nconst type_Track = {\n\tproperties: {\n\t\trootID: type_key,\n\t\tparentID: type_key,\n\t\tname: type_string,\n\t\tpath: type_key,\n\t\tstat: {\n\t\t\tproperties: {\n\t\t\t\tcreated: type_int,\n\t\t\t\tmodified: type_int,\n\t\t\t\tsize: type_int\n\t\t\t}\n\t\t},\n\t\talbumID: type_key,\n\t\tartistID: type_key,\n\t\ttag: type_TrackTag,\n\t\tmedia: type_TrackMedia,\n\t\tinfo: type_MetaInfoTrack,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_Album = {\n\tproperties: {\n\t\tname: type_string,\n\t\trootIDs: type_key,\n\t\ttrackIDs: type_key,\n\t\tartistID: type_key,\n\t\tartist: type_key,\n\t\tgenre: type_key,\n\t\tyear: type_int,\n\t\tduration: type_int,\n\t\tcreated: type_int,\n\t\tmbArtistID: type_key,\n\t\tmbAlbumID: type_key,\n\t\tinfo: type_MetaInfo,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_Artist = {\n\tproperties: {\n\t\tname: type_string,\n\t\tnameSort: type_key,\n\t\trootIDs: type_key,\n\t\ttrackIDs: type_key,\n\t\talbumIDs: type_key,\n\t\tmbArtistID: type_key,\n\t\tinfo: type_MetaInfo,\n\t\tcreated: type_int,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_Radio = {\n\tproperties: {\n\t\tname: type_string,\n\t\turl: type_key,\n\t\thomepage: type_key,\n\t\tdisabled: type_bool,\n\t\tcreated: type_int,\n\t\tchanged: type_int,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_State = {\n\tproperties: {\n\t\tuserID: type_key,\n\t\tdestID: type_key,\n\t\tdestType: type_int,\n\t\tplayed: type_int,\n\t\tlastplayed: type_int,\n\t\tfaved: type_int,\n\t\trated: type_int,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_Playlist = {\n\tproperties: {\n\t\tname: type_string,\n\t\tuserID: type_key,\n\t\tcomment: type_key,\n\t\tcoverArt: type_key,\n\t\tchanged: type_int,\n\t\tcreated: type_int,\n\t\tallowedUser: type_key,\n\t\tisPublic: type_bool,\n\t\tduration: type_int,\n\t\ttrackIDs: type_key,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_PodcastTag = {\n\tproperties: {\n\t\ttitle: type_string,\n\t\tlink: type_key,\n\t\tauthor: type_key,\n\t\tdescription: type_key,\n\t\tgenerator: type_key,\n\t\timage: type_key,\n\t\tcategories: type_key\n\t}\n};\n\nconst type_Podcast = {\n\tproperties: {\n\t\turl: type_key,\n\t\tcreated: type_int,\n\t\tlastCheck: type_int,\n\t\tstatus: type_key,\n\t\terrorMessage: type_key,\n\t\ttag: type_PodcastTag,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_PodcastEpisodeChapter = {\n\tproperties: {\n\t\tstart: type_int,\n\t\ttitle: type_string\n\t}\n};\n\nconst type_PodcastEpisodeEnclosure = {\n\tproperties: {\n\t\turl: type_key,\n\t\ttype: type_key,\n\t\tlength: type_int\n\t}\n};\n\nconst type_Episode = {\n\tproperties: {\n\t\tpodcastID: type_key,\n\t\tstatus: type_key,\n\t\terror: type_key,\n\t\tpath: type_key,\n\t\tlink: type_key,\n\t\tsummary: type_key,\n\t\tdate: type_int,\n\t\tname: type_string,\n\t\tguid: type_key,\n\t\tauthor: type_key,\n\t\tchapters: type_PodcastEpisodeChapter,\n\t\tenclosures: type_PodcastEpisodeEnclosure,\n\t\tstat: {\n\t\t\tproperties: {\n\t\t\t\tcreated: type_int,\n\t\t\t\tmodified: type_int,\n\t\t\t\tsize: type_int\n\t\t\t}\n\t\t},\n\t\ttag: type_TrackTag,\n\t\tmedia: type_TrackMedia,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nconst type_Bookmark = {\n\tproperties: {\n\t\tdestID: type_key,\n\t\tuserID: type_key,\n\t\tcomment: type_key,\n\t\tcreated: type_int,\n\t\tchanged: type_int,\n\t\tposition: type_int,\n\t\tid: type_key,\n\t\ttype: type_int\n\t}\n};\n\nexport const mapping: any = {\n\troot: type_Root,\n\tuser: type_User,\n\tfolder: type_Folder,\n\tplayqueue: type_PlayQueue,\n\ttrack: type_Track,\n\talbum: type_Album,\n\tartist: type_Artist,\n\tradio: type_Radio,\n\tstate: type_State,\n\tplaylist: type_Playlist,\n\tpodcast: type_Podcast,\n\tepisode: type_Episode,\n\tbookmark: type_Bookmark\n};\n","export async function wait(ms: number) {\n\treturn new Promise<void>(res => setTimeout(res, ms));\n}\n","import {DatabaseQuerySortType, DBObjectType} from '../../types';\nimport path from 'path';\nimport Nedb from 'nedb';\nimport {DBObject} from '../../objects/base/base.model';\nimport {Database, DatabaseIndex, DatabaseQuery} from '../db.model';\nimport {fileDeleteIfExists} from '../../utils/fs-utils';\n\nlet globaltempid = Date.now();\n\nfunction regExpEscape(literal_string: string): string {\n\treturn literal_string.replace(/[-[\\]{}()*+!<=:?.\\/\\\\^$|#\\s,]/g, '\\\\$&');\n}\n\nexport class DBIndexNedb<T extends DBObject> implements DatabaseIndex<T> {\n\tprotected _index: string;\n\tprotected _type: string;\n\ttype: DBObjectType;\n\tclient: Nedb;\n\n\tprivate hit2Obj(hit: T): T {\n\t\tdelete (<any>hit)._id;\n\t\treturn hit;\n\t}\n\n\tprivate hits2Objs(hits: Array<T>): Array<T> {\n\t\treturn hits.map(hit => {\n\t\t\treturn this.hit2Obj(hit);\n\t\t});\n\t}\n\n\tconstructor(type: DBObjectType, client: Nedb) {\n\t\tthis.type = type;\n\t\tthis._type = DBObjectType[type];\n\t\tthis._index = 'jam_' + DBObjectType[type];\n\t\tthis.client = client;\n\t}\n\n\tprivate async getNewId(): Promise<string> {\n\t\t// TODO: implement real sequence id in nedb\n\t\tglobaltempid++;\n\t\treturn globaltempid.toString();\n\t}\n\n\tprivate translateSortQuery(query: DatabaseQuery): { [name: string]: number } | undefined {\n\t\tif (query.sort) {\n\t\t\tconst result: { [name: string]: number } = {};\n\t\t\tconst sort = query.sort;\n\t\t\tObject.keys(sort).forEach(key => {\n\t\t\t\tresult[key] = sort[key] === DatabaseQuerySortType.ascending ? 1 : -1;\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate translateQuery(query: DatabaseQuery) {\n\t\tif (query.all) {\n\t\t\treturn {};\n\t\t}\n\t\tlet must: Array<any> = [];\n\t\tif (query.term) {\n\t\t\tconst o = query.term;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = o[key];\n\t\t\t\t\treturn term;\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.match) {\n\t\t\tconst o = query.match;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$regex: new RegExp(regExpEscape(o[key].toString()), 'i')};\n\t\t\t\t\treturn term;\n\t\t\t\t})\n\t\t\t);\n\n\t\t}\n\t\tif (query.terms) {\n\t\t\tconst o = query.terms;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map(key => {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$in: o[key]};\n\t\t\t\t\treturn term;\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWith) {\n\t\t\tconst o = query.startsWith;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map((key: string): any => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$where: function() {\n\t\t\t\t\t\t\treturn this[key].indexOf(o[key]) === 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.startsWiths) {\n\t\t\tconst o = query.startsWiths;\n\t\t\tmust = must.concat(\n\t\t\t\tObject.keys(o).map((key: string): any => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$where: function() {\n\t\t\t\t\t\t\treturn !!o[key].find(entry => this[key].indexOf(entry) === 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (query.range) {\n\t\t\tconst o = query.range;\n\t\t\tObject.keys(o).forEach(key => {\n\t\t\t\tconst vals = o[key];\n\t\t\t\tif (vals.hasOwnProperty('gte') && vals.gte !== undefined) {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$gte: vals.gte};\n\t\t\t\t\tmust.push(term);\n\t\t\t\t}\n\t\t\t\tif (vals.hasOwnProperty('lte') && vals.lte !== undefined) {\n\t\t\t\t\tconst term: any = {};\n\t\t\t\t\tterm[key] = {$lte: vals.lte};\n\t\t\t\t\tmust.push(term);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (query.notNull) {\n\t\t\tconst o = query.notNull;\n\t\t\tmust = must.concat(o.map(key => {\n\t\t\t\tconst term: any = {};\n\t\t\t\tterm[key] = {$exists: true};\n\t\t\t\treturn term;\n\t\t\t}));\n\t\t}\n\t\treturn {$and: must};\n\t}\n\n\tasync add(body: T): Promise<string> {\n\t\tconst id = await this.getNewId();\n\t\tbody.id = id;\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tthis.client.insert(body, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(id);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t}\n\n\tasync replace(id: string, body: T): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tthis.client.update({id: id}, body, {}, (err, numReplaced) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (numReplaced !== 1) {\n\t\t\t\t\treturn reject('Could not find ' + this._type + ' doc with id ' + id);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync upsert(id: string, body: T): Promise<void> {\n\t\tif (!id || id.length === 0) {\n\t\t\tawait this.add(body);\n\t\t\treturn;\n\t\t} else {\n\t\t\tawait this.replace(id, body);\n\t\t}\n\t}\n\n\tasync remove(id: string | Array<string>): Promise<void> {\n\t\tconst ids = Array.isArray(id) ? id : [id];\n\t\tif (ids.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tthis.client.remove({id: {$in: ids}}, {multi: true}, (err, count) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (count !== ids.length) {\n\t\t\t\t\treject('Found nr of items ' + count + ' does not match nr. of ids ' + ids.length);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync removeByQuery(query: DatabaseQuery): Promise<number> {\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tthis.client.remove(this.translateQuery(query), {multi: true}, (err, count) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(count);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync byId(id: string): Promise<T | undefined> {\n\t\tif (this.type === undefined) {\n\t\t\treturn await this.queryOne({term: {id: id}});\n\t\t} else {\n\t\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\t\tthis.client.find<T>({id: id}, (err, docs) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else if (docs.length === 0) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(this.hit2Obj(docs[0]));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tasync byIds(ids: Array<string>): Promise<Array<T>> {\n\t\treturn new Promise<Array<T>>((resolve, reject) => {\n\t\t\tthis.client.find<T>({id: {$in: ids}}, (err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.hits2Objs(docs));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync query(query: DatabaseQuery): Promise<Array<T>> {\n\t\tlet dbquery = this.client.find<T>(this.translateQuery(query));\n\t\tconst sort = this.translateSortQuery(query);\n\t\tif (sort) {\n\t\t\tdbquery = dbquery.sort(sort);\n\t\t}\n\t\tif (query.offset) {\n\t\t\tdbquery = dbquery.skip(query.offset);\n\t\t}\n\t\tif (query.amount) {\n\t\t\tdbquery = dbquery.limit(query.amount);\n\t\t}\n\n\t\treturn new Promise<Array<T>>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.hits2Objs(docs));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync queryOne(query: DatabaseQuery): Promise<T | undefined> {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tthis.client.find<T>(this.translateQuery(query)).limit(1).exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (docs.length === 0) {\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(this.hit2Obj(docs[0]));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync iterate(query: DatabaseQuery, onItems: (items: Array<T>) => Promise<void>): Promise<void> {\n\t\tlet dbquery = this.client.find<T>(this.translateQuery(query));\n\t\tconst sort = this.translateSortQuery(query);\n\t\tif (sort) {\n\t\t\tdbquery = dbquery.sort(sort);\n\t\t}\n\t\tif (query.offset) {\n\t\t\tdbquery = dbquery.skip(query.offset);\n\t\t}\n\t\tif (query.amount) {\n\t\t\tdbquery = dbquery.limit(query.amount);\n\t\t}\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tonItems(this.hits2Objs(docs)).then(resolve).catch(reject);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync queryIds(query: DatabaseQuery): Promise<Array<string>> {\n\t\tlet dbquery = this.client.find<T>(this.translateQuery(query));\n\t\tconst sort = this.translateSortQuery(query);\n\t\tif (sort) {\n\t\t\tdbquery = dbquery.sort(sort);\n\t\t}\n\t\tif (query.offset) {\n\t\t\tdbquery = dbquery.skip(query.offset);\n\t\t}\n\t\tif (query.amount) {\n\t\t\tdbquery = dbquery.limit(query.amount);\n\t\t}\n\t\treturn new Promise<Array<string>>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(docs.map(o => o.id));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate getDotFieldValues(field: string, o: any): Array<string> {\n\t\tconst result: Array<any> = [];\n\n\t\tconst getFieldValueR = (fields: Array<string>, obj: any) => {\n\t\t\tconst sub = obj[fields[0]];\n\t\t\tif (sub === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Array.isArray(sub)) {\n\t\t\t\tif (fields.length === 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsub.forEach(child => {\n\t\t\t\t\tgetFieldValueR(fields.slice(1), child);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (fields.length === 1) {\n\t\t\t\t\tresult.push(sub.toString());\n\t\t\t\t} else if (typeof sub === 'object') {\n\t\t\t\t\tgetFieldValueR(fields.slice(1), sub);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tgetFieldValueR(field.split('.'), o);\n\t\treturn result;\n\t}\n\n\tasync aggregate(query: DatabaseQuery, field: string): Promise<number> {\n\t\tlet dbquery = this.client.find<T>(this.translateQuery(query));\n\t\tconst sort = this.translateSortQuery(query);\n\t\tif (sort) {\n\t\t\tdbquery = dbquery.sort(sort);\n\t\t}\n\t\tif (query.offset) {\n\t\t\tdbquery = dbquery.skip(query.offset);\n\t\t}\n\t\tif (query.amount) {\n\t\t\tdbquery = dbquery.limit(query.amount);\n\t\t}\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tdbquery.exec((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst list: Array<string> = [];\n\t\t\t\t\tdocs.forEach(doc => {\n\t\t\t\t\t\tconst vals = this.getDotFieldValues(field, doc);\n\t\t\t\t\t\tvals.forEach(val => {\n\t\t\t\t\t\t\tif (list.indexOf(val) < 0) {\n\t\t\t\t\t\t\t\tlist.push(val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tresolve(list.length);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync count(query: DatabaseQuery): Promise<number> {\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tthis.client.count(this.translateQuery(query), (err, count) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(count);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tasync distinct(fieldname: string): Promise<Array<string>> {\n\t\treturn new Promise<Array<string>>((resolve, reject) => {\n\t\t\tthis.client.find<T>({}, (err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst list: Array<string> = [];\n\t\t\t\t\tdocs.forEach(doc => {\n\t\t\t\t\t\tconst vals = this.getDotFieldValues(fieldname, doc);\n\t\t\t\t\t\tvals.forEach(val => {\n\t\t\t\t\t\t\tif (list.indexOf(val) < 0) {\n\t\t\t\t\t\t\t\tlist.push(val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tresolve(list);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n}\n\nexport class DBNedb implements Database {\n\tclients: {\n\t\t[type: string]: { client: Nedb; filename: string };\n\t} = {};\n\n\tconstructor(db_path: string) {\n\t\tthis.getTypes().forEach(type => {\n\t\t\tconst filename = path.resolve(db_path, DBObjectType[type] + '.db');\n\t\t\tthis.clients[DBObjectType[type]] = {client: new Nedb({filename}), filename};\n\t\t});\n\t}\n\n\tasync drop(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait fileDeleteIfExists(db.filename);\n\t\t}\n\t}\n\n\tprivate async loadDatabase(db: Nedb) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdb.loadDatabase((err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tasync open(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait this.loadDatabase(db.client);\n\t\t}\n\t\tawait this.check();\n\t}\n\n\tasync close(): Promise<void> {\n\t\treturn;\n\t}\n\n\tprivate getTypes(): Array<DBObjectType> {\n\t\treturn Object.keys(DBObjectType)\n\t\t\t.filter(key => !isNaN(Number(key)))\n\t\t\t.map(key => parseInt(key, 10));\n\t}\n\n\tprivate async resetIndex(db: Nedb): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tdb.remove({}, {multi: true}, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tdb.loadDatabase((err2) => {\n\t\t\t\t\tif (err2) {\n\t\t\t\t\t\treject(err2);\n\t\t\t\t\t}\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait this.resetIndex(db.client);\n\t\t}\n\t}\n\n\tprivate async checkIndex(db: Nedb): Promise<void> {\n\t\treturn;\n\t}\n\n\tasync check(): Promise<void> {\n\t\tfor (const type of this.getTypes()) {\n\t\t\tconst db = this.clients[DBObjectType[type]];\n\t\t\tawait this.checkIndex(db.client);\n\t\t}\n\t}\n\n\tgetDBIndex<T extends DBObject>(type: DBObjectType) {\n\t\treturn new DBIndexNedb<T>(type, this.clients[DBObjectType[type]].client);\n\t}\n}\n","module.exports = require(\"nedb\");"],"sourceRoot":""}